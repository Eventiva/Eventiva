{
  "openapi": "3.0.0",
  "info": {
    "title": "Statuspage API",
    "description": "# Code of Conduct\nPlease don't abuse the API, and please report all feature requests and issues to\nhttps://support.atlassian.com/contact\n\n# Rate Limiting\nEach API token is limited to 1 request / second as measured on a 60 second rolling window.\nTo get this limit increased, please contact us at https://support.atlassian.com/contact\n\nError codes 420 or 429 indicate that you have exceeded the rate limit and the request has been rejected.\n\n# Basics\n\n## HTTPS\nIt's required\n\n## URL Prefix\nIn order to maintain version integrity into the future, the API is versioned. All calls\ncurrently begin with the following prefix:\n\n  https://api.statuspage.io/v1/\n\n## RESTful Interface\nWherever possible, the API seeks to implement repeatable patterns with logical,\nrepresentative URLs and descriptive HTTP verbs. Below are some examples and conventions\nyou will see throughout the documentation.\n\n* Collections are buckets: https://api.statuspage.io/v1/pages/asdf123/incidents.json\n* Elements have unique IDs: https://api.statuspage.io/v1/pages/asdf123/incidents/jklm456.json\n* GET will retrieve information about a collection/element\n* POST will create an element in a collection\n* PATCH will update a single element\n* PUT will replace a single element in a collection (rarely used)\n* DELETE will destroy a single element\n\n## Sending Data\nInformation can be sent in the body as form urlencoded or JSON, but make sure the\nContent-Type header matches the body structure or the server gremlins will be angry.\n\nAll examples are provided in JSON format, however they can easily be converted to form encoding\nif required.  Some examples of how to convert things are below:\n\n    // JSON\n    {\n      \"incident\": {\n        \"name\": \"test incident\",\n        \"components\": [\"8kbf7d35c070\", \"vtnh60py4yd7\"]\n      }\n    }\n\n    // Form Encoded (using curl as an example):\n    curl -X POST https://api.statuspage.io/v1/example \\\n      -d \"incident[name]=test incident\" \\\n      -d \"incident[components][]=8kbf7d35c070\" \\\n      -d \"incident[components][]=vtnh60py4yd7\"\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "contact": {
      "name": "Statuspage Support",
      "url": "https://support.atlassian.com/contact"
    },
    "version": "1.0.0",
    "x-logo": {
      "url": "https://d1ykxpo828xni0.cloudfront.net/Statuspage-logo-padding.svg"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "permissions",
      "description": "Operations about permissions"
    },
    {
      "name": "status embed config",
      "x-displayName": "Status Embed Config",
      "description": "Operations about status embed configs.\n"
    },
    {
      "name": "pages",
      "x-displayName": "Pages",
      "description": "Your page profile drives basic settings for your status page including your company name,\nnotification preferences, and time zone.\n"
    },
    {
      "name": "page access users",
      "x-displayName": "Page Access Users",
      "description": "Page access users allow you to limit people who can see your status page via a login. It\nalso allows you to limit the components and metrics each status page visitor can see,\ncustomizing the status page for their needs.\n\nYou will need Statuspage to switch your page type to audience-specific before these API\nendpoints have any effect on your status page.\n"
    },
    {
      "name": "page access user components",
      "x-displayName": "Page Access User Components"
    },
    {
      "name": "page access user metrics",
      "x-displayName": "Page Access User Metrics"
    },
    {
      "name": "page access groups",
      "x-displayName": "Page Access Groups",
      "description": "Page access groups allow you to create a grouping of components, metrics and people who\ncan see your status page via a login, customizing the status page for their needs.\n\nYou will need Statuspage to switch your page type to audience-specific before these API\nendpoints have any effect on your status page.\n"
    },
    {
      "name": "page access group components",
      "x-displayName": "Page Access Group Components"
    },
    {
      "name": "subscribers",
      "x-displayName": "Subscribers",
      "description": "Subscribers are those that receive notifications via email, sms, Slack, Microsoft Teams or webhook to incidents\nthat are reported and subsequently updated.\n\nSubscribers can be subscribed to:\n*  a status page, where they get all updates to every incident automatically,\n*  one or more components of a status page, where they get all updates to those\n   components automatically, or\n*  a specific incident, where they will only receive notifications for updates to that\n   incident after they subscribed (not applicable for Slack subscribers).\n\nIf a (page or component) subscriber fails to receive a notification, they will be\n[quarantined](https://help.statuspage.io/knowledge_base/topics/quarantined-subscribers).\nQuarantined subscribers are excluded from API responses and interactions by default.\n"
    },
    {
      "name": "templates",
      "x-displayName": "Templates",
      "description": "Templates allow you to set a pre-filled name and message that can be used later to save time when creating an incident or scheduling a maintenance.\n"
    },
    {
      "name": "incidents",
      "x-displayName": "Incidents",
      "description": "Incidents are critical events that have occurred with your product or service that you\nwant to communicate to your users. They come in three flavors: historical, realtime, and\nscheduled.\n\n**Historical**: historical incidents are submitted to accuractely reflect past incidents\nfrom your infrastructure that occurred before you created your Statuspage account.\n\n**Realtime**: realtime incidents are created when something unexpected is affecting your\ninfrastructure. Notifications are sent out to your subscribers informing them of the\nincident, and it is displayed prominently at the top of your status page. This is the\nmost common incident type.\n\n**Scheduled**: scheduled incidents are planned outages or maintenance periods coming\nup in the future. Notifications are sent out to your subscribers informing them of the\nplanned incident, and additional options are available to remind subscribers 60 minutes\nbefore the incident start and to automatically transition the incident to In Progress\nat the start of the incident maintenance period.\n"
    },
    {
      "name": "incident updates",
      "x-displayName": "Incident Updates"
    },
    {
      "name": "incident subscribers",
      "x-displayName": "Incident Subscribers"
    },
    {
      "name": "incident postmortem",
      "x-displayName": "Incident Postmortem",
      "description": "Postmortems are a great way to post information about an incident after it has passed.\nThey generally contain detailed information about the events that caused the incident,\nmitigation steps to stop it from happening, and followup work that has and will occur\nto ensure similar incidents do not occur in the future. After Postmortems are authored\nthey can be sent to customers via email notifications or Twitter, and will show on the\nincident details page.\n"
    },
    {
      "name": "components",
      "x-displayName": "Components",
      "description": "Components are the individual pieces of infrastructure that are listed on your status\npage.  This endpoint is used primarily to update status on individual components in the\nevent of an outage or for degraded performance.\n"
    },
    {
      "name": "component groups",
      "x-displayName": "Component Groups",
      "description": "Component groups provide a way to organize components. This endpoint can be used to\nlist, create, update or delete component groups. When a group is deleted, its child\ncomponents will be orphaned. Note: A group cannot be empty, so if all the child\ncomponents are deleted, the group will be deleted automatically. Another implication of\nthis is that components must be created before their groups, when a group is created it\nwill require a list of component IDs.\n"
    },
    {
      "name": "metrics",
      "x-displayName": "Metrics",
      "description": "System metrics are a great way to build trust and transparency around your organization,\nand ensure that your page is doing work for you each and every day. Submitting data for\na custom metric is as easy as sending a POST request with the timestamp and value of the\ndata point.\n\nTake note that there are a couple constraints and considerations when submitting data:\n\n* At minimum, one data point must be submitted every **5 minutes**. If there is a lag in\n  data, the gap will be reflected on the charts for the \"Day\" view.\n\n* Each data point is cast to its nearest **30s interval**, giving us a maximum of 10 data\n  points per 5 minute period. Submitting multiple data points near each other will result\n  in the last data point being the only one stored.\n\n* The timestamp value returned in the body of the response will be the **casted timestamp**\n  used to store your data.\n\n* Data can, and should, be backfilled up to **28 days** in the past.\n"
    },
    {
      "name": "metric providers",
      "x-displayName": "Metric Providers"
    },
    {
      "name": "users",
      "x-displayName": "Users",
      "description": "Users are owned by an organization, and have access to all pages and elements owned by\nthe pages under a given organization.\n<br /><br />\n**Important note**\n<br />\nUser management endpoints are not available for organizations using Atlassian accounts. These endpoints will be deprecated and will no longer work when all Statuspage accounts are migrated to Atlassian accounts.\n"
    }
  ],
  "paths": {
    "/pages": {
      "get": {
        "summary": "Get a list of pages",
        "description": "Get a list of pages",
        "responses": {
          "200": {
            "description": "Get a list of pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Page"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "pages"
        ],
        "operationId": "getPages",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}": {
      "patch": {
        "summary": "Update a page",
        "description": "Update a page",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPages"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "pages"
        ],
        "operationId": "patchPagesPageId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"page[name]=string\" \\\n  -d \"page[domain]=string\" \\\n  -d \"page[url]=string\""
          }
        ]
      },
      "put": {
        "summary": "Update a page",
        "description": "Update a page",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPages"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "pages"
        ],
        "operationId": "putPagesPageId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"page[name]=string\" \\\n  -d \"page[domain]=string\" \\\n  -d \"page[url]=string\""
          }
        ]
      },
      "get": {
        "summary": "Get a page",
        "description": "Get a page",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "pages"
        ],
        "operationId": "getPagesPageId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_users": {
      "post": {
        "summary": "Add a page access user",
        "description": "Add a page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdPageAccessUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add a page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be processed due to a conflict in resource state.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access users"
        ],
        "operationId": "postPagesPageIdPageAccessUsers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"page_access_user[external_login]=string\" \\\n  -d \"page_access_user[email]=string\" \\\n  -d \"page_access_user[page_access_group_ids][]=your-id\""
          }
        ]
      },
      "get": {
        "summary": "Get a list of page access users",
        "description": "Get a list of page access users",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "Email address to search for",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of page access users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageAccessUser"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access users"
        ],
        "operationId": "getPagesPageIdPageAccessUsers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_users/{page_access_user_id}": {
      "patch": {
        "summary": "Update page access user",
        "description": "Update page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access users"
        ],
        "operationId": "patchPagesPageIdPageAccessUsersPageAccessUserId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"page_access_user[external_login]=string\" \\\n  -d \"page_access_user[email]=string\" \\\n  -d \"page_access_user[page_access_group_ids][]=your-id\""
          }
        ]
      },
      "put": {
        "summary": "Update page access user",
        "description": "Update page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access users"
        ],
        "operationId": "putPagesPageIdPageAccessUsersPageAccessUserId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"page_access_user[external_login]=string\" \\\n  -d \"page_access_user[email]=string\" \\\n  -d \"page_access_user[page_access_group_ids][]=your-id\""
          }
        ]
      },
      "delete": {
        "summary": "Delete page access user",
        "description": "Delete page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete page access user"
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access users"
        ],
        "operationId": "deletePagesPageIdPageAccessUsersPageAccessUserId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "get": {
        "summary": "Get page access user",
        "description": "Get page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access users"
        ],
        "operationId": "getPagesPageIdPageAccessUsersPageAccessUserId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_users/{page_access_user_id}/components": {
      "patch": {
        "summary": "Add components for page access user",
        "description": "Add components for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdPageAccessUsersPageAccessUserIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add components for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user components"
        ],
        "operationId": "patchPagesPageIdPageAccessUsersPageAccessUserIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component_ids[]=your-id\""
          }
        ]
      },
      "put": {
        "summary": "Add components for page access user",
        "description": "Add components for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdPageAccessUsersPageAccessUserIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add components for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user components"
        ],
        "operationId": "putPagesPageIdPageAccessUsersPageAccessUserIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component_ids[]=your-id\""
          }
        ]
      },
      "post": {
        "summary": "Replace components for page access user",
        "description": "Replace components for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdPageAccessUsersPageAccessUserIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Replace components for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user components"
        ],
        "operationId": "postPagesPageIdPageAccessUsersPageAccessUserIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"component_ids[]=your-id\""
          }
        ]
      },
      "delete": {
        "summary": "Remove components for page access user",
        "description": "Remove components for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deletePagesPageIdPageAccessUsersPageAccessUserIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Remove components for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user components"
        ],
        "operationId": "deletePagesPageIdPageAccessUsersPageAccessUserIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE \\\n  -d \"component_ids[]=your-id\""
          }
        ]
      },
      "get": {
        "summary": "Get components for page access user",
        "description": "Get components for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get components for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Component"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user components"
        ],
        "operationId": "getPagesPageIdPageAccessUsersPageAccessUserIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_users/{page_access_user_id}/components/{component_id}": {
      "delete": {
        "summary": "Remove component for page access user",
        "description": "Remove component for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove component for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user components"
        ],
        "operationId": "deletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics": {
      "patch": {
        "summary": "Add metrics for page access user",
        "description": "Add metrics for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add metrics for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user metrics"
        ],
        "operationId": "patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/metrics \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"metric_ids[]=your-id\""
          }
        ]
      },
      "put": {
        "summary": "Add metrics for page access user",
        "description": "Add metrics for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdPageAccessUsersPageAccessUserIdMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add metrics for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user metrics"
        ],
        "operationId": "putPagesPageIdPageAccessUsersPageAccessUserIdMetrics",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/metrics \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"metric_ids[]=your-id\""
          }
        ]
      },
      "post": {
        "summary": "Replace metrics for page access user",
        "description": "Replace metrics for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdPageAccessUsersPageAccessUserIdMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Replace metrics for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user metrics"
        ],
        "operationId": "postPagesPageIdPageAccessUsersPageAccessUserIdMetrics",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/metrics \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"metric_ids[]=your-id\""
          }
        ]
      },
      "delete": {
        "summary": "Delete metrics for page access user",
        "description": "Delete metrics for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Delete metrics for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user metrics"
        ],
        "operationId": "deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/metrics \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "get": {
        "summary": "Get metrics for page access user",
        "description": "Get metrics for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get metrics for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metric"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access user metrics"
        ],
        "operationId": "getPagesPageIdPageAccessUsersPageAccessUserIdMetrics",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/metrics \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_users/{page_access_user_id}/metrics/{metric_id}": {
      "delete": {
        "summary": "Delete metric for page access user",
        "description": "Delete metric for page access user",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_user_id",
            "description": "Page Access User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metric_id",
            "description": "Identifier of metric requested",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete metric for page access user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessUser"
                }
              }
            }
          }
        },
        "tags": [
          "page access user metrics"
        ],
        "operationId": "deletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_users/{page_access_user_id}/metrics/{metric_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_groups": {
      "get": {
        "summary": "Get a list of page access groups",
        "description": "Get a list of page access groups",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of page access groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageAccessGroup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access groups"
        ],
        "operationId": "getPagesPageIdPageAccessGroups",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      },
      "post": {
        "summary": "Create a page access group",
        "description": "Create a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdPageAccessGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access groups"
        ],
        "operationId": "postPagesPageIdPageAccessGroups",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"page_access_group[name]=string\" \\\n  -d \"page_access_group[component_ids][]=your-id\" \\\n  -d \"page_access_group[metric_ids][]=your-id\""
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_groups/{page_access_group_id}": {
      "get": {
        "summary": "Get a page access group",
        "description": "Get a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access groups"
        ],
        "operationId": "getPagesPageIdPageAccessGroupsPageAccessGroupId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups/{page_access_group_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      },
      "patch": {
        "summary": "Update a page access group",
        "description": "Update a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdPageAccessGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access groups"
        ],
        "operationId": "patchPagesPageIdPageAccessGroupsPageAccessGroupId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups/{page_access_group_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"page_access_group[name]=string\" \\\n  -d \"page_access_group[component_ids][]=your-id\" \\\n  -d \"page_access_group[metric_ids][]=your-id\""
          }
        ]
      },
      "put": {
        "summary": "Update a page access group",
        "description": "Update a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdPageAccessGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access groups"
        ],
        "operationId": "putPagesPageIdPageAccessGroupsPageAccessGroupId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups/{page_access_group_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"page_access_group[name]=string\" \\\n  -d \"page_access_group[component_ids][]=your-id\" \\\n  -d \"page_access_group[metric_ids][]=your-id\""
          }
        ]
      },
      "delete": {
        "summary": "Remove a page access group",
        "description": "Remove a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access groups"
        ],
        "operationId": "deletePagesPageIdPageAccessGroupsPageAccessGroupId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups/{page_access_group_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_groups/{page_access_group_id}/components": {
      "patch": {
        "summary": "Add components to page access group",
        "description": "Add components to page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add components to page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access group components"
        ],
        "operationId": "patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups{page_access_group_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component_ids[]=your-id\""
          }
        ]
      },
      "put": {
        "summary": "Add components to page access group",
        "description": "Add components to page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add components to page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access group components"
        ],
        "operationId": "putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups{page_access_group_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component_ids[]=your-id\""
          }
        ]
      },
      "post": {
        "summary": "Replace components for a page access group",
        "description": "Replace components for a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Replace components for a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access group components"
        ],
        "operationId": "postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups{page_access_group_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"component_ids[]=your-id\""
          }
        ]
      },
      "delete": {
        "summary": "Delete components for a page access group",
        "description": "Delete components for a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Delete components for a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access group components"
        ],
        "operationId": "deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups{page_access_group_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "get": {
        "summary": "List components for a page access group",
        "description": "List components for a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List components for a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Component"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access group components"
        ],
        "operationId": "getPagesPageIdPageAccessGroupsPageAccessGroupIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups{page_access_group_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/page_access_groups/{page_access_group_id}/components/{component_id}": {
      "delete": {
        "summary": "Remove a component from a page access group",
        "description": "Remove a component from a page access group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "page_access_group_id",
            "description": "Page Access Group Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove a component from a page access group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAccessGroup"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "page access group components"
        ],
        "operationId": "deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/page_access_groups{page_access_group_id}/components/{component_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers/resend_confirmation": {
      "post": {
        "summary": "Resend confirmations to a list of subscribers",
        "description": "Resend confirmations to a list of subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdSubscribersResendConfirmation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Resend confirmations to a list of subscribers"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "postPagesPageIdSubscribersResendConfirmation",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/resend_confirmation \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"subscribers[]=your-id\""
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers/unsubscribe": {
      "post": {
        "summary": "Unsubscribe a list of subscribers",
        "description": "Unsubscribe a list of subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdSubscribersUnsubscribe"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Unsubscribe a list of subscribers"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "postPagesPageIdSubscribersUnsubscribe",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/unsubscribe \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"subscribers[]=your-id\""
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers/reactivate": {
      "post": {
        "summary": "Reactivate a list of subscribers",
        "description": "Reactivate a list of quarantined subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdSubscribersReactivate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reactivate a list of quarantined subscribers"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "postPagesPageIdSubscribersReactivate",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/reactivate \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"subscribers[]=your-id\""
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers/histogram_by_state": {
      "get": {
        "summary": "Get a histogram of subscribers by type and then state",
        "description": "Get a histogram of subscribers by type and then state",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a histogram of subscribers by type and then state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberCountByTypeAndState"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "getPagesPageIdSubscribersHistogramByState",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/histogram_by_state \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers/count": {
      "get": {
        "summary": "Get a count of subscribers by type",
        "description": "Get a count of subscribers by type",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "If this is present, only count subscribers of this type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "slack",
                "webhook",
                "teams",
                "integration_partner"
              ]
            }
          },
          {
            "in": "query",
            "name": "state",
            "description": "If this is present, only count subscribers in this state. Specify state \"all\" to count subscribers in any states.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "unconfirmed",
                "quarantined",
                "all"
              ],
              "default": "active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a count of subscribers by type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberCountByType"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "getPagesPageIdSubscribersCount",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/count \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers/unsubscribed": {
      "get": {
        "summary": "Get a list of unsubscribed subscribers",
        "description": "Get a list of unsubscribed subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of unsubscribed subscribers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscriber"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "getPagesPageIdSubscribersUnsubscribed",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/unsubscribed \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers": {
      "post": {
        "summary": "Create a subscriber",
        "description": "Create a subscriber. Not applicable for Slack subscribers.",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdSubscribers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a subscriber. Not applicable for Slack subscribers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "postPagesPageIdSubscribers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"subscriber[email]=string\""
          }
        ]
      },
      "get": {
        "summary": "Get a list of subscribers",
        "description": "Get a list of subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "q",
            "description": "If this is specified, search the contact information (email, endpoint, or phone number) for the provided value. This parameter doesn’t support searching for Slack subscribers.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "If specified, only return subscribers of the indicated type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "webhook",
                "slack",
                "teams",
                "integration_partner"
              ]
            }
          },
          {
            "in": "query",
            "name": "state",
            "description": "If this is present, only return subscribers in this state. Specify state \"all\" to find subscribers in any states.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "unconfirmed",
                "quarantined",
                "all"
              ],
              "default": "active"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of rows to return. If a text query string is specified (q=), the default and maximum limit is 100. If the text query string is not specified, the default and maximum limit are not set, and not providing a limit will return all the subscribers. Beginning February 28, 2023, a default limit of 100 will be imposed and this endpoint will return paginated data (i.e. will no longer return all subscribers) even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "The page offset of subscribers. The first page is page 0, the second page 1, etc. This skips page * limit subscribers. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field on which to sort: 'primary' to indicate sorting by the identifying field, 'created_at' for sorting by creation timestamp, 'quarantined_at' for sorting by quarantine timestamp, and 'relevance' which sorts by the relevancy of the search text. 'relevance' is not a valid parameter if no search text is supplied.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "primary",
                "created_at",
                "quarantined_at",
                "relevance"
              ],
              "default": "primary"
            }
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The sort direction of the listing.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of subscribers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscriber"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "getPagesPageIdSubscribers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers/{subscriber_id}/resend_confirmation": {
      "post": {
        "summary": "Resend confirmation to a subscriber",
        "description": "Resend confirmation to a subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriber_id",
            "description": "Subscriber Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Resend confirmation to a subscriber"
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "postPagesPageIdSubscribersSubscriberIdResendConfirmation",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/{subscriber_id}/resend_confirmation \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST\n"
          }
        ]
      }
    },
    "/pages/{page_id}/subscribers/{subscriber_id}": {
      "delete": {
        "summary": "Unsubscribe a subscriber",
        "description": "Unsubscribe a subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriber_id",
            "description": "Subscriber Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skip_unsubscription_notification",
            "description": "If skip_unsubscription_notification is true, the subscriber does not receive any notifications when they are unsubscribed.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe a subscriber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "deletePagesPageIdSubscribersSubscriberId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/{subscriber_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "patch": {
        "summary": "Update a subscriber",
        "description": "Update a subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriber_id",
            "description": "Subscriber Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdSubscribers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a subscriber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "patchPagesPageIdSubscribersSubscriberId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/{subscriber_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component_ids[]=your-id\""
          }
        ]
      },
      "get": {
        "summary": "Get a subscriber",
        "description": "Get a subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriber_id",
            "description": "Subscriber Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a subscriber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "subscribers"
        ],
        "operationId": "getPagesPageIdSubscribersSubscriberId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/subscribers/{subscriber_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incident_templates": {
      "post": {
        "summary": "Create a template",
        "description": "Create a template",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdIncidentTemplates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "templates"
        ],
        "operationId": "postPagesPageIdIncidentTemplates",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incident_templates \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"template[name]=string\" \\\n  -d \"template[title]=string\" \\\n  -d \"template[body]=string\""
          }
        ]
      },
      "get": {
        "summary": "Get a list of templates",
        "description": "Get a list of templates",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentTemplate"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "templates"
        ],
        "operationId": "getPagesPageIdIncidentTemplates",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incident_templates \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents": {
      "post": {
        "summary": "Create an incident",
        "description": "Create an incident",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdIncidents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an incident",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "postPagesPageIdIncidents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"incident[name]=string\" \\\n  -d \"incident[status]=string\" \\\n  -d \"incident[body]=string\""
          }
        ]
      },
      "get": {
        "summary": "Get a list of incidents",
        "description": "Get a list of incidents",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "q",
            "description": "If this is specified, search for the text query string in the incidents' name, status, postmortem_body, and incident_updates fields.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of rows to return per page. The default and maximum limit is 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of incidents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Incident"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "getPagesPageIdIncidents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/active_maintenance": {
      "get": {
        "summary": "Get a list of active maintenances",
        "description": "Get a list of active maintenances",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of active maintenances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Incident"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "getPagesPageIdIncidentsActiveMaintenance",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/active_maintenance \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/upcoming": {
      "get": {
        "summary": "Get a list of upcoming incidents",
        "description": "Get a list of upcoming incidents",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of upcoming incidents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Incident"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "getPagesPageIdIncidentsUpcoming",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/upcoming \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/scheduled": {
      "get": {
        "summary": "Get a list of scheduled incidents",
        "description": "Get a list of scheduled incidents",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of scheduled incidents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Incident"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "getPagesPageIdIncidentsScheduled",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/scheduled \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/unresolved": {
      "get": {
        "summary": "Get a list of unresolved incidents",
        "description": "Get a list of unresolved incidents",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of unresolved incidents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Incident"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "getPagesPageIdIncidentsUnresolved",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/unresolved \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/{incident_id}": {
      "delete": {
        "summary": "Delete an incident",
        "description": "Delete an incident",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an incident",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "deletePagesPageIdIncidentsIncidentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "patch": {
        "summary": "Update an incident",
        "description": "Update an incident",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdIncidents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an incident",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "patchPagesPageIdIncidentsIncidentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"incident[name]=string\" \\\n  -d \"incident[status]=string\" \\\n  -d \"incident[body]=string\""
          }
        ]
      },
      "put": {
        "summary": "Update an incident",
        "description": "Update an incident",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdIncidents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an incident",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "putPagesPageIdIncidentsIncidentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"incident[name]=string\" \\\n  -d \"incident[status]=string\" \\\n  -d \"incident[body]=string\""
          }
        ]
      },
      "get": {
        "summary": "Get an incident",
        "description": "Get an incident",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an incident",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          }
        },
        "tags": [
          "incidents"
        ],
        "operationId": "getPagesPageIdIncidentsIncidentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/{incident_id}/incident_updates/{incident_update_id}": {
      "patch": {
        "summary": "Update a previous incident update",
        "description": "Update a previous incident update",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_update_id",
            "description": "Incident Update Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdIncidentsIncidentIdIncidentUpdates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a previous incident update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentUpdate"
                }
              }
            }
          }
        },
        "tags": [
          "incident updates"
        ],
        "operationId": "patchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/incident_updates/{incident_update_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"incident_update[wants_twitter_update]=true\" \\\n  -d \"incident_update[body]=string\""
          }
        ]
      },
      "put": {
        "summary": "Update a previous incident update",
        "description": "Update a previous incident update",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_update_id",
            "description": "Incident Update Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdIncidentsIncidentIdIncidentUpdates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a previous incident update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentUpdate"
                }
              }
            }
          }
        },
        "tags": [
          "incident updates"
        ],
        "operationId": "putPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/incident_updates/{incident_update_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"incident_update[wants_twitter_update]=true\" \\\n  -d \"incident_update[body]=string\""
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/{incident_id}/subscribers": {
      "post": {
        "summary": "Create an incident subscriber",
        "description": "Create an incident subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdIncidentsIncidentIdSubscribers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create an incident subscriber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incident subscribers"
        ],
        "operationId": "postPagesPageIdIncidentsIncidentIdSubscribers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/subscribers \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"email=string\""
          }
        ]
      },
      "get": {
        "summary": "Get a list of incident subscribers",
        "description": "Get a list of incident subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of incident subscribers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscriber"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incident subscribers"
        ],
        "operationId": "getPagesPageIdIncidentsIncidentIdSubscribers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/subscribers \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}": {
      "delete": {
        "summary": "Unsubscribe an incident subscriber",
        "description": "Unsubscribe an incident subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriber_id",
            "description": "Subscriber Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe an incident subscriber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          }
        },
        "tags": [
          "incident subscribers"
        ],
        "operationId": "deletePagesPageIdIncidentsIncidentIdSubscribersSubscriberId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "get": {
        "summary": "Get an incident subscriber",
        "description": "Get an incident subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriber_id",
            "description": "Subscriber Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an incident subscriber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          }
        },
        "tags": [
          "incident subscribers"
        ],
        "operationId": "getPagesPageIdIncidentsIncidentIdSubscribersSubscriberId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}/resend_confirmation": {
      "post": {
        "summary": "Resend confirmation to an incident subscriber",
        "description": "Resend confirmation to an incident subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriber_id",
            "description": "Subscriber Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Resend confirmation to an incident subscriber"
          }
        },
        "tags": [
          "incident subscribers"
        ],
        "operationId": "postPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmation",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}/resend_confirmation \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/{incident_id}/postmortem": {
      "get": {
        "summary": "Get Postmortem",
        "description": "Get Postmortem",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Postmortem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Postmortem"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incident postmortem"
        ],
        "operationId": "getPagesPageIdIncidentsIncidentIdPostmortem",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/postmortem \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      },
      "put": {
        "summary": "Create Postmortem",
        "description": "Create Postmortem",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdIncidentsIncidentIdPostmortem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Create Postmortem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Postmortem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incident postmortem"
        ],
        "operationId": "putPagesPageIdIncidentsIncidentIdPostmortem",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/postmortem \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PUT \\\n  -d \"postmortem[body_draft]=string\""
          }
        ]
      },
      "delete": {
        "summary": "Delete Postmortem",
        "description": "Delete Postmortem",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete Postmortem"
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incident postmortem"
        ],
        "operationId": "deletePagesPageIdIncidentsIncidentIdPostmortem",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/postmortem \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/{incident_id}/postmortem/publish": {
      "put": {
        "summary": "Publish Postmortem",
        "description": "Publish Postmortem",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdIncidentsIncidentIdPostmortemPublish"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Publish Postmortem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Postmortem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incident postmortem"
        ],
        "operationId": "putPagesPageIdIncidentsIncidentIdPostmortemPublish",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/postmortem/publish \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PUT \\\n  -d \"postmortem[notify_tweets]=true\" \\\n  -d \"postmortem[notify_subscribers]=true\""
          }
        ]
      }
    },
    "/pages/{page_id}/incidents/{incident_id}/postmortem/revert": {
      "put": {
        "summary": "Revert Postmortem",
        "description": "Revert Postmortem",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "incident_id",
            "description": "Incident Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Revert Postmortem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Postmortem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "incident postmortem"
        ],
        "operationId": "putPagesPageIdIncidentsIncidentIdPostmortemRevert",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/incidents/{incident_id}/postmortem/revert \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PUT\n"
          }
        ]
      }
    },
    "/pages/{page_id}/components": {
      "post": {
        "summary": "Create a component",
        "description": "Create a component",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Component"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "postPagesPageIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"component[description]=string\" \\\n  -d \"component[status]=string\" \\\n  -d \"component[name]=string\""
          }
        ]
      },
      "get": {
        "summary": "Get a list of components",
        "description": "Get a list of components",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 1100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of components",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Component"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "getPagesPageIdComponents",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/components/{component_id}": {
      "patch": {
        "summary": "Update a component",
        "description": "If group_id is \"null\" then the component will be removed from a group.",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Component"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "patchPagesPageIdComponentsComponentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components/{component_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component[description]=string\" \\\n  -d \"component[status]=string\" \\\n  -d \"component[name]=string\""
          }
        ]
      },
      "put": {
        "summary": "Update a component",
        "description": "If group_id is \"null\" then the component will be removed from a group.",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdComponents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Component"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "putPagesPageIdComponentsComponentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components/{component_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component[description]=string\" \\\n  -d \"component[status]=string\" \\\n  -d \"component[name]=string\""
          }
        ]
      },
      "delete": {
        "summary": "Delete a component",
        "description": "Delete a component",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete a component"
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "deletePagesPageIdComponentsComponentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components/{component_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "get": {
        "summary": "Get a component",
        "description": "Get a component",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Component"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "getPagesPageIdComponentsComponentId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components/{component_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/components/{component_id}/uptime": {
      "get": {
        "summary": "Get uptime data for a component",
        "description": "Get uptime data for a component that has uptime showcase enabled",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start",
            "description": "The start date for uptime calculation (defaults to the component's start_date field or 90 days ago, whichever is more recent).\nThe maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year.\nIf the year and month are given, the start date defaults to the first day of that month.\nThe earliest supported date is January 1, 1970.\n",
            "required": false,
            "schema": {
              "type": "PartialStartDate"
            }
          },
          {
            "in": "query",
            "name": "end",
            "description": "The end date for uptime calculation (defaults to today in the page's time zone). The maximum supported date range is six calendar months.\nIf the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month.\nThe earliest supported date is January 1, 1970.\n",
            "required": false,
            "schema": {
              "type": "PartialEndDate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get uptime data for a component that has uptime showcase enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentUptime"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "getPagesPageIdComponentsComponentIdUptime"
      }
    },
    "/pages/{page_id}/components/{component_id}/page_access_users": {
      "delete": {
        "summary": "Remove page access users from component",
        "description": "Remove page access users from component",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove page access users from component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Component"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "deletePagesPageIdComponentsComponentIdPageAccessUsers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components/{component_id}/page_access_users \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "post": {
        "summary": "Add page access users to a component",
        "description": "Add page access users to a component",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "page_access_user_ids": {
                    "description": "List of page access users to add to component",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "page_access_user_ids"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Add page access users to a component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Component"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "postPagesPageIdComponentsComponentIdPageAccessUsers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components/{component_id}/page_access_users \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"page_access_user_ids[]=your-id\""
          }
        ]
      }
    },
    "/pages/{page_id}/components/{component_id}/page_access_groups": {
      "delete": {
        "summary": "Remove page access groups from a component",
        "description": "Remove page access groups from a component",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove page access groups from a component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Component"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "deletePagesPageIdComponentsComponentIdPageAccessGroups",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components/{component_id}/page_access_groups \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "post": {
        "summary": "Add page access groups to a component",
        "description": "Add page access groups to a component",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "component_id",
            "description": "Component identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Add page access groups to a component",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Component"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "components"
        ],
        "operationId": "postPagesPageIdComponentsComponentIdPageAccessGroups",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/components/{component_id}/page_access_groups \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"page_access_group_ids[]=your-id\""
          }
        ]
      }
    },
    "/pages/{page_id}/component-groups": {
      "post": {
        "summary": "Create a component group",
        "description": "Create a component group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdComponentGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a component group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupComponent"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "component groups"
        ],
        "operationId": "postPagesPageIdComponentGroups",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/component-groups \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"component_group[components][]=your-id\" \\\n  -d \"component_group[name]=string\""
          }
        ]
      },
      "get": {
        "summary": "Get a list of component groups",
        "description": "Get a list of component groups",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of component groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupComponent"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "component groups"
        ],
        "operationId": "getPagesPageIdComponentGroups",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/component-groups \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/component-groups/{id}": {
      "patch": {
        "summary": "Update a component group",
        "description": "Update a component group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Component group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdComponentGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a component group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupComponent"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "component groups"
        ],
        "operationId": "patchPagesPageIdComponentGroupsId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/component-groups/{id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component_group[components][]=your-id\" \\\n  -d \"component_group[name]=string\""
          }
        ]
      },
      "put": {
        "summary": "Update a component group",
        "description": "Update a component group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Component group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdComponentGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a component group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupComponent"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "component groups"
        ],
        "operationId": "putPagesPageIdComponentGroupsId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/component-groups/{id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"component_group[components][]=your-id\" \\\n  -d \"component_group[name]=string\""
          }
        ]
      },
      "delete": {
        "summary": "Delete a component group",
        "description": "Delete a component group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Component group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a component group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupComponent"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "component groups"
        ],
        "operationId": "deletePagesPageIdComponentGroupsId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/component-groups/{id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "get": {
        "summary": "Get a component group",
        "description": "Get a component group",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Component group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a component group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupComponent"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "component groups"
        ],
        "operationId": "getPagesPageIdComponentGroupsId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/component-groups/{id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/component-groups/{id}/uptime": {
      "get": {
        "summary": "Get uptime data for a component group",
        "description": "Get uptime data for a component group that has uptime showcase enabled for at least one component.",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "description": "Component group identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "start",
            "description": "The start date for uptime calculation (defaults to the date of the component in the group with the earliest start_date, or 90 days ago, whichever is more recent).\nThe maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year.\nIf the year and month are given, the start date defaults to the first day of that month.\nThe earliest supported date is January 1, 1970.\n",
            "required": false,
            "schema": {
              "type": "PartialStartDate"
            }
          },
          {
            "in": "query",
            "name": "end",
            "description": "The end date for uptime calculation (defaults to today in the page's time zone). The maximum supported date range is six calendar months.\nIf the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month.\nThe earliest supported date is January 1, 1970.\n",
            "required": false,
            "schema": {
              "type": "PartialEndDate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get uptime data for a component group that has uptime showcase enabled for at least one component.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentGroupUptime"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "component groups"
        ],
        "operationId": "getPagesPageIdComponentGroupsIdUptime"
      }
    },
    "/pages/{page_id}/metrics/data": {
      "post": {
        "summary": "Add data points to metrics",
        "description": "Add data points to metrics",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdMetricsData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Data Point is submitted and is currently being added to the metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricAddResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "twlngv8ry8d0": [
                        {
                          "timestamp": 1720519867,
                          "value": 123.456
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "operationId": "postPagesPageIdMetricsData",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics/data \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"data[metric_id][][timestamp]=0\" \\\n  -d \"data[metric_id][][value]=0\""
          }
        ]
      }
    },
    "/pages/{page_id}/metrics": {
      "get": {
        "summary": "Get a list of metrics",
        "description": "Get a list of metrics",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "operationId": "getPagesPageIdMetrics",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/metrics/{metric_id}": {
      "patch": {
        "summary": "Update a metric",
        "description": "Update a metric",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metric_id",
            "description": "Metric Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a metric",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "operationId": "patchPagesPageIdMetricsMetricId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics/{metric_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"metric[name]=string\""
          }
        ]
      },
      "put": {
        "summary": "Update a metric",
        "description": "Update a metric",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metric_id",
            "description": "Metric Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a metric",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "operationId": "putPagesPageIdMetricsMetricId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics/{metric_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"metric[name]=string\""
          }
        ]
      },
      "delete": {
        "summary": "Delete a metric",
        "description": "Delete a metric",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metric_id",
            "description": "Metric Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a metric",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "operationId": "deletePagesPageIdMetricsMetricId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics/{metric_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "get": {
        "summary": "Get a metric",
        "description": "Get a metric",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metric_id",
            "description": "Metric Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a metric",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "operationId": "getPagesPageIdMetricsMetricId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics/{metric_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/pages/{page_id}/metrics/{metric_id}/data": {
      "delete": {
        "summary": "Reset data for a metric",
        "description": "Reset data for a metric",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metric_id",
            "description": "Metric Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset data for a metric",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "operationId": "deletePagesPageIdMetricsMetricIdData",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics/{metric_id}/data \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      },
      "post": {
        "summary": "Add data to a metric",
        "description": "Add data to a metric",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metric_id",
            "description": "Metric Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdMetricsMetricIdData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add data to a metric",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleMetricAddResponse"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "operationId": "postPagesPageIdMetricsMetricIdData",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics/{metric_id}/data \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"data[timestamp]=0\" \\\n  -d \"data[value]=0\""
          }
        ]
      }
    },
    "/pages/{page_id}/metrics_providers": {
      "get": {
        "summary": "Get a list of metric providers",
        "description": "Get a list of metric providers",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of metric providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricsProvider"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metric providers"
        ],
        "operationId": "getPagesPageIdMetricsProviders",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics_providers \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      },
      "post": {
        "summary": "Create a metric provider",
        "description": "Create a metric provider",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdMetricsProviders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a metric provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsProvider"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metric providers"
        ],
        "operationId": "postPagesPageIdMetricsProviders",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics_providers \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"metrics_provider[email]=string\" \\\n  -d \"metrics_provider[api_token]=string\" \\\n  -d \"metrics_provider[type]=string\""
          }
        ]
      }
    },
    "/pages/{page_id}/metrics_providers/{metrics_provider_id}": {
      "get": {
        "summary": "Get a metric provider",
        "description": "Get a metric provider",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metrics_provider_id",
            "description": "Metric Provider Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a metric provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsProvider"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metric providers"
        ],
        "operationId": "getPagesPageIdMetricsProvidersMetricsProviderId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics_providers/{metrics_provider_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      },
      "patch": {
        "summary": "Update a metric provider",
        "description": "Update a metric provider",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metrics_provider_id",
            "description": "Metric Provider Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdMetricsProviders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a metric provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsProvider"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metric providers"
        ],
        "operationId": "patchPagesPageIdMetricsProvidersMetricsProviderId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics_providers/{metrics_provider_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"metrics_provider[email]=string\" \\\n  -d \"metrics_provider[api_token]=string\" \\\n  -d \"metrics_provider[type]=string\""
          }
        ]
      },
      "put": {
        "summary": "Update a metric provider",
        "description": "Update a metric provider",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metrics_provider_id",
            "description": "Metric Provider Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdMetricsProviders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a metric provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsProvider"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metric providers"
        ],
        "operationId": "putPagesPageIdMetricsProvidersMetricsProviderId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics_providers/{metrics_provider_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"metrics_provider[email]=string\" \\\n  -d \"metrics_provider[api_token]=string\" \\\n  -d \"metrics_provider[type]=string\""
          }
        ]
      },
      "delete": {
        "summary": "Delete a metric provider",
        "description": "Delete a metric provider",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metrics_provider_id",
            "description": "Metric Provider Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a metric provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsProvider"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metric providers"
        ],
        "operationId": "deletePagesPageIdMetricsProvidersMetricsProviderId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics_providers/{metrics_provider_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      }
    },
    "/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics": {
      "get": {
        "summary": "List metrics for a metric provider",
        "description": "List metrics for a metric provider",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metrics_provider_id",
            "description": "Metric Provider Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List metrics for a metric provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics",
          "metric providers"
        ],
        "operationId": "getPagesPageIdMetricsProvidersMetricsProviderIdMetrics",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      },
      "post": {
        "summary": "Create a metric for a metric provider",
        "description": "Create a metric for a metric provider",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "metrics_provider_id",
            "description": "Metric Provider Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postPagesPageIdMetricsProvidersMetricsProviderIdMetrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a metric for a metric provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metric"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "metrics",
          "metric providers"
        ],
        "operationId": "postPagesPageIdMetricsProvidersMetricsProviderIdMetrics",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"metric[name]=string\" \\\n  -d \"metric[transform]=string\" \\\n  -d \"metric[suffix]=string\""
          }
        ]
      }
    },
    "/pages/{page_id}/status_embed_config": {
      "get": {
        "summary": "Get status embed config settings",
        "description": "Get status embed config settings",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get status embed config settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusEmbedConfig"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "status embed config"
        ],
        "operationId": "getPagesPageIdStatusEmbedConfig",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/status_embed_config \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      },
      "patch": {
        "summary": "Update status embed config settings",
        "description": "Update status embed config settings",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchPagesPageIdStatusEmbedConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update status embed config settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusEmbedConfig"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "status embed config"
        ],
        "operationId": "patchPagesPageIdStatusEmbedConfig",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/status_embed_config \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"status_embed_config[position]=string\" \\\n  -d \"status_embed_config[incident_background_color]=string\" \\\n  -d \"status_embed_config[maintenance_text_color]=string\""
          }
        ]
      },
      "put": {
        "summary": "Update status embed config settings",
        "description": "Update status embed config settings",
        "parameters": [
          {
            "in": "path",
            "name": "page_id",
            "description": "Page identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putPagesPageIdStatusEmbedConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update status embed config settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusEmbedConfig"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "status embed config"
        ],
        "operationId": "putPagesPageIdStatusEmbedConfig",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/pages/{page_id}/status_embed_config \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PATCH \\\n  -d \"status_embed_config[position]=string\" \\\n  -d \"status_embed_config[incident_background_color]=string\" \\\n  -d \"status_embed_config[maintenance_text_color]=string\""
          }
        ]
      }
    },
    "/organizations/{organization_id}/permissions/{user_id}": {
      "put": {
        "summary": "Update a user's role permissions",
        "description": "Update a user's role permissions. Payload should contain a mapping of pages to a set of the desired roles,\n                  if the page has Role Based Access Control. Otherwise, the pages should map to an empty hash.\n                  User will lose access to any pages omitted from the payload.",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "description": "Organization Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "User identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putOrganizationsOrganizationIdPermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update a user's role permissions. Payload should contain a mapping of pages to a set of the desired roles,\n                  if the page has Role Based Access Control. Otherwise, the pages should map to an empty hash.\n                  User will lose access to any pages omitted from the payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                },
                "examples": {
                  "response": {
                    "value": {
                      "user_id": "gg8b5l1sk2n0",
                      "pages": [
                        {
                          "page_id": "cdrzvmgtf411",
                          "page_configuration": false,
                          "incident_manager": true,
                          "maintenance_manager": true
                        },
                        {
                          "page_id": "6nmmzwdkfr5m",
                          "page_configuration": false,
                          "incident_manager": true,
                          "maintenance_manager": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "permissions"
        ],
        "operationId": "putOrganizationsOrganizationIdPermissionsUserId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/organizations/{organization_id}/permissions/{user_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X PUT \\\n  -d \"pages[page_id][page_configuration]=true\" \\\n  -d \"pages[page_id][incident_manager]=true\" \\\n  -d \"pages[page_id][maintenance_manager]=true\""
          }
        ]
      },
      "get": {
        "summary": "Get a user's permissions",
        "description": "Get a user's permissions",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "description": "Organization Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "User identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a user's permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permissions"
                },
                "examples": {
                  "response": {
                    "value": {
                      "user_id": "vdg1703hxt80",
                      "pages": [
                        {
                          "page_id": "8vwh4gr8q09w",
                          "page_configuration": false,
                          "incident_manager": true,
                          "maintenance_manager": true
                        },
                        {
                          "page_id": "vvc2w3zqx69s",
                          "page_configuration": false,
                          "incident_manager": true,
                          "maintenance_manager": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "users",
          "permissions"
        ],
        "operationId": "getOrganizationsOrganizationIdPermissionsUserId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/organizations/{organization_id}/permissions/{user_id} \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    },
    "/organizations/{organization_id}/users/{user_id}": {
      "delete": {
        "summary": "Delete a user",
        "description": "Delete a user",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "description": "Organization Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "User Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "deleteOrganizationsOrganizationIdUsersUserId",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/organizations/{organization_id}/users \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X DELETE\n"
          }
        ]
      }
    },
    "/organizations/{organization_id}/users": {
      "post": {
        "summary": "Create a user",
        "description": "Create a user",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "description": "Organization Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postOrganizationsOrganizationIdUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "postOrganizationsOrganizationIdUsers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/organizations/{organization_id}/users \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X POST \\\n  -d \"user[email]=string\""
          }
        ]
      },
      "get": {
        "summary": "Get a list of users",
        "description": "Get a list of users",
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "description": "Organization Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "per_page",
            "description": "Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Could not authenticate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "getOrganizationsOrganizationIdUsers",
        "x-code-samples": [
          {
            "lang": "Curl",
            "source": "curl https://api.statuspage.io/v1/organizations/{organization_id}/users \\\n  -H \"Authorization: OAuth your-api-key-goes-here\" \\\n  -X GET\n"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.statuspage.io/v1"
    }
  ],
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "#### Obtaining your API Key\n\nAuthentication is done via an API token provided in the Statuspage management interface.\n\n  1. Log in to your account at https://manage.statuspage.io/login.\n  2. Click on your avatar in the bottom left of your screen to access the user menu.\n  3. Click **API info**.\n\n### Passing your API key in an authorization header\n\nThe following example authenticates you with the Statuspage API.  Along with the Page ID\nlisted on the API page, we can fetch your page profile.\n\n    curl -H \"Authorization: OAuth 89a229ce1a8dbcf9ff30430fbe35eb4c0426574bca932061892cefd2138aa4b1\" \\\n      https://api.statuspage.io/v1/pages/gytm4qzbx9t6.json\n\n### Passing your API key in a query param\n\n    curl \"https://api.statuspage.io/v1/pages/gytm4qzbx9t6.json?api_key=89a229ce1a8dbcf9ff30430fbe35eb4c0426574bca932061892cefd2138aa4b1\"\n"
      }
    },
    "schemas": {
      "Page": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "4lgcg1tlj1tk",
            "description": "Page identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp the record was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp the record was last updated"
          },
          "name": {
            "type": "string",
            "example": "My Company Status",
            "description": "Name of your page to be displayed"
          },
          "page_description": {
            "type": "string"
          },
          "headline": {
            "type": "string"
          },
          "branding": {
            "type": "string",
            "description": "The main template your statuspage will use"
          },
          "subdomain": {
            "type": "string",
            "example": "your-subdomain.statuspage.io",
            "description": "Subdomain at which to access your status page"
          },
          "domain": {
            "type": "string",
            "example": "status.mycompany.com",
            "description": "CNAME alias for your status page"
          },
          "url": {
            "type": "string",
            "example": "https://www.mycompany.com",
            "description": "Website of your page.  Clicking on your statuspage image will link here."
          },
          "support_url": {
            "type": "string"
          },
          "hidden_from_search": {
            "type": "boolean",
            "description": "Should your page hide itself from search engines"
          },
          "allow_page_subscribers": {
            "type": "boolean",
            "description": "Can your users subscribe to all notifications on the page"
          },
          "allow_incident_subscribers": {
            "type": "boolean",
            "description": "Can your users subscribe to notifications for a single incident"
          },
          "allow_email_subscribers": {
            "type": "boolean",
            "description": "Can your users choose to receive notifications via email"
          },
          "allow_sms_subscribers": {
            "type": "boolean",
            "description": "Can your users choose to receive notifications via SMS"
          },
          "allow_rss_atom_feeds": {
            "type": "boolean",
            "description": "Can your users choose to access incident feeds via RSS/Atom (not functional on Audience-Specific pages)"
          },
          "allow_webhook_subscribers": {
            "type": "boolean",
            "description": "Can your users choose to receive notifications via Webhooks"
          },
          "notifications_from_email": {
            "type": "string",
            "example": "no-reply@status.mycompany.com",
            "description": "Allows you to customize the email address your page notifications come from"
          },
          "notifications_email_footer": {
            "type": "string",
            "description": "Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting"
          },
          "activity_score": {
            "type": "number",
            "format": "float"
          },
          "twitter_username": {
            "type": "string"
          },
          "viewers_must_be_team_members": {
            "type": "boolean"
          },
          "ip_restrictions": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "time_zone": {
            "type": "string",
            "example": "UTC",
            "description": "Timezone configured for your page"
          },
          "css_body_background_color": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_font_color": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_light_font_color": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_greens": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_yellows": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_oranges": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_blues": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_reds": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_border_color": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_graph_color": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_link_color": {
            "type": "string",
            "description": "CSS Color"
          },
          "css_no_data": {
            "type": "string",
            "description": "CSS Color"
          },
          "favicon_logo": {
            "type": "string"
          },
          "transactional_logo": {
            "type": "string"
          },
          "hero_cover": {
            "type": "string"
          },
          "email_logo": {
            "type": "string"
          },
          "twitter_logo": {
            "type": "string"
          }
        },
        "description": "Get a page"
      },
      "ErrorEntity": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "description": "Get a list of users"
      },
      "patchPages": {
        "type": "object",
        "properties": {
          "page": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of your page to be displayed"
              },
              "domain": {
                "type": "string",
                "description": "CNAME alias for your status page"
              },
              "subdomain": {
                "type": "string",
                "description": "Subdomain at which to access your status page"
              },
              "url": {
                "type": "string",
                "description": "Website of your page.  Clicking on your statuspage image will link here."
              },
              "branding": {
                "type": "string",
                "description": "The main template your statuspage will use",
                "enum": [
                  "basic",
                  "premium"
                ]
              },
              "css_body_background_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_font_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_light_font_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_greens": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_yellows": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_oranges": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_reds": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_blues": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_border_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_graph_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_link_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_no_data": {
                "type": "string",
                "description": "CSS Color"
              },
              "hidden_from_search": {
                "type": "boolean",
                "description": "Should your page hide itself from search engines"
              },
              "viewers_must_be_team_members": {
                "type": "boolean"
              },
              "allow_page_subscribers": {
                "type": "boolean",
                "description": "Can your users subscribe to all notifications on the page"
              },
              "allow_incident_subscribers": {
                "type": "boolean",
                "description": "Can your users subscribe to notifications for a single incident"
              },
              "allow_email_subscribers": {
                "type": "boolean",
                "description": "Can your users choose to receive notifications via email"
              },
              "allow_sms_subscribers": {
                "type": "boolean",
                "description": "Can your users choose to receive notifications via SMS"
              },
              "allow_rss_atom_feeds": {
                "type": "boolean",
                "description": "Can your users choose to access incident feeds via RSS/Atom (not functional on Audience-Specific pages)"
              },
              "allow_webhook_subscribers": {
                "type": "boolean",
                "description": "Can your users choose to receive notifications via Webhooks"
              },
              "notifications_from_email": {
                "type": "string",
                "description": "Allows you to customize the email address your page notifications come from"
              },
              "time_zone": {
                "type": "string",
                "description": "Timezone configured for your page"
              },
              "notifications_email_footer": {
                "type": "string",
                "description": "Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting"
              }
            }
          }
        },
        "description": "Update a page"
      },
      "putPages": {
        "type": "object",
        "properties": {
          "page": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of your page to be displayed"
              },
              "domain": {
                "type": "string",
                "description": "CNAME alias for your status page"
              },
              "subdomain": {
                "type": "string",
                "description": "Subdomain at which to access your status page"
              },
              "url": {
                "type": "string",
                "description": "Website of your page.  Clicking on your statuspage image will link here."
              },
              "branding": {
                "type": "string",
                "description": "The main template your statuspage will use",
                "enum": [
                  "basic",
                  "premium"
                ]
              },
              "css_body_background_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_font_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_light_font_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_greens": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_yellows": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_oranges": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_reds": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_blues": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_border_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_graph_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_link_color": {
                "type": "string",
                "description": "CSS Color"
              },
              "css_no_data": {
                "type": "string",
                "description": "CSS Color"
              },
              "hidden_from_search": {
                "type": "boolean",
                "description": "Should your page hide itself from search engines"
              },
              "viewers_must_be_team_members": {
                "type": "boolean"
              },
              "allow_page_subscribers": {
                "type": "boolean",
                "description": "Can your users subscribe to all notifications on the page"
              },
              "allow_incident_subscribers": {
                "type": "boolean",
                "description": "Can your users subscribe to notifications for a single incident"
              },
              "allow_email_subscribers": {
                "type": "boolean",
                "description": "Can your users choose to receive notifications via email"
              },
              "allow_sms_subscribers": {
                "type": "boolean",
                "description": "Can your users choose to receive notifications via SMS"
              },
              "allow_rss_atom_feeds": {
                "type": "boolean",
                "description": "Can your users choose to access incident feeds via RSS/Atom (not functional on Audience-Specific pages)"
              },
              "allow_webhook_subscribers": {
                "type": "boolean",
                "description": "Can your users choose to receive notifications via Webhooks"
              },
              "notifications_from_email": {
                "type": "string",
                "description": "Allows you to customize the email address your page notifications come from"
              },
              "time_zone": {
                "type": "string",
                "description": "Timezone configured for your page"
              },
              "notifications_email_footer": {
                "type": "string",
                "description": "Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting"
              }
            }
          }
        },
        "description": "Update a page"
      },
      "postPagesPageIdPageAccessUsers": {
        "type": "object",
        "properties": {
          "page_access_user": {
            "type": "object",
            "properties": {
              "external_login": {
                "type": "string",
                "description": "IDP login user id. Key is typically \"uid\"."
              },
              "email": {
                "type": "string"
              },
              "page_access_group_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "subscribe_to_components": {
                "type": "boolean"
              }
            }
          }
        },
        "description": "Add a page access user"
      },
      "PageAccessUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "b1db8j9hxl4q",
            "description": "Page Access User Identifier"
          },
          "page_id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "external_login": {
            "type": "string",
            "description": "IDP login user id. Key is typically \"uid\"."
          },
          "page_access_group_id": {
            "type": "string"
          },
          "page_access_group_ids": {
            "type": "string",
            "example": []
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Delete metric for page access user"
      },
      "patchPagesPageIdPageAccessUsersPageAccessUserIdComponents": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "description": "List of component codes to allow access to",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "component_ids"
        ],
        "description": "Add components for page access user"
      },
      "putPagesPageIdPageAccessUsersPageAccessUserIdComponents": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "description": "List of component codes to allow access to",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "component_ids"
        ],
        "description": "Add components for page access user"
      },
      "postPagesPageIdPageAccessUsersPageAccessUserIdComponents": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "description": "List of component codes to allow access to",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "component_ids"
        ],
        "description": "Replace components for page access user"
      },
      "deletePagesPageIdPageAccessUsersPageAccessUserIdComponents": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "description": "List of components codes to remove.  If omitted, all components will be removed.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Remove components for page access user"
      },
      "Component": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for component"
          },
          "page_id": {
            "type": "string",
            "description": "Page identifier"
          },
          "group_id": {
            "type": "string",
            "description": "Component Group identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "group": {
            "type": "boolean",
            "description": "Is this component a group"
          },
          "name": {
            "type": "string",
            "description": "Display name for component"
          },
          "description": {
            "type": "string",
            "description": "More detailed description for component"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "Order the component will appear on the page"
          },
          "status": {
            "type": "string",
            "enum": [
              "operational",
              "under_maintenance",
              "degraded_performance",
              "partial_outage",
              "major_outage",
              ""
            ],
            "description": "Status of component"
          },
          "showcase": {
            "type": "boolean",
            "description": "Should this component be showcased"
          },
          "only_show_if_degraded": {
            "type": "boolean",
            "description": "Requires a special feature flag to be enabled"
          },
          "automation_email": {
            "type": "string",
            "description": "Requires a special feature flag to be enabled"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "The date this component started being used"
          }
        },
        "description": "Add page access groups to a component"
      },
      "patchPagesPageIdPageAccessUsersPageAccessUserIdMetrics": {
        "type": "object",
        "properties": {
          "metric_ids": {
            "type": "array",
            "description": "List of metrics to add",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "metric_ids"
        ],
        "description": "Add metrics for page access user"
      },
      "putPagesPageIdPageAccessUsersPageAccessUserIdMetrics": {
        "type": "object",
        "properties": {
          "metric_ids": {
            "type": "array",
            "description": "List of metrics to add",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "metric_ids"
        ],
        "description": "Add metrics for page access user"
      },
      "postPagesPageIdPageAccessUsersPageAccessUserIdMetrics": {
        "type": "object",
        "properties": {
          "metric_ids": {
            "type": "array",
            "description": "List of metrics to add",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "metric_ids"
        ],
        "description": "Replace metrics for page access user"
      },
      "deletePagesPageIdPageAccessUsersPageAccessUserIdMetrics": {
        "type": "object",
        "properties": {
          "metric_ids": {
            "type": "array",
            "description": "List of metrics to remove",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Delete metrics for page access user"
      },
      "Metric": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Metric identifier"
          },
          "metrics_provider_id": {
            "type": "string",
            "description": "Metric Provider identifier"
          },
          "metric_identifier": {
            "type": "string",
            "description": "Metric Display identifier used to look up the metric data from the provider"
          },
          "name": {
            "type": "string",
            "description": "Name of metric"
          },
          "display": {
            "type": "boolean",
            "description": "Should the metric be displayed"
          },
          "tooltip_description": {
            "type": "string"
          },
          "backfilled": {
            "type": "boolean"
          },
          "y_axis_min": {
            "type": "number",
            "format": "float"
          },
          "y_axis_max": {
            "type": "number",
            "format": "float"
          },
          "y_axis_hidden": {
            "type": "boolean",
            "description": "Should the values on the y axis be hidden on render"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix to describe the units on the graph"
          },
          "decimal_places": {
            "type": "integer",
            "format": "int32"
          },
          "most_recent_data_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_fetched_at": {
            "type": "string",
            "format": "date-time"
          },
          "backfill_percentage": {
            "type": "integer",
            "format": "int32"
          },
          "reference_name": {
            "type": "string"
          }
        },
        "description": "Create a metric for a metric provider"
      },
      "PageAccessGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "3pty29cwf05t",
            "description": "Page Access Group Identifier"
          },
          "page_id": {
            "type": "string",
            "description": "Page Identifier."
          },
          "name": {
            "type": "string",
            "description": "Name for this Group."
          },
          "page_access_user_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "b65phwwt739j"
            }
          },
          "external_identifier": {
            "type": "string",
            "description": "Associates group with external group."
          },
          "metric_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "vvdsh5vjlmhs"
            }
          },
          "component_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "31654cp6xx20"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Remove a component from a page access group"
      },
      "postPagesPageIdPageAccessGroups": {
        "type": "object",
        "properties": {
          "page_access_group": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name for this Group."
              },
              "external_identifier": {
                "type": "string",
                "description": "Associates group with external group."
              },
              "component_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "metric_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "page_access_user_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Create a page access group"
      },
      "patchPagesPageIdPageAccessGroups": {
        "type": "object",
        "properties": {
          "page_access_group": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name for this Group."
              },
              "external_identifier": {
                "type": "string",
                "description": "Associates group with external group."
              },
              "component_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "metric_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "page_access_user_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Update a page access group"
      },
      "putPagesPageIdPageAccessGroups": {
        "type": "object",
        "properties": {
          "page_access_group": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name for this Group."
              },
              "external_identifier": {
                "type": "string",
                "description": "Associates group with external group."
              },
              "component_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "metric_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "page_access_user_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Update a page access group"
      },
      "patchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "description": "List of Component identifiers",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Add components to page access group"
      },
      "putPagesPageIdPageAccessGroupsPageAccessGroupIdComponents": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "description": "List of Component identifiers",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Add components to page access group"
      },
      "postPagesPageIdPageAccessGroupsPageAccessGroupIdComponents": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "description": "List of components codes to set on the page access group",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "component_ids"
        ],
        "description": "Replace components for a page access group"
      },
      "deletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Delete components for a page access group"
      },
      "postPagesPageIdSubscribersResendConfirmation": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "string",
            "description": "The array of subscriber codes to resend confirmations for, or \"all\" to resend confirmations to all subscribers. Only unconfirmed email subscribers will receive this notification."
          }
        },
        "required": [
          "subscribers"
        ],
        "description": "Resend confirmations to a list of subscribers"
      },
      "postPagesPageIdSubscribersUnsubscribe": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "string",
            "description": "The array of subscriber codes to unsubscribe (limited to 100), or \"all\" to unsubscribe all subscribers if the number of subscribers is less than 100."
          },
          "type": {
            "type": "string",
            "description": "If this is present, only unsubscribe subscribers of this type.",
            "enum": [
              "email",
              "sms",
              "slack",
              "webhook",
              "teams",
              "integration_partner"
            ]
          },
          "state": {
            "type": "string",
            "description": "If this is present, only unsubscribe subscribers in this state. Specify state \"all\" to unsubscribe subscribers in any states.",
            "enum": [
              "active",
              "unconfirmed",
              "quarantined",
              "all"
            ],
            "default": "active"
          },
          "skip_unsubscription_notification": {
            "type": "boolean",
            "description": "If skip_unsubscription_notification is true, the subscribers do not receive any notifications when they are unsubscribed."
          }
        },
        "required": [
          "subscribers"
        ],
        "description": "Unsubscribe a list of subscribers"
      },
      "postPagesPageIdSubscribersReactivate": {
        "type": "object",
        "properties": {
          "subscribers": {
            "type": "string",
            "description": "The array of quarantined subscriber codes to reactivate, or \"all\" to reactivate all quarantined subscribers."
          },
          "type": {
            "type": "string",
            "description": "If this is present, only reactivate subscribers of this type.",
            "enum": [
              "email",
              "sms",
              "slack",
              "webhook",
              "integration_partner"
            ]
          }
        },
        "required": [
          "subscribers"
        ],
        "description": "Reactivate a list of quarantined subscribers"
      },
      "SubscriberCountByTypeAndState": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/SubscriberCountByState"
          },
          "sms": {
            "$ref": "#/components/schemas/SubscriberCountByState"
          },
          "webhook": {
            "$ref": "#/components/schemas/SubscriberCountByState"
          },
          "integration_partner": {
            "$ref": "#/components/schemas/SubscriberCountByState"
          },
          "slack": {
            "$ref": "#/components/schemas/SubscriberCountByState"
          },
          "teams": {
            "$ref": "#/components/schemas/SubscriberCountByState"
          }
        },
        "description": "Get a histogram of subscribers by type and then state"
      },
      "SubscriberCountByState": {
        "type": "object",
        "properties": {
          "active": {
            "type": "integer",
            "format": "int32",
            "description": "The number of active subscribers found by the query."
          },
          "unconfirmed": {
            "type": "integer",
            "format": "int32",
            "description": "The number of unconfirmed subscribers found by the query."
          },
          "quarantined": {
            "type": "integer",
            "format": "int32",
            "description": "The number of quarantined subscribers found by the query."
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of subscribers found by the query."
          }
        }
      },
      "SubscriberCountByType": {
        "type": "object",
        "properties": {
          "email": {
            "type": "integer",
            "format": "int32",
            "description": "The number of Email subscribers found by the query."
          },
          "sms": {
            "type": "integer",
            "format": "int32",
            "description": "The number of Webhook subscribers found by the query."
          },
          "webhook": {
            "type": "integer",
            "format": "int32",
            "description": "The number of SMS subscribers found by the query."
          },
          "integration_partner": {
            "type": "integer",
            "format": "int32",
            "description": "The number of integration partners found by the query."
          },
          "slack": {
            "type": "integer",
            "format": "int32",
            "description": "The number of Slack subscribers found by the query."
          },
          "teams": {
            "type": "integer",
            "format": "int32",
            "description": "The number of MS teams subscribers found by the query."
          }
        },
        "description": "Get a count of subscribers by type"
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "wc9twz578g7k",
            "description": "Subscriber Identifier"
          },
          "skip_confirmation_notification": {
            "type": "boolean",
            "description": "If this is true, do not notify the user with changes to their subscription."
          },
          "mode": {
            "type": "string",
            "example": "email",
            "description": "The communication mode of the subscriber."
          },
          "email": {
            "type": "string",
            "example": "foo@example2.com",
            "description": "The email address to use to contact the subscriber. Used for Email and Webhook subscribers."
          },
          "endpoint": {
            "type": "string",
            "example": "http://example.com/",
            "description": "The URL where a webhook subscriber elects to receive updates."
          },
          "phone_number": {
            "type": "string",
            "example": "202-555-0105",
            "description": "The phone number used to contact an SMS subscriber"
          },
          "phone_country": {
            "type": "string",
            "example": "US",
            "description": "The two-character country code representing the country of which the phone_number is a part."
          },
          "display_phone_number": {
            "type": "string",
            "example": "+1 (202) 555-0105",
            "description": "A formatted version of the phone_number and phone_country pair, nicely formatted for display."
          },
          "obfuscated_channel_name": {
            "type": "string",
            "example": "#*******an",
            "description": "Obfuscated slack channel name"
          },
          "workspace_name": {
            "type": "string",
            "example": "Atlassian",
            "description": "The workspace name of the slack subscriber."
          },
          "quarantined_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the subscriber was quarantined due to an issue reaching them."
          },
          "purge_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when a quarantined subscriber will be purged (unsubscribed)."
          },
          "components": {
            "type": "string",
            "example": [
              "5lwkc0wnnlsb"
            ],
            "description": "The components for which the subscriber has elected to receive updates."
          },
          "page_access_user_id": {
            "type": "string",
            "example": "q90xf4dw1vxt",
            "description": "The Page Access user this subscriber belongs to (only for audience-specific pages)."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Get an incident subscriber"
      },
      "postPagesPageIdSubscribers": {
        "type": "object",
        "properties": {
          "subscriber": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "The email address for creating Email and Webhook subscribers."
              },
              "endpoint": {
                "type": "string",
                "description": "The endpoint URI for creating Webhook subscribers."
              },
              "phone_country": {
                "type": "string",
                "description": "The two-character country where the phone number is located to use for the new SMS subscriber."
              },
              "phone_number": {
                "type": "string",
                "description": "The phone number (as you would dial from the phone_country) to use for the new SMS subscriber."
              },
              "skip_confirmation_notification": {
                "type": "boolean",
                "description": "If skip_confirmation_notification is true, the subscriber does not receive any notifications when their subscription changes.  Email subscribers will be automatically opted in. This option is only available for paid pages. This option has no effect for trial customers."
              },
              "page_access_user": {
                "type": "string",
                "description": "The code of the page access user to which the subscriber belongs."
              },
              "component_ids": {
                "type": "array",
                "description": "A list of component ids for which the subscriber should recieve updates for. Components must be an array with at least one element if it is passed at all. Each component must belong to the page indicated in the path.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Create a subscriber. Not applicable for Slack subscribers."
      },
      "patchPagesPageIdSubscribers": {
        "type": "object",
        "properties": {
          "component_ids": {
            "type": "array",
            "description": "A list of component ids for which the subscriber should recieve updates for. Components must be an array with at least one element if it is passed at all. Each component must belong to the page indicated in the path. To set the subscriber to be subscribed to all components on the page, exclude this parameter.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Update a subscriber"
      },
      "postPagesPageIdIncidentTemplates": {
        "type": "object",
        "properties": {
          "template": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the template, as shown in the list on the \"Templates\" tab of the \"Incidents\" page"
              },
              "title": {
                "type": "string",
                "description": "Title to be applied to the incident or maintenance when selecting this template"
              },
              "body": {
                "type": "string",
                "description": "The initial message, created as the first incident or maintenance update."
              },
              "group_id": {
                "type": "string",
                "description": "Identifier of Template Group this template belongs to"
              },
              "update_status": {
                "type": "string",
                "description": "The status the incident or maintenance should transition to when selecting this template",
                "enum": [
                  "investigating",
                  "identified",
                  "monitoring",
                  "resolved",
                  "scheduled",
                  "in_progress",
                  "verifying",
                  "completed"
                ]
              },
              "should_tweet": {
                "type": "boolean",
                "description": "Whether the \"tweet update\" checkbox should be selected when selecting this template"
              },
              "should_send_notifications": {
                "type": "boolean",
                "description": "Whether the \"deliver notifications\" checkbox should be selected when selecting this template"
              },
              "component_ids": {
                "type": "array",
                "description": "List of component_ids affected by this incident",
                "items": {
                  "type": "string",
                  "default": "s77qq9g31fm3"
                }
              }
            },
            "required": [
              "name",
              "title",
              "body"
            ]
          }
        },
        "description": "Create a template"
      },
      "IncidentTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "y3vcxrg5hbsz",
            "description": "Incident Template Identifier"
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Component"
            },
            "description": "Affected components"
          },
          "name": {
            "type": "string",
            "description": "Name of the template, as shown in the list on the \"Templates\" tab of the \"Incidents\" page"
          },
          "title": {
            "type": "string",
            "description": "Title to be applied to the incident or maintenance when selecting this template"
          },
          "body": {
            "type": "string",
            "description": "Body of the incident or maintenance update to be applied when selecting this template"
          },
          "group_id": {
            "type": "string",
            "example": "y0z7dfwtj1k9",
            "description": "Identifier of Template Group this template belongs to"
          },
          "update_status": {
            "type": "string",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved",
              "scheduled",
              "in_progress",
              "verifying",
              "completed"
            ],
            "description": "The status the incident or maintenance should transition to when selecting this template"
          },
          "should_tweet": {
            "type": "boolean",
            "description": "Whether the \"tweet update\" checkbox should be selected when selecting this template"
          },
          "should_send_notifications": {
            "type": "boolean",
            "description": "Whether the \"deliver notifications\" checkbox should be selected when selecting this template"
          }
        },
        "description": "Get a list of templates"
      },
      "postPagesPageIdIncidents": {
        "type": "object",
        "properties": {
          "incident": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Incident Name. There is a maximum limit of 255 characters."
              },
              "status": {
                "type": "string",
                "description": "The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.",
                "enum": [
                  "investigating",
                  "identified",
                  "monitoring",
                  "resolved",
                  "scheduled",
                  "in_progress",
                  "verifying",
                  "completed"
                ]
              },
              "impact_override": {
                "type": "string",
                "description": "value to override calculated impact value",
                "enum": [
                  "none",
                  "maintenance",
                  "minor",
                  "major",
                  "critical"
                ]
              },
              "scheduled_for": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp the incident is scheduled for.",
                "default": "2013-05-07T03:00:00.007Z"
              },
              "scheduled_until": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp the incident is scheduled until.",
                "default": "2013-05-07T06:00:00.007Z"
              },
              "scheduled_remind_prior": {
                "type": "boolean",
                "description": "Controls whether to remind subscribers prior to scheduled incidents."
              },
              "auto_transition_to_maintenance_state": {
                "type": "boolean",
                "description": "Controls whether change components status to under_maintenance once scheduled maintenance is in progress."
              },
              "auto_transition_to_operational_state": {
                "type": "boolean",
                "description": "Controls whether change components status to operational once scheduled maintenance completes."
              },
              "scheduled_auto_in_progress": {
                "type": "boolean",
                "description": "Controls whether the incident is scheduled to automatically change to in progress."
              },
              "scheduled_auto_completed": {
                "type": "boolean",
                "description": "Controls whether the incident is scheduled to automatically change to complete."
              },
              "auto_transition_deliver_notifications_at_start": {
                "type": "boolean",
                "description": "Controls whether send notification when scheduled maintenances auto transition to started."
              },
              "auto_transition_deliver_notifications_at_end": {
                "type": "boolean",
                "description": "Controls whether send notification when scheduled maintenances auto transition to completed."
              },
              "reminder_intervals": {
                "type": "string",
                "description": "Custom reminder intervals for unresolved/open incidents. Not applicable for <strong>Scheduled maintenance</strong><br>There are 4 possible states for reminder_intervals:<br><strong>DEFAULT:</strong> NULL, representing a default behavior with intervals [3, 6, 12, 24].<br><strong>AFTER:</strong> A serialized array of strictly increasing intervals, each integer ranges from [1-24] (inclusive). Ex \"[1, 5, 7, 10]\"<br><strong>EVERY:</strong> An integer in the range [1-24] as a string, representing equal intervals. Ex \"4\" for [4, 8, 12, 16, 20, 24]<br><strong>OFF:</strong> A serialized empty array, for example, \"[]\", meaning no reminder notifications will be sent."
              },
              "metadata": {
                "type": "object",
                "description": "Attach a json object to the incident. All top-level values in the object must also be objects."
              },
              "deliver_notifications": {
                "type": "boolean",
                "description": "Deliver notifications to subscribers if this is true. If this is false, create an incident without notifying customers.",
                "default": true
              },
              "auto_tweet_at_beginning": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance starts."
              },
              "auto_tweet_on_completion": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance completes."
              },
              "auto_tweet_on_creation": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance is created."
              },
              "auto_tweet_one_hour_before": {
                "type": "boolean",
                "description": "Controls whether tweet automatically one hour before scheduled maintenance starts."
              },
              "backfill_date": {
                "type": "string",
                "description": "TimeStamp when incident was backfilled."
              },
              "backfilled": {
                "type": "boolean",
                "description": "Controls whether incident is backfilled. If true, components cannot be specified."
              },
              "body": {
                "type": "string",
                "description": "The initial message, created as the first incident update. There is a maximum limit of 25000 characters"
              },
              "components": {
                "type": "object",
                "description": "Map of status changes to apply to affected components",
                "properties": {
                  "c5p56yf8sc4z": {
                    "type": "string",
                    "description": "Map of status changes to apply to affected components",
                    "enum": [
                      "operational",
                      "under_maintenance",
                      "degraded_performance",
                      "partial_outage",
                      "major_outage",
                      ""
                    ]
                  }
                }
              },
              "component_ids": {
                "type": "array",
                "description": "List of component_ids affected by this incident",
                "items": {
                  "type": "string",
                  "default": "stlgy820sw1y"
                }
              },
              "scheduled_auto_transition": {
                "type": "boolean",
                "description": "Same as :scheduled_auto_transition_in_progress. Controls whether the incident is scheduled to automatically change to in progress."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "description": "Create an incident"
      },
      "Incident": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "p31zjtct2jer",
            "description": "Incident Identifier"
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Component"
            },
            "description": "Incident components"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the incident was created at."
          },
          "impact": {
            "type": "string",
            "example": "critical",
            "enum": [
              "none",
              "maintenance",
              "minor",
              "major",
              "critical"
            ],
            "description": "The impact of the incident."
          },
          "impact_override": {
            "type": "string",
            "example": "minor",
            "enum": [
              "none",
              "maintenance",
              "minor",
              "major",
              "critical"
            ],
            "description": "value to override calculated impact value"
          },
          "incident_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentUpdate"
            },
            "description": "The incident updates for incident."
          },
          "metadata": {
            "type": "Object",
            "example": {
              "jira": {
                "issue_id": "value"
              }
            },
            "description": "Metadata attached to the incident. Top level values must be objects."
          },
          "monitoring_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when incident entered monitoring state."
          },
          "name": {
            "type": "string",
            "example": "Data Layer Migration",
            "description": "Incident Name. There is a maximum limit of 255 characters."
          },
          "page_id": {
            "type": "string",
            "description": "Incident Page Identifier"
          },
          "postmortem_body": {
            "type": "string",
            "example": "##### Issue\nAt approximately 17:02 UTC on 2013-04-21, our master database server unexpectedly went unresponsive to all network.\nA reboot of the machine at 17:05 UTC resulted in a failed mount of a corrupted EBS volume, and we made the decision\nat that time to fail over the slave database.\n\n##### Resolution\nAt 17:12 UTC, the slave database had been successfully promoted to master and the application recovered enough to\naccept web traffic again. A new slave database node was created and placed into the rotation to guard against future\nmaster failures. The promoted slave database performed slowly for the next couple of hours as the query cache began\nto warm up, and eventually settled into a reasonable performance profile around 20:00 UTC.\n\n##### Future Mitigation Plans\nOver the past few months, we have been working on an overhaul to our data storage layer with a migration from a Postgres\nsetup to a distributed, fault-tolerant, multi-region data layer using Riak. This initiative has been prioritized, and\nthe migration will be performed in the coming weeks. We will notify our clients of the scheduled downtime via an\nincident on this status site, and via a blog post.\n",
            "description": "Body of the Postmortem."
          },
          "postmortem_body_last_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the incident postmortem body was last updated at."
          },
          "postmortem_ignored": {
            "type": "boolean",
            "description": "Controls whether the incident will have postmortem."
          },
          "postmortem_notified_subscribers": {
            "type": "boolean",
            "description": "Indicates whether subscribers are already notificed about postmortem."
          },
          "postmortem_notified_twitter": {
            "type": "boolean",
            "description": "Controls whether to decide if notify postmortem on twitter."
          },
          "postmortem_published_at": {
            "type": "boolean",
            "description": "The timestamp when the postmortem was published."
          },
          "resolved_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when incident was resolved."
          },
          "scheduled_auto_completed": {
            "type": "boolean",
            "description": "Controls whether the incident is scheduled to automatically change to complete."
          },
          "scheduled_auto_in_progress": {
            "type": "boolean",
            "description": "Controls whether the incident is scheduled to automatically change to in progress."
          },
          "scheduled_for": {
            "type": "string",
            "format": "date-time",
            "example": "2013-05-07T03:00:00.007Z",
            "description": "The timestamp the incident is scheduled for."
          },
          "auto_transition_deliver_notifications_at_end": {
            "type": "boolean",
            "description": "Controls whether send notification when scheduled maintenances auto transition to completed."
          },
          "auto_transition_deliver_notifications_at_start": {
            "type": "boolean",
            "description": "Controls whether send notification when scheduled maintenances auto transition to started."
          },
          "auto_transition_to_maintenance_state": {
            "type": "boolean",
            "description": "Controls whether change components status to under_maintenance once scheduled maintenance is in progress."
          },
          "auto_transition_to_operational_state": {
            "type": "boolean",
            "description": "Controls whether change components status to operational once scheduled maintenance completes."
          },
          "scheduled_remind_prior": {
            "type": "boolean",
            "description": "Controls whether to remind subscribers prior to scheduled incidents."
          },
          "scheduled_reminded_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the scheduled incident reminder was sent at."
          },
          "scheduled_until": {
            "type": "string",
            "format": "date-time",
            "example": "2013-05-07T06:00:00.007Z",
            "description": "The timestamp the incident is scheduled until."
          },
          "shortlink": {
            "type": "string",
            "example": "http://stspg.io/803310a12",
            "description": "Incident Shortlink."
          },
          "status": {
            "type": "string",
            "example": "scheduled",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved",
              "scheduled",
              "in_progress",
              "verifying",
              "completed"
            ],
            "description": "The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the incident was updated at."
          },
          "reminder_intervals": {
            "type": "string",
            "example": "[3, 6, 12, 24]",
            "description": "Custom reminder intervals for unresolved/open incidents. Not applicable for <strong>Scheduled maintenance</strong><br>There are 4 possible states for reminder_intervals:<br><strong>DEFAULT:</strong> NULL, representing a default behavior with intervals [3, 6, 12, 24].<br><strong>AFTER:</strong> A serialized array of strictly increasing intervals, each integer ranges from [1-24] (inclusive). Ex \"[1, 5, 7, 10]\"<br><strong>EVERY:</strong> An integer in the range [1-24] as a string, representing equal intervals. Ex \"4\" for [4, 8, 12, 16, 20, 24]<br><strong>OFF:</strong> A serialized empty array, for example, \"[]\", meaning no reminder notifications will be sent."
          }
        },
        "description": "Get an incident"
      },
      "IncidentUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Incident Update Identifier."
          },
          "incident_id": {
            "type": "string",
            "description": "Incident Identifier."
          },
          "affected_components": {
            "type": "array",
            "items": {
              "type": "object",
              "example": {
                "code": "string",
                "name": "string",
                "old_status": "operational",
                "new_status": "operational"
              }
            },
            "description": "Affected components associated with the incident update."
          },
          "body": {
            "type": "string",
            "description": "Incident update body."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the incident update was created at."
          },
          "custom_tweet": {
            "type": "string",
            "description": "An optional customized tweet message for incident postmortem."
          },
          "deliver_notifications": {
            "type": "boolean",
            "description": "Controls whether to delivery notifications."
          },
          "display_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when incident update is happened."
          },
          "status": {
            "type": "string",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved",
              "scheduled",
              "in_progress",
              "verifying",
              "completed"
            ],
            "description": "The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed."
          },
          "tweet_id": {
            "type": "string",
            "description": "Tweet identifier associated to this incident update."
          },
          "twitter_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when twitter updated at."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the incident update is updated."
          },
          "wants_twitter_update": {
            "type": "boolean",
            "description": "Controls whether to create twitter update."
          }
        },
        "description": "Update a previous incident update"
      },
      "patchPagesPageIdIncidents": {
        "type": "object",
        "properties": {
          "incident": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Incident Name. There is a maximum limit of 255 characters."
              },
              "status": {
                "type": "string",
                "description": "The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.",
                "enum": [
                  "investigating",
                  "identified",
                  "monitoring",
                  "resolved",
                  "scheduled",
                  "in_progress",
                  "verifying",
                  "completed"
                ]
              },
              "impact_override": {
                "type": "string",
                "description": "value to override calculated impact value",
                "enum": [
                  "none",
                  "maintenance",
                  "minor",
                  "major",
                  "critical"
                ]
              },
              "scheduled_for": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp the incident is scheduled for."
              },
              "scheduled_until": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp the incident is scheduled until."
              },
              "scheduled_remind_prior": {
                "type": "boolean",
                "description": "Controls whether to remind subscribers prior to scheduled incidents."
              },
              "auto_transition_to_maintenance_state": {
                "type": "boolean",
                "description": "Controls whether change components status to under_maintenance once scheduled maintenance is in progress."
              },
              "auto_transition_to_operational_state": {
                "type": "boolean",
                "description": "Controls whether change components status to operational once scheduled maintenance completes."
              },
              "scheduled_auto_in_progress": {
                "type": "boolean",
                "description": "Controls whether the incident is scheduled to automatically change to in progress."
              },
              "scheduled_auto_completed": {
                "type": "boolean",
                "description": "Controls whether the incident is scheduled to automatically change to complete."
              },
              "auto_transition_deliver_notifications_at_start": {
                "type": "boolean",
                "description": "Controls whether send notification when scheduled maintenances auto transition to started."
              },
              "auto_transition_deliver_notifications_at_end": {
                "type": "boolean",
                "description": "Controls whether send notification when scheduled maintenances auto transition to completed."
              },
              "reminder_intervals": {
                "type": "string",
                "description": "Custom reminder intervals for unresolved/open incidents. Not applicable for <strong>Scheduled maintenance</strong><br>There are 4 possible states for reminder_intervals:<br><strong>DEFAULT:</strong> NULL, representing a default behavior with intervals [3, 6, 12, 24].<br><strong>AFTER:</strong> A serialized array of strictly increasing intervals, each integer ranges from [1-24] (inclusive). Ex \"[1, 5, 7, 10]\"<br><strong>EVERY:</strong> An integer in the range [1-24] as a string, representing equal intervals. Ex \"4\" for [4, 8, 12, 16, 20, 24]<br><strong>OFF:</strong> A serialized empty array, for example, \"[]\", meaning no reminder notifications will be sent."
              },
              "metadata": {
                "type": "object",
                "description": "Attach a json object to the incident. All top-level values in the object must also be objects."
              },
              "deliver_notifications": {
                "type": "boolean",
                "description": "Deliver notifications to subscribers if this is true. If this is false, create an incident without notifying customers.",
                "default": true
              },
              "auto_tweet_at_beginning": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance starts."
              },
              "auto_tweet_on_completion": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance completes."
              },
              "auto_tweet_on_creation": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance is created."
              },
              "auto_tweet_one_hour_before": {
                "type": "boolean",
                "description": "Controls whether tweet automatically one hour before scheduled maintenance starts."
              },
              "backfill_date": {
                "type": "string",
                "description": "TimeStamp when incident was backfilled."
              },
              "backfilled": {
                "type": "boolean",
                "description": "Controls whether incident is backfilled. If true, components cannot be specified."
              },
              "body": {
                "type": "string",
                "description": "The initial message, created as the first incident update. There is a maximum limit of 25000 characters"
              },
              "components": {
                "type": "object",
                "description": "Map of status changes to apply to affected components",
                "properties": {
                  "626gx2d77dvb": {
                    "type": "string",
                    "description": "Map of status changes to apply to affected components",
                    "enum": [
                      "operational",
                      "under_maintenance",
                      "degraded_performance",
                      "partial_outage",
                      "major_outage",
                      ""
                    ]
                  }
                }
              },
              "component_ids": {
                "type": "array",
                "description": "List of component_ids affected by this incident",
                "items": {
                  "type": "string",
                  "default": "gtjq8tpc3xpd"
                }
              },
              "scheduled_auto_transition": {
                "type": "boolean",
                "description": "Same as :scheduled_auto_transition_in_progress. Controls whether the incident is scheduled to automatically change to in progress."
              }
            }
          }
        },
        "description": "Update an incident"
      },
      "putPagesPageIdIncidents": {
        "type": "object",
        "properties": {
          "incident": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Incident Name. There is a maximum limit of 255 characters."
              },
              "status": {
                "type": "string",
                "description": "The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.",
                "enum": [
                  "investigating",
                  "identified",
                  "monitoring",
                  "resolved",
                  "scheduled",
                  "in_progress",
                  "verifying",
                  "completed"
                ]
              },
              "impact_override": {
                "type": "string",
                "description": "value to override calculated impact value",
                "enum": [
                  "none",
                  "maintenance",
                  "minor",
                  "major",
                  "critical"
                ]
              },
              "scheduled_for": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp the incident is scheduled for."
              },
              "scheduled_until": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp the incident is scheduled until."
              },
              "scheduled_remind_prior": {
                "type": "boolean",
                "description": "Controls whether to remind subscribers prior to scheduled incidents."
              },
              "auto_transition_to_maintenance_state": {
                "type": "boolean",
                "description": "Controls whether change components status to under_maintenance once scheduled maintenance is in progress."
              },
              "auto_transition_to_operational_state": {
                "type": "boolean",
                "description": "Controls whether change components status to operational once scheduled maintenance completes."
              },
              "scheduled_auto_in_progress": {
                "type": "boolean",
                "description": "Controls whether the incident is scheduled to automatically change to in progress."
              },
              "scheduled_auto_completed": {
                "type": "boolean",
                "description": "Controls whether the incident is scheduled to automatically change to complete."
              },
              "auto_transition_deliver_notifications_at_start": {
                "type": "boolean",
                "description": "Controls whether send notification when scheduled maintenances auto transition to started."
              },
              "auto_transition_deliver_notifications_at_end": {
                "type": "boolean",
                "description": "Controls whether send notification when scheduled maintenances auto transition to completed."
              },
              "reminder_intervals": {
                "type": "string",
                "description": "Custom reminder intervals for unresolved/open incidents. Not applicable for <strong>Scheduled maintenance</strong><br>There are 4 possible states for reminder_intervals:<br><strong>DEFAULT:</strong> NULL, representing a default behavior with intervals [3, 6, 12, 24].<br><strong>AFTER:</strong> A serialized array of strictly increasing intervals, each integer ranges from [1-24] (inclusive). Ex \"[1, 5, 7, 10]\"<br><strong>EVERY:</strong> An integer in the range [1-24] as a string, representing equal intervals. Ex \"4\" for [4, 8, 12, 16, 20, 24]<br><strong>OFF:</strong> A serialized empty array, for example, \"[]\", meaning no reminder notifications will be sent."
              },
              "metadata": {
                "type": "object",
                "description": "Attach a json object to the incident. All top-level values in the object must also be objects."
              },
              "deliver_notifications": {
                "type": "boolean",
                "description": "Deliver notifications to subscribers if this is true. If this is false, create an incident without notifying customers.",
                "default": true
              },
              "auto_tweet_at_beginning": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance starts."
              },
              "auto_tweet_on_completion": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance completes."
              },
              "auto_tweet_on_creation": {
                "type": "boolean",
                "description": "Controls whether tweet automatically when scheduled maintenance is created."
              },
              "auto_tweet_one_hour_before": {
                "type": "boolean",
                "description": "Controls whether tweet automatically one hour before scheduled maintenance starts."
              },
              "backfill_date": {
                "type": "string",
                "description": "TimeStamp when incident was backfilled."
              },
              "backfilled": {
                "type": "boolean",
                "description": "Controls whether incident is backfilled. If true, components cannot be specified."
              },
              "body": {
                "type": "string",
                "description": "The initial message, created as the first incident update. There is a maximum limit of 25000 characters"
              },
              "components": {
                "type": "object",
                "description": "Map of status changes to apply to affected components",
                "properties": {
                  "626gx2d77dvb": {
                    "type": "string",
                    "description": "Map of status changes to apply to affected components",
                    "enum": [
                      "operational",
                      "under_maintenance",
                      "degraded_performance",
                      "partial_outage",
                      "major_outage",
                      ""
                    ]
                  }
                }
              },
              "component_ids": {
                "type": "array",
                "description": "List of component_ids affected by this incident",
                "items": {
                  "type": "string",
                  "default": "gtjq8tpc3xpd"
                }
              },
              "scheduled_auto_transition": {
                "type": "boolean",
                "description": "Same as :scheduled_auto_transition_in_progress. Controls whether the incident is scheduled to automatically change to in progress."
              }
            }
          }
        },
        "description": "Update an incident"
      },
      "patchPagesPageIdIncidentsIncidentIdIncidentUpdates": {
        "type": "object",
        "properties": {
          "incident_update": {
            "type": "object",
            "properties": {
              "wants_twitter_update": {
                "type": "boolean",
                "description": "Controls whether to create twitter update."
              },
              "body": {
                "type": "string",
                "description": "Incident update body."
              },
              "display_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when incident update is happened."
              },
              "deliver_notifications": {
                "type": "boolean",
                "description": "Controls whether to delivery notifications."
              }
            }
          }
        },
        "description": "Update a previous incident update"
      },
      "putPagesPageIdIncidentsIncidentIdIncidentUpdates": {
        "type": "object",
        "properties": {
          "incident_update": {
            "type": "object",
            "properties": {
              "wants_twitter_update": {
                "type": "boolean",
                "description": "Controls whether to create twitter update."
              },
              "body": {
                "type": "string",
                "description": "Incident update body."
              },
              "display_at": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when incident update is happened."
              },
              "deliver_notifications": {
                "type": "boolean",
                "description": "Controls whether to delivery notifications."
              }
            }
          }
        },
        "description": "Update a previous incident update"
      },
      "postPagesPageIdIncidentsIncidentIdSubscribers": {
        "type": "object",
        "properties": {
          "subscriber": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "The email address for creating Email subscribers."
              },
              "phone_country": {
                "type": "string",
                "description": "The two-character country where the phone number is located to use for the new SMS subscriber."
              },
              "phone_number": {
                "type": "string",
                "description": "The phone number (as you would dial from the phone_country) to use for the new SMS subscriber."
              },
              "skip_confirmation_notification": {
                "type": "boolean",
                "description": "If skip_confirmation_notification is true, the subscriber does not receive any notifications when their subscription changes. Email subscribers will be automatically opted in. This option is only available for paid pages. This option has no effect for trial customers."
              }
            }
          }
        },
        "description": "Create an incident subscriber"
      },
      "Postmortem": {
        "type": "object",
        "properties": {
          "preview_key": {
            "type": "string",
            "description": "Preview Key"
          },
          "body": {
            "type": "string",
            "description": "Postmortem body"
          },
          "body_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "body_draft": {
            "type": "string",
            "description": "Body draft"
          },
          "body_draft_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "notify_subscribers": {
            "type": "boolean",
            "description": "Should email subscribers be notified."
          },
          "notify_twitter": {
            "type": "boolean",
            "description": "Should Twitter followers be notified."
          },
          "custom_tweet": {
            "type": "string",
            "description": "Custom tweet for Incident Postmortem"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Revert Postmortem"
      },
      "putPagesPageIdIncidentsIncidentIdPostmortem": {
        "type": "object",
        "properties": {
          "postmortem": {
            "type": "object",
            "properties": {
              "body_draft": {
                "type": "string",
                "description": "Body of Postmortem to create."
              }
            },
            "required": [
              "body_draft"
            ]
          }
        },
        "description": "Create Postmortem"
      },
      "putPagesPageIdIncidentsIncidentIdPostmortemPublish": {
        "type": "object",
        "properties": {
          "postmortem": {
            "type": "object",
            "properties": {
              "notify_twitter": {
                "type": "boolean",
                "description": "Whether to notify Twitter followers"
              },
              "notify_subscribers": {
                "type": "boolean",
                "description": "Whether to notify e-mail subscribers"
              },
              "custom_tweet": {
                "type": "string",
                "description": "Custom postmortem tweet to publish"
              }
            }
          }
        },
        "description": "Publish Postmortem"
      },
      "postPagesPageIdComponents": {
        "type": "object",
        "properties": {
          "component": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "More detailed description for component"
              },
              "status": {
                "type": "string",
                "description": "Status of component",
                "enum": [
                  "operational",
                  "under_maintenance",
                  "degraded_performance",
                  "partial_outage",
                  "major_outage",
                  ""
                ]
              },
              "name": {
                "type": "string",
                "description": "Display name for component"
              },
              "only_show_if_degraded": {
                "type": "boolean",
                "description": "Requires a special feature flag to be enabled"
              },
              "group_id": {
                "type": "string",
                "description": "Component Group identifier"
              },
              "showcase": {
                "type": "boolean",
                "description": "Should this component be showcased"
              },
              "start_date": {
                "type": "string",
                "format": "date",
                "description": "The date this component started being used"
              }
            }
          }
        },
        "description": "Create a component"
      },
      "patchPagesPageIdComponents": {
        "type": "object",
        "properties": {
          "component": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "More detailed description for component"
              },
              "status": {
                "type": "string",
                "description": "Status of component",
                "enum": [
                  "operational",
                  "under_maintenance",
                  "degraded_performance",
                  "partial_outage",
                  "major_outage",
                  ""
                ]
              },
              "name": {
                "type": "string",
                "description": "Display name for component"
              },
              "only_show_if_degraded": {
                "type": "boolean",
                "description": "Requires a special feature flag to be enabled"
              },
              "group_id": {
                "type": "string",
                "description": "Component Group identifier"
              },
              "showcase": {
                "type": "boolean",
                "description": "Should this component be showcased"
              },
              "start_date": {
                "type": "string",
                "format": "date",
                "description": "The date this component started being used"
              }
            }
          }
        },
        "description": "Update a component"
      },
      "putPagesPageIdComponents": {
        "type": "object",
        "properties": {
          "component": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "More detailed description for component"
              },
              "status": {
                "type": "string",
                "description": "Status of component",
                "enum": [
                  "operational",
                  "under_maintenance",
                  "degraded_performance",
                  "partial_outage",
                  "major_outage",
                  ""
                ]
              },
              "name": {
                "type": "string",
                "description": "Display name for component"
              },
              "only_show_if_degraded": {
                "type": "boolean",
                "description": "Requires a special feature flag to be enabled"
              },
              "group_id": {
                "type": "string",
                "description": "Component Group identifier"
              },
              "showcase": {
                "type": "boolean",
                "description": "Should this component be showcased"
              },
              "start_date": {
                "type": "string",
                "format": "date",
                "description": "The date this component started being used"
              }
            }
          }
        },
        "description": "Update a component"
      },
      "ComponentUptime": {
        "type": "object",
        "properties": {
          "range_start": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-15",
            "description": "Start date used for uptime calculation (see the warnings field in the response if this value does not match the start parameter you provided)."
          },
          "range_end": {
            "type": "string",
            "format": "date-time",
            "example": "2020-02-15",
            "description": "End date used for uptime calculation (see the warnings field in the response if this value does not match the end parameter you provided)."
          },
          "uptime_percentage": {
            "type": "number",
            "format": "float",
            "example": 96.67,
            "description": "Uptime percentage for a component"
          },
          "major_outage": {
            "type": "integer",
            "format": "int32",
            "example": 86400,
            "description": "Seconds of major outage"
          },
          "partial_outage": {
            "type": "integer",
            "format": "int32",
            "example": 0,
            "description": "Seconds of partial outage"
          },
          "warnings": {
            "type": "string",
            "example": [
              "End date was adjusted to today. See range_end field in response for end date used."
            ],
            "description": "Warning messages related to the uptime query that may occur"
          },
          "id": {
            "type": "string",
            "description": "Component identifier"
          },
          "name": {
            "type": "string",
            "description": "Component display name"
          },
          "related_events": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Incident identifier"
              }
            },
            "description": "Related incidents"
          }
        },
        "description": "Get uptime data for a component that has uptime showcase enabled"
      },
      "postPagesPageIdComponentGroups": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the component group."
          },
          "component_group": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "components",
              "name"
            ]
          }
        },
        "description": "Create a component group"
      },
      "GroupComponent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "y9mf95z9l5lx",
            "description": "Component Group Identifier"
          },
          "page_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "API Components"
          },
          "description": {
            "type": "string"
          },
          "components": {
            "type": "string",
            "example": [
              "abc123",
              "abc124"
            ]
          },
          "position": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Get a component group"
      },
      "patchPagesPageIdComponentGroups": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Updated description of the component group."
          },
          "component_group": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "components",
              "name"
            ]
          }
        },
        "description": "Update a component group"
      },
      "putPagesPageIdComponentGroups": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Updated description of the component group."
          },
          "component_group": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "components",
              "name"
            ]
          }
        },
        "description": "Update a component group"
      },
      "ComponentGroupUptime": {
        "type": "object",
        "properties": {
          "range_start": {
            "type": "string",
            "format": "date-time",
            "example": "2020-01-15",
            "description": "Start date used for uptime calculation (see the warnings field in the response if this value does not match the start parameter you provided)."
          },
          "range_end": {
            "type": "string",
            "format": "date-time",
            "example": "2020-02-15",
            "description": "End date used for uptime calculation (see the warnings field in the response if this value does not match the end parameter you provided)."
          },
          "uptime_percentage": {
            "type": "number",
            "format": "float",
            "example": 96.67,
            "description": "Uptime percentage for a component"
          },
          "major_outage": {
            "type": "integer",
            "format": "int32",
            "example": 86400,
            "description": "Seconds of major outage"
          },
          "partial_outage": {
            "type": "integer",
            "format": "int32",
            "example": 0,
            "description": "Seconds of partial outage"
          },
          "warnings": {
            "type": "string",
            "example": [
              "End date was adjusted to today. See range_end field in response for end date used."
            ],
            "description": "Warning messages related to the uptime query that may occur"
          },
          "id": {
            "type": "string",
            "description": "Component group identifier"
          },
          "name": {
            "type": "string",
            "description": "Component group display name"
          },
          "related_events": {
            "type": "object",
            "properties": {
              "component_id": {
                "type": "string",
                "description": "Component identifier"
              },
              "incidents": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Incident identifier"
                  }
                },
                "description": "Related incidents"
              }
            },
            "description": "Related incidents by component"
          }
        },
        "description": "Get uptime data for a component group that has uptime showcase enabled for at least one component."
      },
      "MetricAddResponse": {
        "type": "object",
        "properties": {
          "metric_id": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "integer",
                  "format": "int32"
                },
                "value": {
                  "type": "number",
                  "format": "float"
                }
              }
            },
            "description": "Metric identifier to add data to"
          }
        },
        "description": "Add data points to metrics"
      },
      "postPagesPageIdMetricsData": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MetricAddResponse"
          }
        },
        "required": [
          "data"
        ],
        "description": "Add data points to metrics"
      },
      "patchPagesPageIdMetrics": {
        "type": "object",
        "properties": {
          "metric": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of metric"
              },
              "metric_identifier": {
                "type": "string",
                "description": "Metric Display identifier used to look up the metric data from the provider"
              }
            }
          }
        },
        "description": "Update a metric"
      },
      "putPagesPageIdMetrics": {
        "type": "object",
        "properties": {
          "metric": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of metric"
              },
              "metric_identifier": {
                "type": "string",
                "description": "Metric Display identifier used to look up the metric data from the provider"
              }
            }
          }
        },
        "description": "Update a metric"
      },
      "postPagesPageIdMetricsMetricIdData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "integer",
                "format": "int32",
                "description": "Time to store the metric against"
              },
              "value": {
                "type": "number",
                "format": "float"
              }
            }
          }
        },
        "required": [
          "data"
        ],
        "description": "Add data to a metric"
      },
      "SingleMetricAddResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "integer",
                "format": "int32"
              },
              "value": {
                "type": "number",
                "format": "float"
              }
            }
          }
        },
        "description": "Add data to a metric"
      },
      "MetricsProvider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for Metrics Provider"
          },
          "type": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "metric_base_uri": {
            "type": "string"
          },
          "last_revalidated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "page_id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Delete a metric provider"
      },
      "postPagesPageIdMetricsProviders": {
        "type": "object",
        "properties": {
          "metrics_provider": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "Required by the Librato metrics provider."
              },
              "password": {
                "type": "string"
              },
              "api_key": {
                "type": "string",
                "description": "Required by the Datadog and NewRelic type metrics providers."
              },
              "api_token": {
                "type": "string",
                "description": "Required by the Librato, Datadog and Pingdom type metrics providers."
              },
              "application_key": {
                "type": "string",
                "description": "Required by the Pingdom-type metrics provider."
              },
              "type": {
                "type": "string",
                "description": "One of \"Pingdom\", \"NewRelic\", \"Librato\", \"Datadog\", or \"Self\""
              },
              "metric_base_uri": {
                "type": "string",
                "description": "Required by the Datadog and NewRelic type metrics providers."
              }
            }
          }
        },
        "description": "Create a metric provider"
      },
      "patchPagesPageIdMetricsProviders": {
        "type": "object",
        "properties": {
          "metrics_provider": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "metric_base_uri": {
                "type": "string"
              }
            }
          }
        },
        "description": "Update a metric provider"
      },
      "putPagesPageIdMetricsProviders": {
        "type": "object",
        "properties": {
          "metrics_provider": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "metric_base_uri": {
                "type": "string"
              }
            }
          }
        },
        "description": "Update a metric provider"
      },
      "postPagesPageIdMetricsProvidersMetricsProviderIdMetrics": {
        "type": "object",
        "properties": {
          "metric": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of metric"
              },
              "metric_identifier": {
                "type": "string",
                "description": "The identifier used to look up the metric data from the provider"
              },
              "transform": {
                "type": "string",
                "description": "The transform to apply to metric before pulling into Statuspage. One of: \"average\", \"count\", \"max\", \"min\", or \"sum\""
              },
              "application_id": {
                "type": "string",
                "description": "The Identifier for new relic application. Required in the case of NewRelic only"
              },
              "suffix": {
                "type": "string",
                "description": "Suffix to describe the units on the graph"
              },
              "y_axis_min": {
                "type": "integer",
                "format": "int32",
                "description": "The lower bound of the y axis"
              },
              "y_axis_max": {
                "type": "integer",
                "format": "int32",
                "description": "The upper bound of the y axis"
              },
              "y_axis_hidden": {
                "type": "boolean",
                "description": "Should the values on the y axis be hidden on render"
              },
              "display": {
                "type": "boolean",
                "description": "Should the metric be displayed"
              },
              "decimal_places": {
                "type": "integer",
                "format": "int32",
                "description": "How many decimal places to render on the graph"
              },
              "tooltip_description": {
                "type": "string"
              }
            }
          }
        },
        "description": "Create a metric for a metric provider"
      },
      "StatusEmbedConfig": {
        "type": "object",
        "properties": {
          "page_id": {
            "type": "string",
            "description": "Page identifier"
          },
          "position": {
            "type": "string",
            "description": "Corner where status embed iframe will appear on page"
          },
          "incident_background_color": {
            "type": "string",
            "description": "Color of status embed iframe background when displaying incident"
          },
          "incident_text_color": {
            "type": "string",
            "description": "Color of status embed iframe text when displaying incident"
          },
          "maintenance_background_color": {
            "type": "string",
            "description": "Color of status embed iframe background when displaying maintenance"
          },
          "maintenance_text_color": {
            "type": "string",
            "description": "Color of status embed iframe text when displaying maintenance"
          }
        },
        "description": "Update status embed config settings"
      },
      "patchPagesPageIdStatusEmbedConfig": {
        "type": "object",
        "properties": {
          "status_embed_config": {
            "type": "object",
            "properties": {
              "position": {
                "type": "string",
                "description": "Corner where status embed iframe will appear on page"
              },
              "incident_background_color": {
                "type": "string",
                "description": "Color of status embed iframe background when displaying incident"
              },
              "incident_text_color": {
                "type": "string",
                "description": "Color of status embed iframe text when displaying incident"
              },
              "maintenance_background_color": {
                "type": "string",
                "description": "Color of status embed iframe background when displaying maintenance"
              },
              "maintenance_text_color": {
                "type": "string",
                "description": "Color of status embed iframe text when displaying maintenance"
              }
            }
          }
        },
        "description": "Update status embed config settings"
      },
      "putPagesPageIdStatusEmbedConfig": {
        "type": "object",
        "properties": {
          "status_embed_config": {
            "type": "object",
            "properties": {
              "position": {
                "type": "string",
                "description": "Corner where status embed iframe will appear on page"
              },
              "incident_background_color": {
                "type": "string",
                "description": "Color of status embed iframe background when displaying incident"
              },
              "incident_text_color": {
                "type": "string",
                "description": "Color of status embed iframe text when displaying incident"
              },
              "maintenance_background_color": {
                "type": "string",
                "description": "Color of status embed iframe background when displaying maintenance"
              },
              "maintenance_text_color": {
                "type": "string",
                "description": "Color of status embed iframe text when displaying maintenance"
              }
            }
          }
        },
        "description": "Update status embed config settings"
      },
      "putOrganizationsOrganizationIdPermissions": {
        "type": "object",
        "properties": {
          "pages": {
            "type": "object",
            "properties": {
              "page_id": {
                "type": "object",
                "properties": {
                  "page_configuration": {
                    "type": "boolean",
                    "description": "Whether or not user should have page configuration role. This field will only be present for pages with Role Based Access Control."
                  },
                  "incident_manager": {
                    "type": "boolean",
                    "description": "Whether or not user should have incident manager role. This field will only be present for pages with Role Based Access Control."
                  },
                  "maintenance_manager": {
                    "type": "boolean",
                    "description": "Whether or not user should have maintenance manager role. This field will only be present for pages with Role Based Access Control."
                  }
                }
              }
            }
          }
        },
        "description": "Update a user's role permissions. Payload should contain a mapping of pages to a set of the desired roles,\n                  if the page has Role Based Access Control. Otherwise, the pages should map to an empty hash.\n                  User will lose access to any pages omitted from the payload."
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "description": "User identifier"
              },
              "pages": {
                "type": "object",
                "properties": {
                  "page_id": {
                    "type": "string",
                    "description": "Page identifier"
                  },
                  "page_configuration": {
                    "type": "boolean",
                    "description": "User has page configuration role. This field will only be present if the organization has Role Based Access Control."
                  },
                  "incident_manager": {
                    "type": "boolean",
                    "description": "User has incident manager role. This field will only be present if the organization has Role Based Access Control."
                  },
                  "maintenance_manager": {
                    "type": "boolean",
                    "description": "User has maintenance manager role. This field will only be present if the organization has Role Based Access Control."
                  }
                },
                "description": "Pages accessible by the user."
              }
            }
          }
        },
        "description": "Get a user's permissions"
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User identifier"
          },
          "organization_id": {
            "type": "string",
            "description": "Organization identifier"
          },
          "email": {
            "type": "string",
            "description": "Email address for the team member"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Get a list of users"
      },
      "postOrganizationsOrganizationIdUsers": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "Email address for the team member"
              },
              "password": {
                "type": "string",
                "description": "Password the team member uses to access the site"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "user"
        ],
        "description": "Create a user"
      }
    }
  }
}