{
  "openapi": "3.0.3",
  "info": {
    "title": "20i.com Reseller API",
    "version": "1.0.0",
    "description": "The 20i Reseller API gives you access to all the features and functionality of StackCP, allowing you to create a hosting control panel from scratch or integrate external services such as WHMCS. This is for advanced users and the support we provide for the Reseller API is service-based only.\n\nWhere a URL needs an ID, this is typically an ID that you would get in the list method, but for some types alternative references may be supported:\n\ndomain: The domain name\npackage: A domain name on the package\nreseller: * to indicate yourself\nIn general you should use the allocated ID instead as that will be more reliable for cases like moving names between packages.\n\nPOSTs to approporiate endpoints can be either plain form (application/x-www-form-urlencoded or multipart/form-data) encoded as with PHP's http_build_query() or a JSON object (application/json).\n\nFor example, to add a new web site, a form-style request could look like this:\n\n```\n    POST /reseller/*/addWeb HTTP/1.1\n    Host: api.20i.com\n    Authorization: Bearer ZTRkNGZkMzFhNTJkY2FlMwo=\n    Content-Type: application/x-www-form-urlencoded\n\n    type=1234&domain_name=example.org&extra_domain_names[]=example.net&documentRoots[example.org]=public_html\n```\n\nOr in JSON:\n\n```\n    POST /reseller/*/addWeb HTTP/1.1\n    Host: api.20i.com\n    Authorization: Bearer ZTRkNGZkMzFhNTJkY2FlMwo=\n    Content-Type: application/json\n\n    {\n      \"type\": \"1234\",\n      \"domain_name\": \"example.org\",\n      \"extra_domain_names\": [\"example.net\"],\n      \"documentRoots\": {\n        \"example.org\": \"public_html\"\n      }\n    }\n```\n\nExample Script: This PHP script is an example of how to just get code working and using the 20i Reseller API, download the [20i Module](https://my.20i.com/composer/api-modules-1.0.6.zip) and unzip the archive. Then create a test.php file with the following.  When you run this code your should see all your package types dumped to the output window.\n\n```\n    <?php\n\n    include('lib/TwentyI/API/REST.php');\n    include('lib/TwentyI/API/Services.php');\n\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $packageTypes = $services_api->getWithFields(\"/reseller/*/packageTypes\");\n    trigger_error( print_r($packageTypes,true) );\n```"
  },
  "servers": [
    {
      "url": "https://api.20i.com/"
    }
  ],
  "paths": {
    "/domain-period": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List domain periods",
        "operationId": "List domain periods",
        "description": "List all possible domains that are supported with the periods\nthat are supported for registration..\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/domain-period\");\n```",
        "tags": [
          "Domain Names"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/domainPremiumType": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Premium TLD Lookup",
        "operationId": "Premium TLD Lookup",
        "description": "List all domain extentions with their associated premium group.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/domainPremiumType\");\n```",
        "tags": [
          "Domain Names"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/domain-search/{prefix_or_name}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Domain Search Lookup",
        "operationId": "Domain Search Lookup",
        "description": "Searches for one or more domain names. If you provide a domain name,\nthis will search for that name only, otherwise it will search for that\nprefix on all supported TLDs. You may supply multiple literal domain\nnames if you separate them with commas.\nYou may supply arbitrary text, which will be stripped down to something\nsuitable for domain search. This is typically useful with suggestions\non.\nUnder some circumstances this will attempt a detailed search, which will\nfetch more specific information about transferrable domains. This will\nhappen if you search for one domain name.\nDomain Suggestions\nOur primary domain availability provider supports suggesting names based\non the search, using simple semantic permutations of the supplied\nname(s). For example if you're searching for mailboxdelivery.com it might\nsuggest post-delivery.com, mailboxsend.net and my-mailbox-delivery.com.\nThese are supported only in a small set of TLDs (including .com, .net,\n.org, .info). These names are probably available, and will get properly\nchecked at the end of the results, meaning that you will get two results:\none marked \"suggestion\" and a later one which looks like a direct domain\nsearch result.\nAt the current time, setting the TLDs to search is not supported. If a\ndomain is returned which you aren't set up to sell, you should exclude it\nfrom your view.\nNote on responsiveness and order\nAll results will be output at the earliest possible opportunity, and\nwill be delivered in separate packets with each result hash on a line on\nits own. This means that the order will usually be different to the\nheader order, and the output will look a little different to typical\nJSON responses.\nUsage limits\nAccess to this service is subject to reasonable usage limits. If you go\nover the limit, further access will be blocked for up to 24 hours.\n\n------------------\n\n--------------------------------\n\n------------\n\n------------------\n\n--------------------------------\n\n------------\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/domain-search/{prefix_or_name}\");\n```",
        "tags": [
          "Domain Names"
        ],
        "parameters": [
          {
            "name": "prefix_or_name",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/domainVerification": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Domain Verification Status",
        "operationId": "Retrieve Domain Verification Status",
        "description": "Returns a list of all domains with their verification status.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/domainVerification\");\n```",
        "tags": [
          "Domain Names"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/domain": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve List of Domain Names",
        "operationId": "Retrieve List of Domain Names",
        "description": "Returns basic information about the domain\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/domain\");\n```",
        "tags": [
          "Domain Names"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/managed_vps/{managedVpsId}/userStatus": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Activate or deactivate",
        "operationId": "Activate or deactivate",
        "description": "Activates or deactivates the service.\nPossible subservice_name are 'default' for a typical set of services\nand 'main' for the core service only.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/managed_vps/{managedVpsId}/userStatus\", [\n            \"includeRepeated\" => true,\n            \"subservices\" => [\n                \"(subservice_name)\" => true\n            ]\n    ]);\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "includeRepeated",
                  "subservices"
                ],
                "properties": {
                  "includeRepeated": {
                    "type": "boolean",
                    "description": "When reactivating, if true,this will revoke all your deactivations rather than\n\njust the current one."
                  },
                  "subservices": {
                    "type": "object",
                    "required": [
                      "subservice_name"
                    ],
                    "properties": {
                      "subservice_name": {
                        "type": "boolean",
                        "description": "True to enable, false to disable."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/managed_vps/{managedVpsId}/addWeb": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1
              }
            }
          }
        },
        "summary": "Add a Package",
        "operationId": "Add a Package",
        "description": "Add a web site.\nSupported arguments are:\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/managed_vps/{managedVpsId}/addWeb\", [\n            \"domain_name\" => \"string\",\n            \"extra_domain_names\" => \"string\"\n    ]);\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "domain_name",
                  "extra_domain_names"
                ],
                "properties": {
                  "domain_name": {
                    "type": "string",
                    "description": "The initial domain name for the site"
                  },
                  "extra_domain_names": {
                    "type": "string",
                    "description": "Array of zero or moreextra domain names"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/managed_vps/{managedVpsId}/deleteWeb": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1
              }
            }
          }
        },
        "summary": "Delete a Package",
        "operationId": "Delete a Package",
        "description": "Delete web sites.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/managed_vps/{managedVpsId}/deleteWeb\", [\n            \"delete-id\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "delete-id"
                ],
                "properties": {
                  "delete-id": {
                    "type": "array",
                    "items": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/managed_vps/{managedVpsId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve managed VPS",
        "operationId": "Retrieve managed VPS",
        "description": "Returns an object representation of your managed VPS.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/managed_vps/{managedVpsId}\");\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/managed_vps/{managedVpsId}/limits": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get limits",
        "operationId": "Get limits",
        "description": "Returns the count of how many packages can be created on this managed VPS.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/managed_vps/{managedVpsId}/limits\");\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/managed_vps": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve List of Managed VPS",
        "operationId": "Retrieve List of Managed VPS",
        "description": "Returns a short, cheap set of info for this item.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/managed_vps\");\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/managed_vps/{managedVpsId}/profile": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set a profile",
        "operationId": "Set a profile",
        "description": "Set the profile for this managed vps.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/managed_vps/{managedVpsId}/profile\", [\n            \"profileId\" => \"string\"\n    ]);\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "profileId"
                ],
                "properties": {
                  "profileId": {
                    "type": "string",
                    "description": "The profile id for the platform to use"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/managed_vps/{managedVpsId}/profileReset": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Reset managed VPS profile",
        "operationId": "Reset managed VPS profile",
        "description": "Reset the managed vps profile to default\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/managed_vps/{managedVpsId}/profileReset\", [\n    ]);\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/managed_vps/{managedVpsId}/name": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve VPS name",
        "operationId": "Retrieve VPS name",
        "description": "Returns the name of the Managed VPS.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/managed_vps/{managedVpsId}/name\");\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set VPS name",
        "operationId": "Set VPS name",
        "description": "Set the VPS Name\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/managed_vps/{managedVpsId}/name\", [\n            \"name\" => \"string\"\n    ]);\n```",
        "tags": [
          "Managed VPS"
        ],
        "parameters": [
          {
            "name": "managedVpsId",
            "in": "path",
            "description": "The Managed VPS server ID retrieved from get managed vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new VPS name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mssql/{mssqlId}/package": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Assign an MSSQL Database to a Package",
        "operationId": "Assign an MSSQL Database to a Package",
        "description": "Set a package for this instance\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/mssql/{mssqlId}/package\", [\n            \"packageId\" => 1\n    ]);\n```",
        "tags": [
          "MSSQL Databases"
        ],
        "parameters": [
          {
            "name": "mssqlId",
            "in": "path",
            "description": "The MSSQL ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "packageId"
                ],
                "properties": {
                  "packageId": {
                    "type": "number",
                    "description": "The Package Id to set on this MS SQL instance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mssql": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve MSSQL Databases",
        "operationId": "Retrieve MSSQL Databases",
        "description": "Returns the following information.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/mssql\");\n```",
        "tags": [
          "MSSQL Databases"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/mssql/{mssqlId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve an MSSQL Database",
        "operationId": "Retrieve an MSSQL Database",
        "description": "Returns the following information.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/mssql/{mssqlId}\");\n```",
        "tags": [
          "MSSQL Databases"
        ],
        "parameters": [
          {
            "name": "mssqlId",
            "in": "path",
            "description": "The MSSQL ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/userStatus": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Activate or deactivate",
        "operationId": "Activate or deactivate",
        "description": "Activates or deactivates the service.\nPossible subservice_name are 'default' for a typical set of services\nand 'main' for the core service only.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/userStatus\", [\n            \"includeRepeated\" => true,\n            \"subservices\" => [\n                \"(subservice_name)\" => true\n            ]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "includeRepeated",
                  "subservices"
                ],
                "properties": {
                  "includeRepeated": {
                    "type": "boolean",
                    "description": "When reactivating, if true,this will revoke all your deactivations rather than\n\njust the current one."
                  },
                  "subservices": {
                    "type": "object",
                    "required": [
                      "subservice_name"
                    ],
                    "properties": {
                      "subservice_name": {
                        "type": "boolean",
                        "description": "True to enable, false to disable."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/userStatus": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Activate or deactivate",
        "operationId": "Activate or deactivate",
        "description": "Activates or deactivates the service.\nPossible subservice_name are 'default' for a typical set of services\nand 'main' for the core service only.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/userStatus\", [\n            \"includeRepeated\" => true,\n            \"subservices\" => [\n                \"(subservice_name)\" => true\n            ]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "includeRepeated",
                  "subservices"
                ],
                "properties": {
                  "includeRepeated": {
                    "type": "boolean",
                    "description": "When reactivating, if true,this will revoke all your deactivations rather than\n\njust the current one."
                  },
                  "subservices": {
                    "type": "object",
                    "required": [
                      "subservice_name"
                    ],
                    "properties": {
                      "subservice_name": {
                        "type": "boolean",
                        "description": "True to enable, false to disable."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/installedApplications": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve List of Installed Applications",
        "operationId": "Retrieve List of Installed Applications",
        "description": "Return a list of installed applications\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/installedApplications\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Add, Remove, or Update an Application",
        "operationId": "Add, Remove, or Update an Application",
        "description": "Add, remove and update applications and set their environment\nCurrently only one type (add,update,delete,setEnv) is supported per request.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/installedApplications\", [\n            \"add\" => [\n                \"domain\" => \"string\",\n                \"environment\" => \"string\",\n                \"name\" => \"string\",\n                \"path\" => \"string\",\n                \"script\" => \"string\",\n                \"typeCode\" => \"string\"\n            ],\n            \"update\" => [\n                \"domain\" => \"string\",\n                \"environment\" => \"string\",\n                \"name\" => \"string\",\n                \"path\" => \"string\",\n                \"script\" => \"string\",\n                \"typeCode\" => \"string\"\n            ],\n            \"delete\" => [\n                \"id\" => \"string\"\n            ],\n            \"setEnv\" => [\n                \"id\" => \"string\",\n                \"environment\" => \"string\"\n            ]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "add": {
                    "type": "object",
                    "required": [
                      "domain",
                      "environment",
                      "name",
                      "path",
                      "script",
                      "typeCode"
                    ],
                    "properties": {
                      "domain": {
                        "type": "string"
                      },
                      "environment": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "script": {
                        "type": "string"
                      },
                      "typeCode": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  },
                  "update": {
                    "type": "object",
                    "required": [
                      "domain",
                      "environment",
                      "name",
                      "path",
                      "script",
                      "typeCode"
                    ],
                    "properties": {
                      "domain": {
                        "type": "string"
                      },
                      "environment": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "path": {
                        "type": "string"
                      },
                      "script": {
                        "type": "string"
                      },
                      "typeCode": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  },
                  "delete": {
                    "type": "object",
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The application ID to delete"
                      }
                    },
                    "nullable": true
                  },
                  "setEnv": {
                    "type": "object",
                    "required": [
                      "id",
                      "environment"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "environment": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/installedSoftware": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Retrieve Installed Applications by Type Code",
        "operationId": "Retrieve Installed Applications by Type Code",
        "description": "Returns a list of installed software by type code on managed server.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/installedSoftware\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/email/{emailId}/responder": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Autoresponder Configuration",
        "operationId": "Retrieve Autoresponder Configuration",
        "description": "Returns the current autoresponder config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/responder\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/bandwidthStats": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Bandwidth Statistics",
        "operationId": "Retrieve Bandwidth Statistics",
        "description": "Get the bandwidth stats and hits.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/bandwidthStats\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/blockedCountries": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Blocked Countries",
        "operationId": "Retrieve Blocked Countries",
        "description": "Get blocked countries, in the format of 2-digit ISO codes.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/blockedCountries\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Set blocked countries",
        "operationId": "Set blocked countries",
        "description": "Set the blocked countries for the site.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/blockedCountries\", [\n            \"access\" => \"string\",\n            \"countries\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "access",
                  "countries"
                ],
                "properties": {
                  "access": {
                    "type": "string"
                  },
                  "countries": {
                    "type": "array",
                    "items": { },
                    "description": "An array of country codes inISO 3166 format."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/blockedIpAddresses": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Retrieve Blocked IP Addresses",
        "operationId": "Retrieve Blocked IP Addresses",
        "description": "Get blocked IP addresses either in standard format or in CIDR format.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/blockedIpAddresses\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set Blocked IP Addresses",
        "operationId": "Set Blocked IP Addresses",
        "description": "Set the blocked IP addresses for the web|package. This is an array\nof IP addresses, with an optional CIDR range.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/blockedIpAddresses\", [\n            \"ip_addresses\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ip_addresses": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "An array of IP addresses, or omitto remove all blocked addresses.",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/cacheReport": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve CDN Cache Report",
        "operationId": "Retrieve CDN Cache Report",
        "description": "Get cache report for this web.  Only available if the package has website turbo assigned\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/cacheReport\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/cdnStats": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve CDN Statistics",
        "operationId": "Retrieve CDN Statistics",
        "description": "Returns the CDN statistics for the package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/cdnStats\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/cdnStatsTrafficDistribution": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve CDN Distribution Statistics",
        "operationId": "Retrieve CDN Distribution Statistics",
        "description": "Shows bandwidth and hits split by country as recorded by our edge CDN platform\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/cdnStatsTrafficDistribution\", [\n            \"period\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "period"
                ],
                "properties": {
                  "period": {
                    "type": "string",
                    "description": "- \"Last1Hour\", \"Last24Hours\", \"Last7Days\""
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/clearPendingInstall": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Clear Pending Install",
        "operationId": "Clear Pending Install",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/clearPendingInstall\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/contacts": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Contacts for a Domain Name",
        "operationId": "Retrieve Contacts for a Domain Name",
        "description": "Returns the current contacts for the domain name. This is a map of\ncontact types to contact data, in EPP format.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/contacts\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set Domain Contacts",
        "operationId": "Set Domain Contacts",
        "description": "Sets the contacts for the domain. This is a map of contact types to\ncontact data, in EPP format.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/contacts\", [\n            \"(contact-type)\" => []\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/database/{databaseId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retreive database",
        "operationId": "Retreive database",
        "description": "Returns some information about the database.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/database/{databaseId}\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "databaseId",
            "in": "path",
            "description": "The database ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/directoryIndex": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Directory Listing Configuration",
        "operationId": "Retrieve Directory Listing Configuration",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/directoryIndex\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set Directory Index Configuration",
        "operationId": "Set Directory Index Configuration",
        "description": "Set up to 5 files for the directory index in the htaccess.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/directoryIndex\", [\n            \"directoryIndex\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "directoryIndex"
                ],
                "properties": {
                  "directoryIndex": {
                    "type": "array",
                    "items": { },
                    "description": "A list of file names to use for a directory index."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/directoryIndexing": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Directory Listing Configuration",
        "operationId": "Retrieve Directory Listing Configuration",
        "description": "Get the directory indexing state\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/directoryIndexing\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set Directory Indexing Configuration",
        "operationId": "Set Directory Indexing Configuration",
        "description": "Directory indexing allows visitors to view a list of files instead of the actual webpage.\nThis can turn on/off directory indexing for the website.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/directoryIndexing\", [\n            \"value\" => true\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "boolean",
                    "description": "true or false to set the directory indexing on oroff"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/requestDiskUsage": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get disk usage report",
        "operationId": "Get disk usage report",
        "description": "Request Disk Usage Report\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/requestDiskUsage\", [\n            \"subdirectory\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "subdirectory"
                ],
                "properties": {
                  "subdirectory": {
                    "type": "string",
                    "description": "Subdirectory for which to request disk usage report"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/email/{emailId}/signature": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve DKIM Signature",
        "operationId": "Retrieve DKIM Signature",
        "description": "Returns domain DKIM Signatures.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/signature\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Set/Delete a DKIM signature",
        "operationId": "Set/Delete a DKIM signature",
        "description": "Set or Delete DKIM Signature for a given domain.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/email/{emailId}/signature\", [\n            \"action\" => \"string\",\n            \"body\" =>[ [\n                \"Canonicalization\" => \"string\",\n                \"ExpiryTime\" => 1,\n                \"Flag\" => \"string\",\n                \"Granularity\" => \"string\",\n                \"IsDefault\" => true,\n                \"IsStrict\" => true,\n                \"Note\" => \"string\",\n                \"Selector\" => \"string\",\n                \"ServiceType\" => \"string\"\n            ]]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "body"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "Indicates update/delete method"
                  },
                  "body": {
                    "type": "array",
                    "items": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/email/{emailId}/dmarc": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve DMARC",
        "operationId": "Retrieve DMARC",
        "description": "Returns domain DMARC.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/dmarc\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Set/Delete a DMARC",
        "operationId": "Set/Delete a DMARC",
        "description": "Set or Delete DMARC for a given domain.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/email/{emailId}/dmarc\", [\n            \"action\" => \"string\",\n            \"body\" =>[ [\n                \"Canonicalization\" => \"string\",\n                \"ExpiryTime\" => 1,\n                \"Flag\" => \"string\",\n                \"Granularity\" => \"string\",\n                \"IsDefault\" => true,\n                \"IsStrict\" => true,\n                \"Note\" => \"string\",\n                \"Selector\" => \"string\",\n                \"ServiceType\" => \"string\"\n            ]]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "body"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "Indicates update/delete method"
                  },
                  "body": {
                    "type": "array",
                    "items": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/maxNameservers": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1
              }
            }
          }
        },
        "summary": "Check Maximum Number of Nameservers for a Domain",
        "operationId": "Check Maximum Number of Nameservers for a Domain",
        "description": "Returns the maximum number of nameservers for the domain. You\ncan and should cache this information by TLD.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/maxNameservers\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/defaultDns": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Default DNS for a Package",
        "operationId": "Retrieve Default DNS for a Package",
        "description": "Returns the default DNS records from the web object.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/defaultDns\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/defaultDns": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Default DNS for a Package",
        "operationId": "Retrieve Default DNS for a Package",
        "description": "Returns the default DNS records from the web object\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/defaultDns\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/dns/googleApps": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Google Apps DNS",
        "operationId": "Retrieve Google Apps DNS",
        "description": "Returns the records needed for a full Google Apps service,\nincluding mail and web services. You can send these back in the\n\"new\" key when updating DNS to add them, but it's recommended\nthat you also delete any conflicting records at the same time.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/dns/googleApps\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Add Google Apps DNS",
        "operationId": "Add Google Apps DNS",
        "description": "Equivalent to adding new DNS records with all the results of\nGET \"googleApps\". This will not remove any records by default.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/dns/googleApps\", [\n            \"conflictPolicy\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conflictPolicy": {
                    "type": "string",
                    "description": "One of \"reject\", \"replace\" or\"ignore\".",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/dns/googleAppsMailOnly": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Google Mail DNS",
        "operationId": "Retrieve Google Mail DNS",
        "description": "Returns the records needed for Google Mail service. You can\nsend these back in the \"new\" key when updating DNS to add them,\nbut it's recommended that you also delete any conflicting records\nat the same time.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/dns/googleAppsMailOnly\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Add Google Apps Mail DNS",
        "operationId": "Add Google Apps Mail DNS",
        "description": "Equivalent to adding new DNS records with all the results of\nGET \"googleAppsMailOnly\". This will not remove any records by default.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/dns/googleAppsMailOnly\", [\n            \"conflictPolicy\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conflictPolicy": {
                    "type": "string",
                    "description": "One of \"reject\", \"replace\" or\"ignore\".",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/nameservers": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Retrieve Nameservers for a Domain",
        "operationId": "Retrieve Nameservers for a Domain",
        "description": "Returns the current nameservers for the domain, if applicable.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/nameservers\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update Nameservers for a Domain Name",
        "operationId": "Update Nameservers for a Domain Name",
        "description": "Updates the nameservers for the domain.\nIf the old nameservers do not match, the registry may reject\nthe request. Some registries may handle names which are present\nin both \"ns\" and \"old-ns\" incorrectly, so it's recommended that\nyou do not include names which are being kept.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/nameservers\", [\n            \"ns\" => [\"string\"],\n            \"old-ns\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The nameservers to add",
                    "nullable": true
                  },
                  "old-ns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The nameservers to remove",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/dns/office365Mail": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Office 365 DNS",
        "operationId": "Retrieve Office 365 DNS",
        "description": "Returns the records needed for office 365 mail.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/dns/office365Mail\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Add Office365 records.",
        "operationId": "Add Office365 records.",
        "description": "Equivalent to adding new DNS records with all the results of\nGET \"Office365MailOnly\". This will not remove any records by default.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/dns/office365Mail\", [\n            \"conflictPolicy\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conflictPolicy": {
                    "type": "string",
                    "description": "One of \"reject\", \"replace\" or\"ignore\".",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/dns": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve DNS for a Domain Name",
        "operationId": "Retrieve DNS for a Domain Name",
        "description": "Returns the current DNS records for the domain.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/dns\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Update DNS for a Domain Name",
        "operationId": "Update DNS for a Domain Name",
        "description": "Updates the DNS records for the domain, if the DNS service is in use.\nName prefixes are either plain names like \"www\" or \"mail\",\nor \"@\" to indicate that it applies to the domain itself\n(typically only AAAA, A or MX).\nNOTE: The platform may silently rewrite some adds into updates.\nNOTE: CNAMEs are special records (see RFC1034, with reference to\nRFC1912): they actually mean \"no stop you're looking in the wrong place,\nask instead for <target name>\". Thus on any name you can only have one\nof: (a)no records, (b) 1 CNAME, or (c) 1+ non-CNAME records (including\nSOA and NS). If you have a CNAME on a name and want to add records on\nthat name, you should remove the CNAME (this may be done implicitly for\nyou). If you have non-CNAME records on a name and want to add a CNAME on\nthat name, you will have to delete every non-CNAME record on the name.\nIn most cases, people using CNAME actually want \"A/AAAA CNAME\", ie.\naliasing the A and AAAA records but nothing else (which the DNS protocol\ndoesn't support). The distinction doesn't affect anything unless you have\nconflicting records on the same name, which usually is only the case for\nthe root. Since browsers do not support _http._tcp SRV records (and don't\nintend to), you simply have to manually copy A or AAAA records in this\ncase.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/dns\", [\n            \"conflictPolicy\" => \"string\",\n            \"insertPolicy\" => \"string\",\n            \"new\" => [\n                \"AAAA\" =>[ [\n                    \"host\" => \"string\",\n                    \"ipv6\" => \"string\",\n                ],]\n                \"A\" =>[ [\n                    \"host\" => \"string\",\n                    \"ip\" => \"string\",\n                ],]\n                \"CNAME\" =>[ [\n                    \"reuseId\" => \"string\",\n                    \"host\" => \"string\",\n                    \"target\" => \"string\",\n                ],]\n                \"MX\" =>[ [\n                    \"host\" => \"string\",\n                    \"target\" => \"string\",\n                    \"pri\" => \"string\",\n                ],]\n                \"TXT\" =>[ [\n                    \"host\" => \"string\",\n                    \"txt\" => \"string\",\n                ],]\n                \"SRV\" =>[ [\n                    \"host\" => \"string\",\n                    \"pri\" => \"string\",\n                    \"weight\" => \"string\",\n                    \"port\" => \"string\",\n                    \"target\" => \"string\",\n                ]]\n            ],\n            \"delete\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "new",
                  "delete"
                ],
                "properties": {
                  "conflictPolicy": {
                    "type": "string",
                    "description": "One of \"replace\", \"reject\" or\"ignore\", meaning that the old record will be deleted, the\n\n transaction will be dropped with an error, or the new record\n will be dropped respectively.",
                    "nullable": true
                  },
                  "insertPolicy": {
                    "type": "string",
                    "description": "One of \"replace\" or \"append\"(default), meaning that any old records of the given type+name\n\n will be deleted if \"replace\" is selected. Where conflict policy\n has also been defined, that policy will be resolved first.",
                    "nullable": true
                  },
                  "new": {
                    "type": "object",
                    "required": [
                      "AAAA",
                      "A",
                      "CNAME",
                      "MX",
                      "TXT",
                      "SRV"
                    ],
                    "properties": {
                      "AAAA": {
                        "type": "array",
                        "items": { }
                      },
                      "A": {
                        "type": "array",
                        "items": { }
                      },
                      "CNAME": {
                        "type": "array",
                        "items": { }
                      },
                      "MX": {
                        "type": "array",
                        "items": { }
                      },
                      "TXT": {
                        "type": "array",
                        "items": { }
                      },
                      "SRV": {
                        "type": "array",
                        "items": { }
                      }
                    }
                  },
                  "delete": {
                    "type": "array",
                    "items": { },
                    "description": "An array of record IDs to delete,see the \"dns\" property."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/dnssec": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get DNSSEC status",
        "operationId": "Get DNSSEC status",
        "description": "Get the current DNSSEC status from platform\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/dnssec\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Set DNSSEC status",
        "operationId": "Set DNSSEC status",
        "description": "Set DNSSEC at platform\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/dnssec\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/documentRoots": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Document Roots",
        "operationId": "Retrieve Document Roots",
        "description": "Returns a map of DNS names to document root subpaths for the site.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/documentRoots\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Domain Information",
        "operationId": "Retrieve Domain Information",
        "description": "Returns information about the domain.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/renewalMultipleMaxHintFor": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1
              }
            }
          }
        },
        "summary": "Get domain max interval hint",
        "operationId": "Get domain max interval hint",
        "description": "Will provide a hint on what the current maximum years would be allowed for\na renewal.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/renewalMultipleMaxHintFor\", [\n            \"expiryDate\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "expiryDate"
                ],
                "properties": {
                  "expiryDate": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/names": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Retrieve Names for a Package",
        "operationId": "Retrieve Names for a Package",
        "description": "Returns the names for this package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/names\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Add or Remove Names From a Package",
        "operationId": "Add or Remove Names From a Package",
        "description": "Add or remove names from the package.\nThis has special behaviour if any of the names are also registered\n(renewable) domain names in your account:\nAs a policy matter, you may not remove the last name from the object. If\nyou attempt to do so, you will get an error.\n\n- this will require full access to that domain name or refuse\n\n- adding the name will strip any web forwarding set up.\n\n- removing the name will add a new (empty) web forwarding config.\n\n- this will require full access to that domain name or refuse\n\n- adding the name will strip any web forwarding set up.\n\n- removing the name will add a new (empty) web forwarding config.\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/names\", [\n            \"add\" => [\"string\"],\n            \"rem\" => [\"string\"],\n            \"chg\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "add",
                  "rem"
                ],
                "properties": {
                  "add": {
                    "type": "array",
                    "items": { },
                    "description": "The names to add. You can include names which are already mapped\n\nto the package - they will just be skipped."
                  },
                  "rem": {
                    "type": "array",
                    "items": { }
                  },
                  "chg": {
                    "type": "string",
                    "description": "The new \"main name\" for functions which need a single\n\nname, ie stack user and FTP user. This must be a name\nwhich will be on this object after the other changes\nabove.",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/domainCheck": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Domain Details",
        "operationId": "Retrieve Domain Details",
        "description": "Get details about a given domain, ie is this a domain or subdomain.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/domainCheck\", [\n            \"domain\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "domain"
                ],
                "properties": {
                  "domain": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/names": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Add Names to a Package",
        "operationId": "Add Names to a Package",
        "description": "Add or remove names from the Web. This is mostly handled on the\ncorresponding Package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/names\", [\n            \"add\" => [\"string\"],\n            \"rem\" => [\"string\"],\n            \"chg\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "add",
                  "rem"
                ],
                "properties": {
                  "add": {
                    "type": "array",
                    "items": { },
                    "description": "When adding, you can either provide a plain array of names or a\n\nmap of names to subdirectories representing the\ncorresponding document root. If you're in PHP, something\nlike [\"example.org\", \"example.net\" => \"enet\"] will\nwork. Adding names which already exist will modify their\ndocument root paths."
                  },
                  "rem": {
                    "type": "array",
                    "items": { },
                    "description": "A plain array of names"
                  },
                  "chg": {
                    "type": "string",
                    "description": "The new \"main name\" for functions which need a single\n\nname, eg. the main FTP username. By default this is the\nfirst name on the Web.",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/servicePrice": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1.99
              }
            }
          }
        },
        "summary": "Retreive domain price",
        "operationId": "Retreive domain price",
        "description": "Get a per-year price, if premium, specifically for renewals.\nThis is always in GBP; it will require currency conversion for other\ncurrencies and may or may not have markup added for checkout.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/servicePrice\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/privacy": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve domain privacy settings",
        "operationId": "Retrieve domain privacy settings",
        "description": "Returns information about the service\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/privacy\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Update domain privacy",
        "operationId": "Update domain privacy",
        "description": "Updates the privacy service\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/privacy\", [\n            \"emailDestination\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "emailDestination"
                ],
                "properties": {
                  "emailDestination": {
                    "type": "string",
                    "description": "The email address to forward to, ifsupported by the privacy service."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/privacyState": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Set Domain Privacy State",
        "operationId": "Set Domain Privacy State",
        "description": "Updates the privacy enabled/disabled state (for domains with privacy\nattached only).\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/privacyState\", [\n            \"enabled\" => true\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/pendingTransferStatus": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get domain transfer status",
        "operationId": "Get domain transfer status",
        "description": "Returns the current cached status of the transfer.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/pendingTransferStatus\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/optOut": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve WHOIS Disclosure Information for a Domain",
        "operationId": "Retrieve WHOIS Disclosure Information for a Domain",
        "description": "Fetches information about WHOIS contact disclosure (Nominet or .IT) for\nthe domain name.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/optOut\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Update WHOIS optout",
        "operationId": "Update WHOIS optout",
        "description": "Updates the WHOIS disclosure options, for applicable domains.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/optOut\", [\n            \"enabled\" => true\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/easyBuilderInstanceDelete": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Delete an Easy Builder instance by virtual host and instance.",
        "operationId": "Delete an Easy Builder instance by virtual host and instance.",
        "description": "Delete the Easy Builder instance identified by ID.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/easyBuilderInstanceDelete\", [\n            \"instanceId\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "instanceId"
                ],
                "properties": {
                  "instanceId": {
                    "type": "string",
                    "description": "Easy Builder instance ID"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/easyBuilderInstanceInstall": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Install an Easy Builder instance by virtual host and instance.",
        "operationId": "Install an Easy Builder instance by virtual host and instance.",
        "description": "Install the Easy Builder instance identified by ID.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/easyBuilderInstanceInstall\", [\n            \"instanceId\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "instanceId"
                ],
                "properties": {
                  "instanceId": {
                    "type": "string",
                    "description": "Easy Builder instance ID"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/easyBuilderInstance": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve all current Easy Builder instances",
        "operationId": "Retrieve all current Easy Builder instances",
        "description": "Get the current Easy Builder instances.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/easyBuilderInstance\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/easyBuilderSso": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get an Easy Builder instance's SSO by virtual host and instance.",
        "operationId": "Get an Easy Builder instance's SSO by virtual host and instance.",
        "description": "Get the Easy Builder instance's SSO identified by IDs.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/easyBuilderSso\", [\n            \"instanceId\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "instanceId"
                ],
                "properties": {
                  "instanceId": {
                    "type": "string",
                    "description": "Easy Builder instance ID"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/easyBuilderTheme": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get all the available Easy Builder themes",
        "operationId": "Get all the available Easy Builder themes",
        "description": "Get all available Easy Builder themes.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/easyBuilderTheme\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Set the selected Easy Builder theme.",
        "operationId": "Set the selected Easy Builder theme.",
        "description": "Set the selected Easy Builder theme to the virtual host & instance.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/easyBuilderTheme\", [\n            \"instanceId\" => \"string\",\n            \"themeName\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "instanceId",
                  "themeName"
                ],
                "properties": {
                  "instanceId": {
                    "type": "string",
                    "description": "Easy Builder instance ID"
                  },
                  "themeName": {
                    "type": "string",
                    "description": "Name of the selected Easy Builder theme"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/email/{emailId}/spamPolicyListBlacklist": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Blacklist Configuration",
        "operationId": "Retrieve Blacklist Configuration",
        "description": "Returns the current blacklist config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/spamPolicyListBlacklist\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/email/{emailId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Email Configuration for a Domain Name",
        "operationId": "Retrieve Email Configuration for a Domain Name",
        "description": "Returns the current email configuration for the domain. This is a map of\nsetting types to arrays of settings, in the same format as the \"email\"\nmethod but with an extra \"id\" property on each item.\nTo facilitate page display, this also redundantly includes the domain\nname in a \"name\" property.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Update Email Settings for a Domain Name",
        "operationId": "Update Email Settings for a Domain Name",
        "description": "Updates the email settings for the domain.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/email/{emailId}\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "``"
                ],
                "properties": {
                  "``": {
                    "type": "object",
                    "required": [
                      "result"
                    ],
                    "properties": {
                      "result": {
                        "type": "array",
                        "items": { },
                        "description": "Only used for new items"
                      },
                      "name": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/email/{emailId}/domain": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get domain config",
        "operationId": "Get domain config",
        "description": "Returns the current domain config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/domain\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/email/{emailId}/domainAlias": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get domain alias config",
        "operationId": "Get domain alias config",
        "description": "Returns the current domain alias config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/domainAlias\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/email/{emailId}/forwarder": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get email forwarder config",
        "operationId": "Get email forwarder config",
        "description": "Returns the current forwarder config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/forwarder\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/allMailForwarders": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Email Forwarders",
        "operationId": "Retrieve Email Forwarders",
        "description": "Fetches all forwarders by package id.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/allMailForwarders\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/email/{emailId}/stats": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve mailbox stats",
        "operationId": "Retrieve mailbox stats",
        "description": "Returns mailbox stats by folder for a given mailbox.\nThis get request takes request args mb=mXXXXX for the mailbox ID.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/stats\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/email/{emailId}/spamPolicyListWhitelist": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Whitelist Configuration",
        "operationId": "Retrieve Whitelist Configuration",
        "description": "Returns the current whitelist config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/spamPolicyListWhitelist\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/filePermissions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve File Permission Recommendations",
        "operationId": "Retrieve File Permission Recommendations",
        "description": "Get the file permissions that do not match the platform recommendations\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/filePermissions\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set File Permission Recommendations",
        "operationId": "Set File Permission Recommendations",
        "description": "Set file permissions\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/filePermissions\", [\n            \"permissionCheckId\" => 1,\n            \"files\" => [\n                \"file\" => \"string\",\n                \"perms\" => 1\n            ]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "permissionCheckId",
                  "files"
                ],
                "properties": {
                  "permissionCheckId": {
                    "type": "number"
                  },
                  "files": {
                    "type": "object",
                    "required": [
                      "file",
                      "perms"
                    ],
                    "properties": {
                      "file": {
                        "type": "string"
                      },
                      "perms": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/email/{emailId}/mailForwarders": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Mailbox Forwarder Configuration",
        "operationId": "Retrieve Mailbox Forwarder Configuration",
        "description": "Returns the current mailbox forwarder config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/mailForwarders\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/ftpCredentials": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve FTP Credentials",
        "operationId": "Retrieve FTP Credentials",
        "description": "Returns the FTP credentials (if any).\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/ftpCredentials\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/ftpusers": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve FTP Users",
        "operationId": "Retrieve FTP Users",
        "description": "Returns an array of FTP users for this ExternalId and the Acl associated\nwith the FTP account\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/ftpusers\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Create/Update an FTP User",
        "operationId": "Create/Update an FTP User",
        "description": "Update or create a new FTP user. This method will handle the creation\nof new FTP users and updating existing FTP users.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/ftpusers\", [\n            \"new\" => [\n                \"ftp\" => [\n                    \"user\" =>[ [\n                        \"Username\" => \"string\",\n                        \"Domain\" => \"string\",\n                        \"Password\" => \"string\",\n                        \"JailFrom\" => \"string\"\n                    ]]\n                ]\n            ],\n            \"update\" => [\n                \"ftp\" =>[ [\n                    \"id\" => \"string\",\n                    \"user\" => [\n                        \"Password\" => \"string\",\n                        \"JailFrom\" => \"string\",\n                        \"UnlockedUntil\" => \"string\",\n                        \"Enabled\" => true\n                    ],\n                    \"acl\" => \"string\"\n                ]]\n            ],\n            \"delete\" => [\n                \"ftp\" => [\n                    \"id\" => [\"string\"]\n                ]\n            ]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "new",
                  "update",
                  "delete"
                ],
                "properties": {
                  "new": {
                    "type": "object",
                    "required": [
                      "ftp"
                    ],
                    "properties": {
                      "ftp": {
                        "type": "object",
                        "required": [
                          "user"
                        ],
                        "properties": {
                          "user": {
                            "type": "array",
                            "items": { }
                          }
                        }
                      }
                    }
                  },
                  "update": {
                    "type": "object",
                    "required": [
                      "ftp"
                    ],
                    "properties": {
                      "ftp": {
                        "type": "array",
                        "items": { }
                      }
                    }
                  },
                  "delete": {
                    "type": "object",
                    "required": [
                      "ftp"
                    ],
                    "properties": {
                      "ftp": {
                        "type": "object",
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "array",
                            "items": { }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/homeDirectory": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve the Home Directory",
        "operationId": "Retrieve the Home Directory",
        "description": "Returns the home directory for the web site.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/homeDirectory\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/preventHotlinking": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Hotlinking Configuration",
        "operationId": "Retrieve Hotlinking Configuration",
        "description": "Get the prevent hotlinking config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/preventHotlinking\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Hotlinks",
        "operationId": "Hotlinks",
        "description": "Set the prevent hotlinking config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/preventHotlinking\", [\n            \"AllowDirect\" => true,\n            \"AllowedHostnames\" => [\"string\"],\n            \"RedirectURL\" => \"string\",\n            \"Extensions\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "AllowDirect": {
                    "type": "boolean",
                    "nullable": true
                  },
                  "AllowedHostnames": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "RedirectURL": {
                    "type": "string",
                    "nullable": true
                  },
                  "Extensions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/limits": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Limits for a Domain",
        "operationId": "Retrieve Limits for a Domain",
        "description": "Returns the limits for the current user, a key-value map.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/limits\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/limits": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Limits for a Package",
        "operationId": "Retrieve Limits for a Package",
        "description": "Returns the limits for the current user, a key-value map.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/limits\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/limits": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Retrieve Limits for a web",
        "operationId": "Retrieve Limits for a web",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/limits\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/database/{databaseId}/user/{userId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retreive database users",
        "operationId": "Retreive database users",
        "description": "Returns some information about the database user\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/database/{databaseId}/user/{userId}\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "databaseId",
            "in": "path",
            "description": "The database ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Information for all Packages",
        "operationId": "Retrieve Information for all Packages",
        "description": "The \"Retrieve Information for all Packages\" API endpoint allows you to retrieve as a list information about all hosting packages. A package in this context refers to an object that holds information about a specific hosting package.\nBy making a request to this endpoint, you can obtain detailed information about all the packages related to the service. The response will be an array of package objects, where each object contains various attributes providing information about a specific package. The exact structure of the response can be found in the API documentation or additional documentation provided by 20i.\nThe response from the API call will include the following information for each package:\n\"id\" (integer): The unique ID assigned to the package.\n\"enabled\" (boolean): Indicates whether the package is enabled or not.\n\"externalId\" (integer): The external ID associated with the package.\n\"created\" (string): The timestamp indicating when the package was created.\n\"name\" (string): The primary name for the package.\n\"names\" (array of strings): Additional names associated with the package.\n\"packageTypeName\" (string): The name of the package type associated with the package.\n\"packageTypePlatform\" (string): The platform (operating system) of the package type.\n\"productSpec\" (string or null): Specifies the type of product, if applicable.\n\"stackUsers\" (array of strings or null): Represents the stack users associated with the package.\n\"typeRef\" (string or null): An indication of the package type.\n\"web\" (array or null): Contains additional information related to the web aspects of the package, following the structure defined in the \"\\Web#forList\" model.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/stackUserList": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Stack User list",
        "operationId": "Retrieve Stack User list",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/stackUserList\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/stackUserList": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Stack User list",
        "operationId": "Retrieve Stack User list",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/stackUserList\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/logs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Logs for a Package.",
        "operationId": "Retrieve Logs for a Package.",
        "description": "Get access and error logs for the site.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/logs\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/email/{emailId}/mailbox": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Current Mailbox Configuration",
        "operationId": "Retrieve Current Mailbox Configuration",
        "description": "Returns the current mailbox config.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/email/{emailId}/mailbox\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/maintenanceMode": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Maintenance Mode Settings",
        "operationId": "Retrieve Maintenance Mode Settings",
        "description": "Get maintenance mode settings for this web\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/maintenanceMode\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Set Maintenance Mode Settings",
        "operationId": "Set Maintenance Mode Settings",
        "description": "Set maintenance mode settings for this web\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/maintenanceMode\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/malwareReport": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Retrieve the latest malware report",
        "operationId": "Retrieve the latest malware report",
        "description": "Returns the latest malware report for a given website\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/malwareReport\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/malwareScan": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Malware Scan Report",
        "operationId": "Retrieve Malware Scan Report",
        "description": "Get the malware scan objects for this web\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/malwareScan\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set Malware Scan Status",
        "operationId": "Set Malware Scan Status",
        "description": "Set Mailware Scan lock state, setting to \"new\" will request a new scan\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/malwareScan\", [\n            \"LockState\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "LockState"
                ],
                "properties": {
                  "LockState": {
                    "type": "string",
                    "description": "The new state only \"new\" supported"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mssqlUsers": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Add a User to an MSSQL Database",
        "operationId": "Add a User to an MSSQL Database",
        "description": "Add a user to an MSSQL database.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mssqlUsers\", [\n            \"databaseId\" => 1,\n            \"username\" => \"string\",\n            \"password\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "databaseId",
                  "username",
                  "password"
                ],
                "properties": {
                  "databaseId": {
                    "type": "number",
                    "description": "The database ID to grant the user access to."
                  },
                  "username": {
                    "type": "string",
                    "description": "The username."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mssqlDatabases": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve MSSQL Databases",
        "operationId": "Retrieve MSSQL Databases",
        "description": "Get MSSQL Databases.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/mssqlDatabases\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Create an MSSQL Database",
        "operationId": "Create an MSSQL Database",
        "description": "Create an MSSQL database and a user with the same name.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mssqlDatabases\", [\n            \"name\" => \"string\",\n            \"password\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the database (and user)."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/removeMssqlDatabase": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Remove an MSSQL Database",
        "operationId": "Remove an MSSQL Database",
        "description": "Remove an MSSQL database.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/removeMssqlDatabase\", [\n            \"id\" => 1\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "The database ID."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/removeMssqlUser": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Remove an MSSQL User",
        "operationId": "Remove an MSSQL User",
        "description": "Remove an MSSQL user.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/removeMssqlUser\", [\n            \"databaseId\" => 1,\n            \"userId\" => 1\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "databaseId",
                  "userId"
                ],
                "properties": {
                  "databaseId": {
                    "type": "number",
                    "description": "The database ID that the useris granted access to."
                  },
                  "userId": {
                    "type": "number",
                    "description": "The user ID to be removed."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mssqlUserPassword": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update the Password for an MSSQL User",
        "operationId": "Update the Password for an MSSQL User",
        "description": "Update the password for an MSSQL user.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mssqlUserPassword\", [\n            \"databaseId\" => 1,\n            \"userId\" => 1,\n            \"password\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "databaseId",
                  "userId",
                  "password"
                ],
                "properties": {
                  "databaseId": {
                    "type": "number",
                    "description": "The database ID that the useris granted access to."
                  },
                  "userId": {
                    "type": "number",
                    "description": "The user ID to update the password for."
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mysqlDatabases": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve MySQL Databases",
        "operationId": "Retrieve MySQL Databases",
        "description": "Get all MySQL databases.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/mysqlDatabases\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                },
                "example": [ ]
              }
            }
          }
        },
        "summary": "Create a MySQL Database",
        "operationId": "Create a MySQL Database",
        "description": "Create a MySQL database and a user with the same name.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mysqlDatabases\", [\n            \"name\" => \"string\",\n            \"password\" => \"string\",\n            \"allow_random\" => true\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The database and user name."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user."
                  },
                  "allow_random": {
                    "type": "boolean",
                    "description": "Allow a random database suffix if thedatabase name is taken.",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mysqlUserIpAcl": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Permitted Remote IP Addresses",
        "operationId": "Retrieve Permitted Remote IP Addresses",
        "description": "Get the external IP addresses that MySQL users are allowed to\nconnect to remotely.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/mysqlUserIpAcl\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Updating Remote MySQL Access",
        "operationId": "Updating Remote MySQL Access",
        "description": "Add or remove IPV4 hosts permitted to access MySQL database remotely.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mysqlUserIpAcl\", [\n            \"add\" =>[ [\n                \"user_id\" => 1,\n                \"hosts\" => \"string\"\n            ],]\n            \"remove\" =>[ [\n                \"user_id\" => 1,\n                \"id\" => 1\n            ]]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "add",
                  "remove"
                ],
                "properties": {
                  "add": {
                    "type": "array",
                    "items": { },
                    "description": "An array of user and IP address combinations to\n\n allow remote access to"
                  },
                  "remove": {
                    "type": "array",
                    "items": { },
                    "description": "An array of user ID and remote access host ID combinations."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/removeMysqlDatabase": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Remove a MySQL Database",
        "operationId": "Remove a MySQL Database",
        "description": "Remove a MySQL database.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/removeMysqlDatabase\", [\n            \"id\" => 1\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "The database ID."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/removeMysqlUser": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Remove a MySQL User",
        "operationId": "Remove a MySQL User",
        "description": "Remove a MySQL user.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/removeMysqlUser\", [\n            \"id\" => 1\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "The user ID."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mysqlSSO": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve MySQL SSO URLs",
        "operationId": "Retrieve MySQL SSO URLs",
        "description": "Get a list of each MySQL database server and a Single Sign on link for\neach.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/mysqlSSO\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/mysqlGrantUserDatabase": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Grant MySQL User Default Privileges on a Database",
        "operationId": "Grant MySQL User Default Privileges on a Database",
        "description": "Grant an existing user the default privileges on a database.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mysqlGrantUserDatabase\", [\n            \"username\" => \"string\",\n            \"database\" => \"string\",\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "database",
                  "grants"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username to grant access to."
                  },
                  "database": {
                    "type": "string",
                    "description": "The database to grant access on."
                  },
                  "grants": {
                    "type": "object",
                    "properties": { },
                    "description": "The grants to set for the user onthe database. (optional)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mysqlGrants": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve MySQL User & Database Grants",
        "operationId": "Retrieve MySQL User & Database Grants",
        "description": "Get the grants for MySQL users and databases.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/mysqlGrants\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Update Grants for a MySQL User and Database",
        "operationId": "Update Grants for a MySQL User and Database",
        "description": "Update the grants for a given user and database.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mysqlGrants\", [\n            \"user_id\" => \"string\",\n            \"username\" => \"string\",\n            \"database\" => \"string\",\n            \"grants\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "database",
                  "grants"
                ],
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "IGNORED",
                    "nullable": true
                  },
                  "username": {
                    "type": "string",
                    "description": "The username."
                  },
                  "database": {
                    "type": "string",
                    "description": "The database."
                  },
                  "grants": {
                    "type": "array",
                    "items": { },
                    "description": "The grants to be set."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mysqlUserPassword": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update a MySQL User's Password",
        "operationId": "Update a MySQL User's Password",
        "description": "Update a MySQL user's password.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mysqlUserPassword\", [\n            \"user_id\" => 1,\n            \"password\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user_id",
                  "password"
                ],
                "properties": {
                  "user_id": {
                    "type": "number",
                    "description": "The user ID."
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/mysqlUsers": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve MySQL Users",
        "operationId": "Retrieve MySQL Users",
        "description": "Get all MySQL users.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/mysqlUsers\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Create a MySQL User",
        "operationId": "Create a MySQL User",
        "description": "Create a MySQL user.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/mysqlUsers\", [\n            \"username\" => \"string\",\n            \"password\" => \"string\",\n            \"database\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password",
                  "database"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username."
                  },
                  "password": {
                    "type": "string",
                    "description": "The user's password."
                  },
                  "database": {
                    "type": "string",
                    "description": "The database."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/oneclick": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Available List of One-Clicks",
        "operationId": "Retrieve Available List of One-Clicks",
        "description": "Returns an array for One Click objects that contain details of the\ncurrent version and details in use\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/oneclick\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Install a One-Click",
        "operationId": "Install a One-Click",
        "description": "Install a one click to a domain.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/oneclick\", [\n            \"domain\" => \"string\",\n            \"httpsDomain\" => \"string\",\n            \"oneclick\" => \"string\",\n            \"directory\" => \"string\",\n            \"licenceKey\" => \"string\",\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "domain",
                  "httpsDomain",
                  "oneclick",
                  "directory"
                ],
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "The domain we are installing the files to."
                  },
                  "httpsDomain": {
                    "type": "string",
                    "description": "The HTTPS domain, if appropriate anddifferent from the HTTP domain."
                  },
                  "oneclick": {
                    "type": "string",
                    "description": "The oneclick name we are installing."
                  },
                  "directory": {
                    "type": "string",
                    "description": "The directory to install to, this isrelative to the document root"
                  },
                  "licenceKey": {
                    "type": "string",
                    "nullable": true
                  },
                  "installInput": {
                    "type": "object",
                    "properties": { },
                    "description": "For one clicks that support taking values to use for an install",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Package Information",
        "operationId": "Retrieve Package Information",
        "description": "Returns detailed information about the package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Information About a Package",
        "operationId": "Retrieve Information About a Package",
        "description": "Returns an array representation of the package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/bundleType/limits": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Retreive package type limits",
        "operationId": "Retreive package type limits",
        "description": "Returns the limits set of this package bundle type.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/bundleType/limits\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/passwordProtection": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Retrieve Password Protected Directories",
        "operationId": "Retrieve Password Protected Directories",
        "description": "Get the password protected directories.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/passwordProtection\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Set Password Protected Directories",
        "operationId": "Set Password Protected Directories",
        "description": "Set the password protected directories\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/passwordProtection\", [\n            \"directories\" =>[ [\n                \"directory\" => \"string\",\n                \"username\" => \"string\",\n                \"password\" => \"string\"\n            ]]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "directories"
                ],
                "properties": {
                  "directories": {
                    "type": "array",
                    "items": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/pendingClone": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Check if the package has a pending clone",
        "operationId": "Check if the package has a pending clone",
        "description": "Check if the package has a pending clone.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/pendingClone\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/pendingInstall": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Check if the package has a pending install",
        "operationId": "Check if the package has a pending install",
        "description": "Check if the package has a pending install, if not null then some information for the install is expected to be posted back..\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/pendingInstall\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/pendingSplit": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Get the status of a package pending split job.",
        "operationId": "Get the status of a package pending split job.",
        "description": "Get the status of a package pending split job.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/pendingSplit\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/availablePhpVersions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Available PHP Versions",
        "operationId": "Retrieve Available PHP Versions",
        "description": "Get all available PHP versions.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/availablePhpVersions\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/phpConfig/{phpConfigId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get PHP config",
        "operationId": "Get PHP config",
        "description": "Returns the PHP config for a name.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/phpConfig/{phpConfigId}\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "phpConfigId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/allowedPhpConfiguration": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Allowed PHP Configuration",
        "operationId": "Retrieve Allowed PHP Configuration",
        "description": "Get allowed PHP configuration directives.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/allowedPhpConfiguration\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/phpConfig/{phpConfigId}/updateConfig": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update PHP Config",
        "operationId": "Update PHP Config",
        "description": "Update the PHP config for a given name.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/phpConfig/{phpConfigId}/updateConfig\", [\n            \"config\" => [\n                \"(key)\" => \"string\"\n            ]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "phpConfigId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "config"
                ],
                "properties": {
                  "config": {
                    "type": "object",
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      }
                    },
                    "description": "A map of directive name => value."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/phpVersion": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get PHP Version",
        "operationId": "Get PHP Version",
        "description": "Get the PHP version for the site.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/phpVersion\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Set the PHP Version",
        "operationId": "Set the PHP Version",
        "description": "Set the PHP version for the site.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/phpVersion\", [\n            \"value\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/profileId": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve profile ID",
        "operationId": "Retrieve profile ID",
        "description": "Get vritual package profile id\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/profileId\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/redirects": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Redirects for a Site",
        "operationId": "Retrieve Redirects for a Site",
        "description": "Returns a list of redirects for the site.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/redirects\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Create/Update a Web Redirect",
        "operationId": "Create/Update a Web Redirect",
        "description": "Set the website redirects.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/redirects\", [\n            \"redirects\" =>[ [\n                \"domain\" => \"string\",\n                \"from\" => \"string\",\n                \"to\" => \"string\",\n                \"type\" => \"string\"\n            ]]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "redirects"
                ],
                "properties": {
                  "redirects": {
                    "type": "array",
                    "items": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/upstreamExpiryDate": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Upstream Domain Expiry Date",
        "operationId": "Retrieve Upstream Domain Expiry Date",
        "description": "Returns the expiry date at the registry. This does not necessarily\nindicate the payment status of the domain nor does it reflect when\nrenewal will occur.\nIt is possible for this to return null, eg. for an incomplete transfer\nor a deleted domain.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/upstreamExpiryDate\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/restoreWebsiteBackup": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Restore a Backup via FTP",
        "operationId": "Restore a Backup via FTP",
        "description": "Restore a backup file which has been uploaded via FTP.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/restoreWebsiteBackup\", [\n            \"filename\" => \"string\",\n            \"restore_type\" => \"string\",\n            \"restore_databases\" => true\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "filename",
                  "restore_databases"
                ],
                "properties": {
                  "filename": {
                    "type": "string",
                    "description": "The filename to be restored."
                  },
                  "restore_type": {
                    "type": "string",
                    "description": "The restore type (eitherIntoDirectory, ReplaceMissing or ReplaceAll)",
                    "nullable": true
                  },
                  "restore_databases": {
                    "type": "boolean",
                    "description": "Whether to restore databases."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/tasks": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Scheduled Tasks",
        "operationId": "Retrieve Scheduled Tasks",
        "description": "Returns an array of currently configured cron tasks.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/tasks\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { }
                  }
                },
                "example": [
                  { }
                ]
              }
            }
          }
        },
        "summary": "Create/Update/Delete a Scheduled Task",
        "operationId": "Create/Update/Delete a Scheduled Task",
        "description": "Update, create or delete cron task.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/tasks\", [\n            \"new\" => [\n                \"task\" =>[ [\n                    \"Enabled\" => true,\n                    \"MailTo\" => \"string\",\n                    \"TimeSpec\" => \"string\",\n                    \"Command\" => \"string\"\n                ]]\n            ],\n            \"delete\" => [\n                \"task\" => [\n                    \"id\" => [\"string\"]\n                ]\n            ],\n            \"update\" => [\n                \"task\" =>[ [\n                    \"id\" => \"string\",\n                    \"Enabled\" => true,\n                    \"MailTo\" => \"string\",\n                    \"TimeSpec\" => \"string\",\n                    \"Command\" => \"string\"\n                ]]\n            ]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new": {
                    "type": "object",
                    "required": [
                      "task"
                    ],
                    "properties": {
                      "task": {
                        "type": "array",
                        "items": { }
                      }
                    },
                    "nullable": true
                  },
                  "delete": {
                    "type": "object",
                    "required": [
                      "task"
                    ],
                    "properties": {
                      "task": {
                        "type": "object",
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "type": "array",
                            "items": { }
                          }
                        }
                      }
                    },
                    "nullable": true
                  },
                  "update": {
                    "type": "object",
                    "required": [
                      "task"
                    ],
                    "properties": {
                      "task": {
                        "type": "array",
                        "items": { }
                      }
                    },
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/testCronTask": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Test Scheduled Task",
        "operationId": "Test Scheduled Task",
        "description": "Test a cron task.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/testCronTask\", [\n            \"task\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "task"
                ],
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "The cron task to be tested."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/sessionlimits": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve session limits",
        "operationId": "Retrieve session limits",
        "description": "Returns the limits for the session. If the user is a super user\nthen they are exempt from explicit limit restrictions.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/sessionlimits\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/sessionlimits": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve session limits",
        "operationId": "Retrieve session limits",
        "description": "Returns the limits for the session. If the user is a super user\nthen they are exempt from explicit limit restrictions.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/sessionlimits\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/sitemap": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Check Sitemap Jobs",
        "operationId": "Check Sitemap Jobs",
        "description": "Get the sitemap jobs, only returls a single jobs (last returned from platform)\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/sitemap\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Initiate a Sitemap Job",
        "operationId": "Initiate a Sitemap Job",
        "description": "Start a sitemap job.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/sitemap\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/reinstall": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Reinstall Software",
        "operationId": "Reinstall Software",
        "description": "Re-install from platform.\nThis will re-install software in the hosting space.  EG wordpress\npackage types will re-install wordpress\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/reinstall\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/sshauthenticator": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Set Authenticator Status",
        "operationId": "Set Authenticator Status",
        "description": "Set authenticator status.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/sshauthenticator\", [\n            \"status\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "on|off to set authenticator status"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/sshipaddress": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve SSH IP Addresses for a Package",
        "operationId": "Retrieve SSH IP Addresses for a Package",
        "description": "Get a list of SSH IP Addresses for this package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/sshipaddress\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { }
                  }
                },
                "example": [
                  { }
                ]
              }
            }
          }
        },
        "summary": "Add/Update SSH IP Address",
        "operationId": "Add/Update SSH IP Address",
        "description": "Update or add new SSH IP Address.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/sshipaddress\", [\n            \"add\" => \"string\",\n            \"delete\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "add",
                  "delete"
                ],
                "properties": {
                  "add": {
                    "type": "string"
                  },
                  "delete": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/sshkeys": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve SSH Keys for a Package",
        "operationId": "Retrieve SSH Keys for a Package",
        "description": "Get a list of SSH keys for this package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/sshkeys\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { }
                  }
                },
                "example": [
                  { }
                ]
              }
            }
          }
        },
        "summary": "Add/Update SSH Keys",
        "operationId": "Add/Update SSH Keys",
        "description": "Update or add new SSH keys.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/sshkeys\", [\n            \"add\" =>[ [\n                \"key\" => \"string\",\n                \"handle\" => \"string\"\n            ],]\n            \"delete\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "add",
                  "delete"
                ],
                "properties": {
                  "add": {
                    "type": "array",
                    "items": { }
                  },
                  "delete": {
                    "type": "array",
                    "items": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/sshpassword": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve an SSH Password",
        "operationId": "Retrieve an SSH Password",
        "description": "Get the SSH password for this package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/sshpassword\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Set an SSH Password",
        "operationId": "Set an SSH Password",
        "description": "Set the SSH password for a package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/sshpassword\", [\n            \"password\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The new password to set for SSH"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/freeSSL": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Add a Free SSL",
        "operationId": "Add a Free SSL",
        "description": "This will toggle the free SSL for a web name. The lower level platform handles\nnameserver checks.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/freeSSL\", [\n            \"name\" => \"string\",\n            \"enabled\" => true\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "enabled"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name to toggle free SSL for."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable or disable freeSSL for the name specified."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/certificates": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Installed SSL Certificates",
        "operationId": "Retrieve Installed SSL Certificates",
        "description": "Gets an array of all the certificates attached to virtual hosts on\nthis web. Both free and external SSLs will be retreived.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/certificates\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "boolean"
                  }
                },
                "example": [
                  true
                ]
              }
            }
          }
        },
        "summary": "Remove an SSL Certificate",
        "operationId": "Remove an SSL Certificate",
        "description": "Remove or update certificates from the Web. Currently only remove\nis supported.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/certificates\", [\n            \"delete\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "delete"
                ],
                "properties": {
                  "delete": {
                    "type": "array",
                    "items": { },
                    "description": "An array of certificate IDs to delete"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/forceSSL": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Retrieve Force HTTPS Status",
        "operationId": "Retrieve Force HTTPS Status",
        "description": "Returns whether the site has forced SSL.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/forceSSL\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Force HTTPS for a Site",
        "operationId": "Force HTTPS for a Site",
        "description": "Sets the Force SSL flag for a site.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/forceSSL\", [\n            \"value\" => true\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/externalSSL": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Install an External SSL Certificate",
        "operationId": "Install an External SSL Certificate",
        "description": "Install an external SSL certificate.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/externalSSL\", [\n            \"name\" => \"string\",\n            \"certificate\" => \"string\",\n            \"key\" => \"string\",\n            \"ca\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "certificate",
                  "key",
                  "ca"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name that the certificate is for."
                  },
                  "certificate": {
                    "type": "string",
                    "description": "The certificate."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key."
                  },
                  "ca": {
                    "type": "string",
                    "description": "The CA bundle or intermediate certificate."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/stackCache": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retreive StackCache Settings",
        "operationId": "Retreive StackCache Settings",
        "description": "Get stack cache settings\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/stackCache\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set stack cache policy",
        "operationId": "Set stack cache policy",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/stackCache\", [\n            \"css\" => \"string\",\n            \"images\" => \"string\",\n            \"javascript\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "css": {
                    "type": "string",
                    "description": "A time in seconds prefixed with \"A\" to cache css for",
                    "nullable": true
                  },
                  "images": {
                    "type": "string",
                    "description": "A time in seconds prefixed with \"A\" to cache images for",
                    "nullable": true
                  },
                  "javascript": {
                    "type": "string",
                    "description": "A time in seconds prefixed with \"A\" to cache javascript for",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/subdomains": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve a List of Subdomains",
        "operationId": "Retrieve a List of Subdomains",
        "description": "Returns the list of subdomain names mapped to their document\nroots.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/subdomains\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Add a Subdomain",
        "operationId": "Add a Subdomain",
        "description": "This does the same as POSTing to /names except that it enforces\nthe subdomain limit and disallows non-subdomains.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/subdomains\", [\n            \"add\" => [\"string\"],\n            \"rem\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "add",
                  "rem"
                ],
                "properties": {
                  "add": {
                    "type": "object",
                    "required": [
                      "domain_name"
                    ],
                    "properties": {
                      "domain_name": {
                        "type": "string",
                        "description": "Document root"
                      }
                    }
                  },
                  "rem": {
                    "type": "array",
                    "items": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/cancelTransfer": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Cancel a Domain Transfer",
        "operationId": "Cancel a Domain Transfer",
        "description": "Cancel an incoming transfer. If successful, this will also refund\nto balance.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/cancelTransfer\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/tag": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update IPS Tag",
        "operationId": "Update IPS Tag",
        "description": "Change the IPS-tag for a domain. Applicable to UK domains only. If this\noperation succeeds, the domain\nwill no longer be controllable.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/tag\", [\n            \"new-tag\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "new-tag"
                ],
                "properties": {
                  "new-tag": {
                    "type": "string",
                    "description": "the IPS-tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/authCode": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve EPP Code",
        "operationId": "Retrieve EPP Code",
        "description": "Returns the domain's EPP auth code, as needed for outbound\ntransfers in some circumstances.\nThis MAY issue a new authcode, so it's not suitable to call if you're\ncaching an older copy of the authcode, and it's inadvisable to access\nthis while a transfer is in progress.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/authCode\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/transferInfo": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Transfer Information",
        "operationId": "Retrieve Transfer Information",
        "description": "Returns information about the pending transfer (if any).\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/transferInfo\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/domain/{domainId}/canTransfer": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Retrieve Transfer Flag",
        "operationId": "Retrieve Transfer Flag",
        "description": "Get the flag allowing or disallowing transfers.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/canTransfer\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Amend Domain Lock Status",
        "operationId": "Amend Domain Lock Status",
        "description": "Set the flag allowing or disallowing transfers, aka the \"domain lock\".\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/canTransfer\", [\n            \"enable\" => true\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "enable"
                ],
                "properties": {
                  "enable": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/updateTransfer": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Modify an Incoming Transfer",
        "operationId": "Modify an Incoming Transfer",
        "description": "Modify an incoming transfer.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/updateTransfer\", [\n            \"action\" => \"string\",\n            \"authInfo\" => [\n                \"pw\" => \"string\"\n            ],\n            \"configuration\" => [\n            ]\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "\"restart\" to cancel and restart the transfer or\"resend\" if the admin contact just needs another email."
                  },
                  "authInfo": {
                    "type": "object",
                    "required": [
                      "pw"
                    ],
                    "properties": {
                      "pw": {
                        "type": "string",
                        "description": "If set, the new authcode (for restarts)"
                      }
                    },
                    "description": "This is ignored if $configuration is explicitly provided.",
                    "nullable": true
                  },
                  "configuration": {
                    "type": "object",
                    "properties": { },
                    "description": "If set, and you're restarting, this is the content of the\n\ntransfer. This is used ONLY for cases where you originally\ntried a simple transfer (no contact details required) and now\nneed to do a classic OpenSRS-style transfer instead.\nNot providing this value is equivalent to providing the\noriginal configuration value in most cases.\n\n- `` \\PlatformActionQueue -",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/resendVerificationEmail": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Resend Registrant Verification Email",
        "operationId": "Resend Registrant Verification Email",
        "description": "Resend the registrant verification email, if one applies.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/domain/{domainId}/resendVerificationEmail\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/pendingTransfer": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Retrieve Pending Transfer Status",
        "operationId": "Retrieve Pending Transfer Status",
        "description": "Returns true if this domain is waiting for transfer completion.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/pendingTransfer\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/websiteBuilderSso": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Website Builder SSO Link",
        "operationId": "Retrieve Website Builder SSO Link",
        "description": "Returns the Website Builder SSO link.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/websiteBuilderSso\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/diskUsage": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get disk usage report",
        "operationId": "Get disk usage report",
        "description": "Get report details\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/diskUsage\", [\n            \"reportId\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reportId"
                ],
                "properties": {
                  "reportId": {
                    "type": "string",
                    "description": "Id of requested report"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/usage": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retreive web stats",
        "operationId": "Retreive web stats",
        "description": "Get the bandwidth and disk usage stats for the current package\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/usage\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/email/{emailId}/webmail": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Retrieve the Webmail URL for a Mailbox",
        "operationId": "Retrieve the Webmail URL for a Mailbox",
        "description": "Generate a webmail single-sign-on URL\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/email/{emailId}/webmail\", [\n            \"id\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "description": "The Email ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/sendWelcome": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Send a Welcome Email",
        "operationId": "Send a Welcome Email",
        "description": "Sends or re-sends the welcome email, if a contact is found for a\nprovided toAddress then it will\nbe sent to the template data and be available in twig\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/sendWelcome\", [\n            \"toAddress\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "toAddress"
                ],
                "properties": {
                  "toAddress": {
                    "type": "string",
                    "description": "The address to use, if not the default one(s)."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/domain/{domainId}/whois": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve WHOIS Information",
        "operationId": "Retrieve WHOIS Information",
        "description": "Returns the current live WHOIS text for the domain.\nOnly works for domains registered with 20i.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/domain/{domainId}/whois\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "The domain ID retrieved from get domains.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/recycleApplicationPool": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Recycle Application Pool",
        "operationId": "Recycle Application Pool",
        "description": "Recycle a Windows application pool.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/recycleApplicationPool\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/windowsConfiguration": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Application Pool Configuration",
        "operationId": "Retrieve Application Pool Configuration",
        "description": "Get the existing Windows configuration.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/windowsConfiguration\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update Application Pool Configuration",
        "operationId": "Update Application Pool Configuration",
        "description": "Update the Windows application pool configuration. For example; the\nruntime version, and the pipeline mode type.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/windowsConfiguration\", [\n            \"ApplicationPoolPipelineMode\" => \"string\",\n            \"ApplicationPoolRuntimeVersion\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ApplicationPoolPipelineMode",
                  "ApplicationPoolRuntimeVersion"
                ],
                "properties": {
                  "ApplicationPoolPipelineMode": {
                    "type": "string",
                    "description": "The application poolpipeline mode, either to\n\nIntegrated or Classic. (optional)"
                  },
                  "ApplicationPoolRuntimeVersion": {
                    "type": "string",
                    "description": "The application poolruntime version.\n\n(optional)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressAdministrators": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve WordPress Administrator Users",
        "operationId": "Retrieve WordPress Administrator Users",
        "description": "Get the WordPress administrator users.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressAdministrators\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/wordpressChecksum": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Checksum Report",
        "operationId": "Retrieve Checksum Report",
        "description": "Get a checksum report of WordPress core files\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressChecksum\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Fix Checksum",
        "operationId": "Fix Checksum",
        "description": "Ask to platform to fix any checksum issues\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressChecksum\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressDbCheck": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Check WordPress Database",
        "operationId": "Check WordPress Database",
        "description": "Returns a boolean denoting the result of the database check.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressDbCheck\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/wordpressInstallStackCache": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Install StackCache on a Package",
        "operationId": "Install StackCache on a Package",
        "description": "Install the StackCache plugin for this package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressInstallStackCache\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressIsInstalled": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Check Installation Status",
        "operationId": "Check Installation Status",
        "description": "Checks whether or not WordPress is currently installed.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressIsInstalled\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/wordpressPlugins": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Installed Plugins",
        "operationId": "Retrieve Installed Plugins",
        "description": "Returns an array of installed WordPress plugins.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressPlugins\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Amend/Remove a WordPress Plugin",
        "operationId": "Amend/Remove a WordPress Plugin",
        "description": "Set status or remove a WordPress plugin.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressPlugins\", [\n            \"type\" => \"string\",\n            \"name\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "name"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "one of activate|deactivate|remove"
                  },
                  "name": {
                    "type": "string",
                    "description": "the plugin name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressRoles": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve WordPress Roles",
        "operationId": "Retrieve WordPress Roles",
        "description": "Get the WordPress roles.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressRoles\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/wordpressSearchReplace": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Initiate a Search and Replace",
        "operationId": "Initiate a Search and Replace",
        "description": "Perform a WordPress search and replace.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressSearchReplace\", [\n            \"search\" => \"string\",\n            \"replace\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "search",
                  "replace"
                ],
                "properties": {
                  "search": {
                    "type": "string"
                  },
                  "replace": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressSettings": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve WordPress Site Settings",
        "operationId": "Retrieve WordPress Site Settings",
        "description": "Get the WordPress site settings\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressSettings\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update WordPress Settings",
        "operationId": "Update WordPress Settings",
        "description": "Set a WordPress setting.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressSettings\", [\n            \"option_name\" => \"string\",\n            \"option_value\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "option_name",
                  "option_value"
                ],
                "properties": {
                  "option_name": {
                    "type": "string"
                  },
                  "option_value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressStagingRemoveClone": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Remove Clone",
        "operationId": "Remove Clone",
        "description": "Remove a staging clone by id\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressStagingRemoveClone\", [\n            \"id\" => 1\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "clone id to remove"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressStaging": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Check Staging Status",
        "operationId": "Check Staging Status",
        "description": "Returns a result based on whether the staging version is in place.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressStaging\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Initiate a Clone",
        "operationId": "Initiate a Clone",
        "description": "Clone a new WordPress site either from live to staging or from staging to live.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressStaging\", [\n            \"type\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "one of \"live\" - copy from live to staging\"staging\" - copy from staging to live"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressThemes": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Installed Themes",
        "operationId": "Retrieve Installed Themes",
        "description": "Returns an array of the installed WordPress themes.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressThemes\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Amend/Remove a WordPress Theme.",
        "operationId": "Amend/Remove a WordPress Theme.",
        "description": "Set status (i.e. activate/deactivate) or remove a WordPress theme.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressThemes\", [\n            \"type\" => \"string\",\n            \"name\" => \"string\"\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "name"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "one of activate|deactivate|remove"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressUpdate": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update WordPress Version",
        "operationId": "Update WordPress Version",
        "description": "Update WordPress to the latest version.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressUpdate\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressUsers": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve WordPress Users",
        "operationId": "Retrieve WordPress Users",
        "description": "Get WordPress Users\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressUsers\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Create/Update a WordPress User",
        "operationId": "Create/Update a WordPress User",
        "description": "Sets users or creates a new one.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/wordpressUsers\", [\n    ]);\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/wordpressVersion": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Current WordPress Version",
        "operationId": "Retrieve Current WordPress Version",
        "description": "Get the WordPress version if installed.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/wordpressVersion\");\n```",
        "tags": [
          "Packages"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/accountBalance": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retreive Account Balance",
        "operationId": "Retreive Account Balance",
        "description": "The \"Retrieve Account Balance\" API endpoint allows you to retrieve the balance data of your reseller account in 20i. This API call is used to obtain information about the current available balance in your account.\nUpon successful execution of the API call, the response will return an array containing the account balance data, including the current balance available in your reseller account.\nPlease note that this API endpoint is designed to provide access to the account balance information within the 20i platform. It allows you to retrieve the current available balance, which can be useful for monitoring and managing your reseller account's financial status.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/accountBalance\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/transferDomain": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Transfer a Domain Name",
        "operationId": "Transfer a Domain Name",
        "description": "The \"Transfer a Domain Name\" API endpoint allows you to transfer a domain name to your 20i account using the 20i API. This API call initiates the process of transferring a domain name from another registrar to 20i.\nTo transfer a domain name, you need to provide the following parameters in the request payload:\nname: The domain name that you want to transfer.\nyears: The number of years for which you want to transfer the domain. In most cases, this should be unset or set to 0 for UK transfers.\ncontact: An array containing contact information for the domain. This includes the organization, name, address, telephone, email, and other details required for domain contact updates.\nemulateYears: If set to true, supplying years greater than 0 for registries that do not support years on transfer (e.g., .uk) will be treated as a transfer and renew operation.\notherContacts: An optional array of additional contacts associated with the domain transfer. These contacts may be ignored for some transfers.\nauthcode: The current EPP authcode required for CentralNIC transfers.\nlimits: A limit code to value map that specifies domain limits for the transfer.\nnameservers: An array of nameserver hostnames for the domain. If not provided, default nameservers will be used. This parameter is ignored for UK transfers.\nprivacyService: If set to true, domain privacy service will be added to the transfer order. Please note that this may not be applicable to some TLDs.\nstackUser: An optional parameter to grant access to a specific stack user.\nUpon successful execution of the API call, the response will return a boolean value indicating whether the transfer purchase was accepted.\nIt's important to note that a successful response does not guarantee the success of the actual domain transfer process.\nPlease note that you can also use the contract#add method instead of this method, as it performs a simple reformatting to use that method. Refer to the documentation of the contract#add method for more details.\nIf there are insufficient funds in your 20i account balance to cover the transfer fee, the transfer will fail.\nThe appropriate transfer fee and any additional charges for services like privacy will be deducted from your 20i account balance.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/transferDomain\", [\n            \"name\" => \"string\",\n            \"years\" => 1,\n            \"contact\" => [\n                \"organisation\" => \"string\",\n                \"name\" => \"string\",\n                \"address\" => \"string\",\n                \"telephone\" => \"string\",\n                \"email\" => \"string\",\n                \"cc\" => \"string\",\n                \"pc\" => \"string\",\n                \"sp\" => \"string\",\n                \"city\" => \"string\",\n                \"extension\" => [\n                ]\n            ],\n            \"emulateYears\" => true,\n            \"otherContacts\" => [\n                \"(type)\" => [\n                    \"name\" => \"string\",\n                    \"organisation\" => \"string\",\n                    \"address\" => \"string\",\n                    \"city\" => \"string\",\n                    \"sp\" => \"string\",\n                    \"pc\" => \"string\",\n                    \"cc\" => \"string\",\n                    \"telephone\" => \"string\",\n                    \"email\" => \"string\",\n                    \"extension\" => [\n                    ]\n                ]\n            ],\n            \"authcode\" => \"string\",\n            \"limits\" => [\n            ],\n            \"nameservers\" => [\"string\"],\n            \"privacyService\" => true,\n            \"stackUser\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "years",
                  "contact",
                  "privacyService"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The domain name"
                  },
                  "years": {
                    "type": "number",
                    "description": "This should usually be unset or 0 for UK transfers,but see $emulateYears."
                  },
                  "contact": {
                    "type": "object",
                    "properties": { },
                    "description": "This is slightly different from updating domain\n\ncontacts, as noted.\n\n- `organisation` (string,required) - As $org when updatingdomain contacts\n\n- `name` (string,required) - As updating domain contacts\n\n- `address` (string,required) - Newline-separated lines withpossible trailling commas. At most 3 lines are\n    allowed.\n\n- `telephone` (string,required) - As $voice when updatingdomain contacts\n\n- `email` (string,required) - As updating domain contacts\n\n- `cc` (string,required) - As updating domain contacts\n\n- `pc` (string,required) - As updating domain contacts\n\n- `sp` (string,nullable) - As updating domain contacts\n\n- `city` (string,required) - As updating domain contacts\n\n- `extension` (object,nullable) - As updating domain contacts"
                  },
                  "emulateYears": {
                    "type": "boolean",
                    "description": "If true, supplying years > 0 forregistries which do not support years on transfer (eg, for .uk)\n\nwill be treated as transfer + renew.",
                    "nullable": true
                  },
                  "otherContacts": {
                    "type": "object",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "type": "object",
                        "required": [
                          "name",
                          "organisation",
                          "address",
                          "city",
                          "sp",
                          "pc",
                          "cc",
                          "telephone",
                          "email"
                        ],
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "organisation": {
                            "type": "string"
                          },
                          "address": {
                            "type": "string",
                            "description": "Newline-separated lines withpossible trailling commas. At most 3 lines are\n\nallowed."
                          },
                          "city": {
                            "type": "string"
                          },
                          "sp": {
                            "type": "string"
                          },
                          "pc": {
                            "type": "string"
                          },
                          "cc": {
                            "type": "string",
                            "description": "Country in ISO3166-alpha2 format"
                          },
                          "telephone": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "extension": {
                            "type": "object",
                            "properties": { },
                            "description": "As updating domain contacts",
                            "nullable": true
                          }
                        },
                        "description": "These may be ignored for some transfers."
                      }
                    },
                    "nullable": true
                  },
                  "authcode": {
                    "type": "string",
                    "description": "The current EPP authcode, as needed forCentralNIC transfers",
                    "nullable": true
                  },
                  "limits": {
                    "type": "object",
                    "properties": { },
                    "description": "A limit code to value map, see domain limits",
                    "nullable": true
                  },
                  "nameservers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Nameserver hostnames, eg \"ns.example.org\". Otherwise you\n\nget defaults.\nIgnored for UK transfers.",
                    "nullable": true
                  },
                  "privacyService": {
                    "type": "boolean",
                    "description": "If true, this will add domain privacy toyour order. This may not be applicable to some TLDs. Please\n\nnote that for .UK this is a chargeable service which is\ndifferent from turning off disclosure."
                  },
                  "stackUser": {
                    "type": "string",
                    "description": "A stack user to grant access to, eg.\"stack-user:123\"",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/passwordResetEmail": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve the Password Reset Email Template",
        "operationId": "Retrieve the Password Reset Email Template",
        "description": "The \"Retrieve the Password Reset Email Template\" API endpoint allows you to retrieve the password reset email template or the default value.\nThis API call is used to obtain the content of the password reset email template, which can be customized for your specific needs.\nThe response from this API call will be a string representing the password reset email template.\nIt contains the content of the template that is either customized based on your configuration or the default value if no customization has been made.\nPlease note that this API endpoint is designed to provide access to the password reset email template within the 20i platform.\nIt allows you to retrieve the template content for further customization or to use the default template if no customization is required.\nThis API endpoint falls under the \"Emails\" section and serves as a means to retrieve the password reset email template or its default value.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/passwordResetEmail\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set a password reset email",
        "operationId": "Set a password reset email",
        "description": "The \"Set a password reset email\" API endpoint allows you to set the template for the password reset email. You can provide the entire content of the email template.\nHere are the details of the API endpoint:\n$in: An array containing the following parameter:\ncontent: The entire content of the password reset email template.\nThe API call requires an instance of the \\Services\\Model class as a parameter.\nThe API will return a boolean value, indicating whether the operation was successful. If the password reset email template is set successfully, the API will return true. Otherwise, it will return false.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/passwordResetEmail\", [\n            \"content\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "content"
                ],
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The entire template content"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mailbox_quota_addon": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List Mailbox Quota Addons",
        "operationId": "List Mailbox Quota Addons",
        "description": "Returns a short, cheap list items.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/mailbox_quota_addon\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/premium_mailbox": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List premium mailboxes.",
        "operationId": "List premium mailboxes.",
        "description": "Returns a short, cheap list items.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/premium_mailbox\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/personal_nameserver": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get Virtual Nameservers",
        "operationId": "Get Virtual Nameservers",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/personal_nameserver\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/mailbox_quota_addon/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get Mailbox Quota Addon",
        "operationId": "Get Mailbox Quota Addon",
        "description": "Returns a set of info for this item.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/mailbox_quota_addon/{id}\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/renewMssqlPre": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1.99
              }
            }
          }
        },
        "summary": "Renew a MSSQL Database",
        "operationId": "Renew a MSSQL Database",
        "description": "The \"Renew a MSSQL Database\" API endpoint allows you to renew an MSSQL database with the provided ID. This operation extends the validity period of the MSSQL database.\nTo use this API, you need to provide the following parameters:\n$in: An array containing the following information:\nid: The ID of the MSSQL database that you want to renew.\nThe API call will return a float value or null. The float value represents the new expiration date of the MSSQL database in Unix timestamp format. If the renewal is unsuccessful or there is an error, the API will return null.\nIt's important to note that this API endpoint will charge the appropriate registration fee to your 20i balance.\nIf you don't have sufficient funds in your balance, the renewal will fail. Therefore, ensure that you have enough balance to cover the renewal fee before making the API call.\nThis API endpoint is useful when you want to automate the renewal process for MSSQL databases and ensure that they remain active and accessible for an extended period.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/renewMssqlPre\", [\n            \"id\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/backupBulkPackages": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retreive Multisite Backups",
        "operationId": "Retreive Multisite Backups",
        "description": "The \"Retrieve Multisite Backups\" API endpoint allows you to retrieve information about existing backups that may contain backups of multiple different sites.\nThis API call is used to obtain details about the backups, including the types of objects backed up (files/databases), download links (if available), backup status, timestamps, and associated hostnames.\nThe response from this API call will be an array of backup objects. Each backup object contains the following information:\ntypes: Specifies the types of objects that were included in the backup, such as files or databases. This field can be null if no backup was taken.\ndownload_link: Provides the download URL for the backup if it is available. This field can be null if no download link exists.\nmessage: Represents a friendly message that indicates the current status of the backup.\nstatus: Represents a code that indicates the current status of the backup.\ncreated_at: Specifies the timestamp when the backup was requested, formatted in MySQL format.\nhost_names: Contains a list of hostnames associated with the backup.\nPlease note that this API endpoint is designed to provide access to backup information, which may include backups of multiple different sites within the 20i platform.\nIt allows you to retrieve details about existing backups, including their types, statuses, timestamps, associated hostnames, and download links if available.\nThis API endpoint falls under the \"Multisite Backups\" section and serves as a means to retrieve important backup-related data for backups that encompass multiple sites.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/backupBulkPackages\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Update Multisite Backups",
        "operationId": "Update Multisite Backups",
        "description": "The \"Update Multisite Backups\" API endpoint allows you to perform backups for multiple packages. You can specify an array of package IDs to be backed up.\nAdditionally, you have the option to delete existing backups by setting the \"delete\" parameter to true.\nHere are the details of the API endpoint:\n$in: An array containing the following parameters:\nid: An array of package IDs that you want to back up.\ndelete: A boolean value indicating whether to delete existing backups. If set to true, any existing backups will be deleted before performing the new backups.\nThe API call will return a boolean value or null. If the backups are successfully updated, the API will return true. In case of any errors or failures, it will return null.\nThis API endpoint is useful when you want to automate the backup process for multiple packages, such as in a multisite environment.\nIt allows you to ensure that the specified packages are backed up, and gives you the option to delete existing backups if needed.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/backupBulkPackages\", [\n            \"id\" => [\"string\"],\n            \"delete\" => true\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "delete"
                ],
                "properties": {
                  "id": {
                    "type": "array",
                    "items": { },
                    "description": "An array of package IDs to backup."
                  },
                  "delete": {
                    "type": "boolean",
                    "description": "If true will delete existing backups"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/nominetBrand": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Fetch your nominet brand",
        "operationId": "Fetch your nominet brand",
        "description": "The \"Fetch your nominet brand\" API endpoint allows you to retrieve your current Nominet brand settings.\nThis API call is used to obtain information about your Nominet brand, including the presence of a Nominet reseller, email address, trading name, URL, and phone number associated with your brand.\nThe response from this API call will be an array containing the following brand settings:\nnominetReseller: Indicates whether a Nominet reseller exists for your brand. This field can be null if there is no Nominet reseller.\nukResellerEmail: Represents the email address associated with your brand, which is typically used as the support email address. This field can be null if no email address is provided.\nukResellerTradingName: Specifies the trading name associated with your brand, which is typically the business name. This field can be null if no trading name is specified.\nukResellerUrl: Provides the URL associated with your brand, typically used as the support URL. This field can be null if no URL is provided.\nukResellerVoice: Represents the phone number to display on your customers' UK domain WHOIS information.\nPlease note that this API endpoint is designed to provide access to your Nominet brand settings within the 20i platform.\nIt allows you to retrieve important information related to your brand, such as reseller status, contact details, and website information.\nThis API endpoint falls under the \"Nominet Brand\" section and serves as a means to fetch and retrieve your current Nominet brand settings.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/nominetBrand\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set/Update your nominet brand",
        "operationId": "Set/Update your nominet brand",
        "description": "The \"Set/Update your nominet brand\" API endpoint allows you to configure and update your Nominet reseller settings.\nYou can set or update various parameters related to your Nominet brand, such as the reseller email, trading name, URL, and phone number.\nHere are the details of the API endpoint:\n$in: An array containing the following parameters:\nnominetReseller: A string value indicating the action to be performed. Use \"c\" to set up a Nominet reseller, \"u\" to update it, or \"d\" to delete it.\nukResellerEmail: The email address associated with your Nominet reseller.\nukResellerTradingName: The trading name of your Nominet reseller.\nukResellerUrl: The URL of your Nominet reseller.\nukResellerVoice: The phone number to be displayed on your customers' UK domain WHOIS information.\nThe API call may throw an exception of type \\ServiceServer\\Exception\\Associated in case of any associated errors.\nThe API will return a boolean value, indicating whether the operation was successful. If the Nominet brand settings are set or updated successfully, the API will return true. Otherwise, it will return false.\nPlease note that this API endpoint may take some time to execute.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/nominetBrand\", [\n            \"nominetReseller\" => \"string\",\n            \"ukResellerEmail\" => \"string\",\n            \"ukResellerTradingName\" => \"string\",\n            \"ukResellerUrl\" => \"string\",\n            \"ukResellerVoice\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nominetReseller": {
                    "type": "string",
                    "description": "\"c\" to set one up, \"u\" to updateit, \"d\" to delete it.",
                    "nullable": true
                  },
                  "ukResellerEmail": {
                    "type": "string",
                    "description": "Same as supportEmailAddress",
                    "nullable": true
                  },
                  "ukResellerTradingName": {
                    "type": "string",
                    "description": "Same as businessName",
                    "nullable": true
                  },
                  "ukResellerUrl": {
                    "type": "string",
                    "description": "Same as supportUrl",
                    "nullable": true
                  },
                  "ukResellerVoice": {
                    "type": "string",
                    "description": "The phone number to show on yourcustomers' UK domain WHOIS info.",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/addWeb": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1
              }
            }
          }
        },
        "summary": "Add a Hosting Package",
        "operationId": "Add a Hosting Package",
        "description": "The \"Package Add\" API endpoint allows you to add hosting packages to your reseller account using the 20i API.\nThis endpoint enables you to create a new web hosting package and associate it with a specific web type reference. The package can include a web site with an initial domain name and additional domain names if needed.\nTo use this endpoint, you need to provide the necessary parameters in the request payload. The parameters include:\n\"type\" (string): A reference to the web type, which is equivalent to the ID found in the \"/packageTypes\" endpoint. This parameter determines the configuration and features of the hosting package.\n\"domain_name\" (string): The initial domain name for the web site associated with the package.\n\"extra_domain_names\" (array of strings, optional): An array of zero or more additional domain names that you want to associate with the package.\n\"label\" (string): A memorable name or label for the package.\n\"documentRoots\" (array): A map that specifies the intended document roots for the domain names associated with the package. The keys of the map are the domain names, and the values are the corresponding document roots.\n\"stackUser\" (string or null): An optional parameter that allows you to link an existing Stack user to the package.\nIf you provide the reference to an existing Stack user, and a welcome email is set for the package type, the welcome email will be sent to the user as soon as possible.\nThe API endpoint supports the following exceptions:\n\"ConflictingObject\" exception: Thrown when there is a conflict with an existing object.\n\"InvalidRequest\" exception: Thrown when the request is invalid or missing required parameters.\nUpon successful execution of the API call, the endpoint returns the newly assigned ID for the hosting package.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/addWeb\", [\n            \"type\" => \"string\",\n            \"domain_name\" => \"string\",\n            \"extra_domain_names\" => [\"string\"],\n            \"label\" => \"string\",\n            \"documentRoots\" => [\n                \"(domain)\" => \"string\"\n            ],\n            \"stackUser\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "domain_name",
                  "label",
                  "documentRoots"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "A web type reference, equivalent to the id in/packageTypes"
                  },
                  "domain_name": {
                    "type": "string",
                    "description": "The initial domain name for the site"
                  },
                  "extra_domain_names": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of zero or more extradomain names",
                    "nullable": true
                  },
                  "label": {
                    "type": "string",
                    "description": "The memorable name for the package"
                  },
                  "documentRoots": {
                    "type": "object",
                    "properties": { },
                    "description": "A map of domain names to intended document\n\nroots\n\n- ``domain`` (string,required) -"
                  },
                  "stackUser": {
                    "type": "string",
                    "description": "eg. \"stack-user:1\". An existing Stackuser to link to the package.",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/addStackUserPackageAllowance": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Add a Hosting Package allowance",
        "operationId": "Add a Hosting Package allowance",
        "description": "The \"Add a Hosting Package Allowance\" API endpoint enables you to add a hosting package allowance for a stack user. A hosting package allowance represents the number of packages a user can create under that allowance.\nTo add a hosting package allowance, you need to provide the following parameters in the request payload:\ntype: This parameter represents the package bundle type ID and the corresponding allowance. It should be provided in the format \"{$packageBundleTypeId}-{$allowance}\".\nstackUser: This parameter specifies the stack user tuple to which the allowance should be added.\nUpon successful execution of the API call, the response will include the following information:\nserviceId: The ID of the newly created allowance.\nlabel: The label or name associated with the new service.\nplatform: The type of platform.\nPlease note that this API endpoint specifically deals with the addition of hosting package allowances for stack users. It allows you to specify the package bundle type and the corresponding allowance for a particular stack user.\nFor further details regarding the request and response structure, authentication, and other API-related information, please refer to the API documentation or any additional documentation provided by 20i.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/addStackUserPackageAllowance\", [\n            \"type\" => \"string\",\n            \"stackUser\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "stackUser"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "A tuple of the package bundle type id and the allowance.  EG \"{$packageBundleTypeId}-{$allowance}\" like \"12345-10\""
                  },
                  "stackUser": {
                    "type": "string",
                    "description": "The stack user tuple"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/updateStackUserPackageAllowance": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Update a Package Allowance",
        "operationId": "Update a Package Allowance",
        "description": "The \"Update a Package Allowance\" API endpoint allows you to update a stack user package allowance. Currently, only the deletion of allowances is supported.\nTo update a package allowance, you need to provide the following parameter in the request payload:\ndelete-id: An array of ID's to delete. This parameter specifies the IDs of the allowances that should be deleted.\nUpon successful execution of the API call, the response will return a boolean value:\ntrue: Indicates that the deletion of the specified allowances was successful.\nIt is important to note that this API endpoint currently only supports the deletion of package allowances.\nIf you need to perform other types of updates or modifications to package allowances, please refer to the API documentation or any additional documentation provided by 20i for alternative methods or endpoints.\nreturn bool True on success\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/updateStackUserPackageAllowance\", [\n            \"delete-id\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "delete-id"
                ],
                "properties": {
                  "delete-id": {
                    "type": "array",
                    "items": { },
                    "description": "An array of ID's to delete."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/packageTypeBrand": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Package Brand Type",
        "operationId": "Retrieve Package Brand Type",
        "description": "The \"Retrieve Package Brand Type\" API endpoint allows you to fetch the branding details for a specific package. It retrieves the package branding configuration associated with the provided package ID.\nWhen making the API call, you need to provide the following parameter:\n$in: An array containing the package ID. The package ID is specified as the \"packageid\" parameter.\nThe response from this API call will be an array containing the following information:\ndefaultPages: An array representing the default pages associated with the package branding. It includes the following keys:\nIndexPageHtml: The HTML content of the index page.\nDeactivatedPageHtml: The HTML content of the deactivated page.\nServiceUnavailablePageHtml: The HTML content of the service unavailable page.\nMaintenanceLoginPageHtml: The HTML content of the maintenance login page.\nThe package branding configuration allows you to customize the appearance and content of various pages related to the package, such as the index page, deactivated page, service unavailable page, and maintenance login page.\nBy retrieving this configuration, you can access the default HTML content for these pages and modify them according to your needs.\nPlease note that the provided package ID is used to identify the specific package for which you want to fetch the branding details.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/packageTypeBrand\", [\n            \"packageid\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "packageid"
                ],
                "properties": {
                  "packageid": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/packageCount": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get package totals",
        "operationId": "Get package totals",
        "description": "The \"Get package totals\" API endpoint allows you to retrieve a count of packages split by their respective types.\nThe supported package types are \"linux\", \"windows\", and \"wordpress\". This API call provides information about the number of packages associated with each type.\nThe response from this API call will be an array containing the following counts:\nlinux: Represents the count of Linux web(s) or packages.\nwindows: Represents the count of Windows web(s) or packages.\nwordpress: Represents the count of WordPress web(s) or packages.\nPlease note that this API endpoint is designed to provide an overview of the package distribution based on different types within the 20i platform.\nIt allows you to retrieve the total counts of packages associated with each type, such as Linux, Windows, and WordPress.\nThis API endpoint falls under the \"Package Count\" section and serves as a means to obtain the package totals categorized by their respective types.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/packageCount\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/deleteWeb": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Delete a Package",
        "operationId": "Delete a Package",
        "description": "The \"Package Delete\" API endpoint allows you to delete one or multiple packages (web sites) using their respective IDs. This API call provides a way to remove unwanted packages or websites from your hosting environment.\nTo delete packages, you need to provide the following parameters in the request payload:\ndelete-id: An array of package IDs that you want to delete. Each package ID represents a specific web site or hosting package.\nUpon successful execution of the API call, the response will return an array with the following structure:\n$(ref): A boolean value indicating the success of the deletion operation. It represents whether the specified packages were successfully deleted.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/deleteWeb\", [\n            \"delete-id\" => [\"string\"]\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "delete-id"
                ],
                "properties": {
                  "delete-id": {
                    "type": "array",
                    "items": { },
                    "description": "IDs of packages to be deleted"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/packageTypes": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List Package Types",
        "operationId": "List Package Types",
        "description": "The \"List Package Types\" API endpoint provides information about package types in the 20i reseller system.\nA package type in 20i allows resellers to define specific limits and configurations for hosting packages.\nThese package types are essential for setting up new packages with predefined settings.\nBy making a request to this endpoint, you can retrieve information about the available package types.\nThe response will be an array of package type objects, where each object contains details about a specific package type.\nThe exact structure of the response can be found in the API documentation or additional documentation provided by 20i.\nUpon successful execution of the API call, the endpoint will return the package type information in the response.\nThe package type objects typically include attributes such as the type's name, limits, configurations, or any other relevant information associated with the package type.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/packageTypes\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1
              }
            }
          }
        },
        "summary": "Create a Package Type",
        "operationId": "Create a Package Type",
        "description": "The \"Create a Package Type\" API endpoint allows you to create a new package type in the 20i reseller system. A package type in 20i is used to define specific limits, configurations, and settings for hosting packages. This endpoint enables resellers to create custom package types tailored to their specific requirements.\nTo create a package type, you need to provide the necessary parameters in the request payload. The parameters include:\n\"label\" (string): The customer label or name for the package type.\n\"platform\" (string): The base operating system (OS) for the package type, such as \"linux\" or \"windows\".\n\"limit\" (array): A map of limit codes to values, specifying the limits and configurations for the package type. The limit codes correspond to specific web limits and their respective values define the limits for the package type.\n\"installApps\" (array or null): An optional parameter that specifies a plain array of app codes. These apps will be automatically installed when a package of this type is created. If not provided or set to null, no apps will be automatically installed.\n\"welcomeEmail\" (array or null): An optional parameter that defines the content of the welcome email sent to customers when a package of this type is created. It includes the \"from\" address, the email \"subject,\" and the email \"data\" (content).\n\"passwordResetEmail\" (string or null): An optional parameter that specifies the email content for password reset instructions. If not provided or set to null, the default password reset email will be used.\n\"defaultPages\" (array): A map of default pages for the package type. It includes optional HTML content for the \"IndexPageHtml,\" \"DeactivatedPageHtml,\" and \"ServiceUnavailablePageHtml\" pages.\n\"extraData\" (array or null): An optional parameter that provides additional data specific to the package type. It includes the \"temporaryUrlDomain\" to use as the temporary URL domain and the \"phpVersion\" to specify the desired PHP version.\nUpon successful execution of the API call, the endpoint will return the ID of the newly created package type.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/packageTypes\", [\n            \"label\" => \"string\",\n            \"platform\" => \"string\",\n            \"limit\" => [\n            ],\n            \"installApps\" => [\"string\"],\n            \"welcomeEmail\" => [\n                \"from\" => \"string\",\n                \"subject\" => \"string\",\n                \"data\" => \"string\"\n            ],\n            \"passwordResetEmail\" => \"string\",\n            \"defaultPages\" => [\n                \"IndexPageHtml\" => \"string\",\n                \"DeactivatedPageHtml\" => \"string\",\n                \"ServiceUnavailablePageHtml\" => \"string\"\n            ],\n            \"extraData\" => [\n                \"temporaryUrlDomain\" => \"string\",\n                \"phpVersion\" => \"string\"\n            ]\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "label",
                  "platform",
                  "limit",
                  "defaultPages"
                ],
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The customer label for this type"
                  },
                  "platform": {
                    "type": "string",
                    "description": "The base OS for the type(something like \"linux\" or \"windows\")"
                  },
                  "limit": {
                    "type": "object",
                    "properties": { },
                    "description": "A limit code to value map, see web limits"
                  },
                  "installApps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A plain array of app codes which will be automatically\n\ninstalled. Null is equivalent to the empty array here.",
                    "nullable": true
                  },
                  "welcomeEmail": {
                    "type": "object",
                    "required": [
                      "from",
                      "subject",
                      "data"
                    ],
                    "properties": {
                      "from": {
                        "type": "string"
                      },
                      "subject": {
                        "type": "string"
                      },
                      "data": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  },
                  "passwordResetEmail": {
                    "type": "string",
                    "nullable": true
                  },
                  "defaultPages": {
                    "type": "object",
                    "properties": {
                      "IndexPageHtml": {
                        "type": "string",
                        "nullable": true
                      },
                      "DeactivatedPageHtml": {
                        "type": "string",
                        "nullable": true
                      },
                      "ServiceUnavailablePageHtml": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "extraData": {
                    "type": "object",
                    "required": [
                      "temporaryUrlDomain",
                      "phpVersion"
                    ],
                    "properties": {
                      "temporaryUrlDomain": {
                        "type": "string",
                        "description": "The domain to use as the temp URL"
                      },
                      "phpVersion": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/updateWebType": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Update Package Types",
        "operationId": "Update Package Types",
        "description": "The \"Update Package Types\" API endpoint allows you to update package types within your 20i account. This API call is used to modify various settings and configurations associated with package types.\nTo update package types, you need to provide the following parameters in the request payload:\ndelete-id: A set of IDs of items to delete.\nextraData: A map of type ID to extra data settings. Currently, the only supported setting is \"temporaryUrlDomain,\" which specifies the domain to use as the temporary URL.\nid: A set of IDs to update.\ninstallApps: A map of type ID to an array of app codes. These app codes represent the apps that will be automatically installed for the specified package types.\nlabels: An array that specifies the new labels for each package type.\nlimit: An array that defines the new limit values for various limits associated with each package type. The limit codes and their corresponding subcodes are used to set the limit values.\nplatform: Specifies the platform for the package types. This parameter is optional.\nsyncLimits: A map of type ID to true, indicating which package types should have their limits synchronized.\nwelcomeEmail: A map of type ID to welcome email settings, including the subject, from email address, and the full text/HTML content of the welcome email.\nUpon successful execution of the API call, the response will return an array with the updated information for the package types.\nPlease note that this API endpoint is designed to handle the modification of package types within the 20i platform.\nIt provides flexibility in updating various settings and configurations associated with package types. If an invalid request is made, an exception of type \"InvalidRequest\" will be thrown.\nThis API endpoint falls under the \"Package Types\" section and allows you to manage and update the characteristics and configurations of different package types within your 20i account.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/updateWebType\", [\n            \"delete-id\" => [\"string\"],\n            \"extraData\" => [\n                \"(id)\" => [\n                    \"temporaryUrlDomain\" => \"string\"\n                ]\n            ],\n            \"id\" => [\"string\"],\n            \"installApps\" => [\n                \"(type_id)\" => [\"string\"]\n            ],\n            \"labels\" => [\n            ],\n            \"limit\" => [\n                \"(type_id)\" => [\n                    \"(limit_code)\" => true\n                ]\n            ],\n            \"platform\" => \"string\",\n            \"syncLimits\" => [\n                \"(type_id)\" => true\n            ],\n            \"welcomeEmail\" => [\n                \"(id)\" => [\n                    \"subject\" => \"string\",\n                    \"from\" => \"string\",\n                    \"content\" => \"string\"\n                ]\n            ]\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "delete-id",
                  "id",
                  "labels",
                  "limit",
                  "syncLimits"
                ],
                "properties": {
                  "delete-id": {
                    "type": "array",
                    "items": { },
                    "description": "Set of IDs of items to delete"
                  },
                  "extraData": {
                    "type": "object",
                    "properties": { },
                    "description": "A map of type ID to extra data settings - currently\n\ntemporaryUrlDomain\n\n- ``id`` (object,required) - \n    - `temporaryUrlDomain` (string,required) - The domain to use as thetemp URL",
                    "nullable": true
                  },
                  "id": {
                    "type": "array",
                    "items": { },
                    "description": "Set of IDs to update"
                  },
                  "installApps": {
                    "type": "object",
                    "properties": { },
                    "description": "Map of type ID to array of app codes which will be\n\nautomatically installed. Null is equivalent to the empty array\nhere.\n\n- ``type_id`` (array[string],required) -",
                    "nullable": true
                  },
                  "labels": {
                    "type": "object",
                    "properties": { }
                  },
                  "limit": {
                    "type": "object",
                    "required": [
                      "type_id"
                    ],
                    "properties": {
                      "type_id": {
                        "type": "object",
                        "required": [
                          "limit_code"
                        ],
                        "properties": {
                          "limit_code": {
                            "type": "string",
                            "description": "The limit value to set"
                          }
                        }
                      }
                    }
                  },
                  "platform": {
                    "type": "string",
                    "nullable": true
                  },
                  "syncLimits": {
                    "type": "object",
                    "properties": { },
                    "description": "Map of type ID to true to indicate which\n\ntypes should have their limits synchronised.\n\n- ``type_id`` (boolean,required) -"
                  },
                  "welcomeEmail": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "object",
                        "required": [
                          "subject",
                          "from",
                          "content"
                        ],
                        "properties": {
                          "subject": {
                            "type": "string",
                            "description": "The welcome email subject"
                          },
                          "from": {
                            "type": "string",
                            "description": "The from email address to use"
                          },
                          "content": {
                            "type": "string",
                            "description": "The full text/html email content"
                          }
                        },
                        "nullable": true
                      }
                    },
                    "description": "A map of type ID to welcome email settings",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/updatePackage": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Update/Delete a Package",
        "operationId": "Update/Delete a Package",
        "description": "The \"Update/Delete a Package\" API endpoint allows you to update or delete packages within your 20i account. This API call is used to modify the limits, labels, or delete web sites associated with a package.\nTo update or delete a package, you need to provide the following parameters in the request payload:\nbilling: An array that contains information about the customer's renewal date, renewal interval, preferred user, and other relevant details.\ndelete-id: An array of package IDs to be deleted.\nid: An array of currently known package IDs.\nlabels: An array that specifies the new label for each package.\nlimit: An array that defines the new values for various limits associated with each package.\nlimit-set: An array that determines whether specific limits should be changed or removed.\npackageBundleTypes: An array that specifies the new bundle type for each package.\nUpon successful execution of the API call, the response will return an array with the IDs of the services that were updated or deleted.\nPlease note that this API endpoint is designed to handle the modification and deletion of packages within the 20i platform.\nIt requires the appropriate package IDs and parameters to perform the desired actions. If a package does not exist or the specified users do not have access, an exception will be thrown.\nThis API endpoint falls under the \"Package Update\" section and provides a flexible way to manage and modify packages associated with your 20i account.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/updatePackage\", [\n            \"billing\" => [\n                \"(package_id)\" => [\n                    \"date\" => \"string\",\n                    \"interval\" => 1,\n                    \"preferredUser\" => \"string\",\n                ]\n            ],\n            \"delete-id\" => [\"string\"],\n            \"id\" => [\"string\"],\n            \"labels\" => [\n                \"(package_id)\" => \"string\"\n            ],\n            \"limit\" => [\n                \"(package_id)\" => [\n                    \"(limit_code)\" => true\n                ]\n            ],\n            \"limit-set\" => [\n                \"(package_id)\" => [\n                    \"(limit_code)\" => true\n                ]\n            ],\n            \"packageBundleTypes\" => [\n                \"(package_id)\" => \"string\"\n            ]\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "billing",
                  "delete-id",
                  "id",
                  "labels",
                  "limit",
                  "limit-set",
                  "packageBundleTypes"
                ],
                "properties": {
                  "billing": {
                    "type": "object",
                    "required": [
                      "package_id"
                    ],
                    "properties": {
                      "package_id": {
                        "type": "object",
                        "required": [
                          "date",
                          "interval",
                          "preferredUser"
                        ],
                        "properties": {
                          "date": {
                            "type": "string",
                            "description": "The date when the customer is due to renewwith you, in ISO8601 format"
                          },
                          "interval": {
                            "type": "number",
                            "description": "The typical renewal period your customeris using, in months."
                          },
                          "preferredUser": {
                            "type": "string",
                            "description": "The stackuser ident (eg stack-user:000)"
                          }
                        }
                      }
                    }
                  },
                  "delete-id": {
                    "type": "array",
                    "items": { },
                    "description": "IDs of packages to be deleted"
                  },
                  "id": {
                    "type": "array",
                    "items": { },
                    "description": "An array of currently known package IDs, see alsolimit and limit-set. Items not in this list will be\n\nignored except for \"billing\" and \"delete-id\" purposes."
                  },
                  "labels": {
                    "type": "object",
                    "properties": {
                      "package_id": {
                        "type": "string",
                        "description": "The new label for the package",
                        "nullable": true
                      }
                    }
                  },
                  "limit": {
                    "type": "object",
                    "required": [
                      "package_id"
                    ],
                    "properties": {
                      "package_id": {
                        "type": "object",
                        "required": [
                          "limit_code"
                        ],
                        "properties": {
                          "limit_code": {
                            "type": "string",
                            "description": "The new value for the given limit. Codes\n\ncurrently include:\n\n+  \"allFutureOneClick\" (boolean)\n\n+  \"accessErrorLogs\" (boolean)\n\n+  \"accountSummary\" (boolean)\n\n+  \"additionalFtpUsers\" (number)\n\n+  \"allowExternalSsl\" (boolean)\n\n+  \"allowForceSsl\" (boolean)\n\n+  \"appManager\" (boolean)\n\n+  \"apps\" (set)\n\n+  \"awstats\" (boolean)\n\n+  \"backups\" (boolean)\n\n+  \"bandwidth\" (number)\n\n+  \"blockVisitors\" (boolean)\n\n+  \"cdnCaching\" (boolean)\n\n+  \"cdnOptimisation\" (boolean)\n\n+  \"cdnStatistics\" (boolean)\n\n+  \"customDocRoot\" (boolean)\n\n+  \"customPrimaryDocRoot\" (boolean)\n\n+  \"directoryIndexing\" (boolean)\n\n+  \"dns\" (boolean)\n\n+  \"domainContacts\" (boolean)\n\n+  \"domainPrivacy\" (boolean)\n\n+  \"emailSummary\" (boolean)\n\n+  \"fileManager\" (boolean)\n\n+  \"freeSsl\" (boolean)\n\n+  \"ftp\" (boolean)\n\n+  \"googleTranslate\" (boolean)\n\n+  \"highEmailNotification\" (number)\n\n+  \"hotlinkProtection\" (boolean)\n\n+  \"imapSync\" (boolean)\n\n+  \"lowEmailNotification\" (number)\n\n+  \"mailAutoresponders\" (number)\n\n+  \"mailboxes\" (number)\n\n+  \"mailCatchAllForwarders\" (boolean)\n\n+  \"mailForwarders\" (number)\n\n+  \"mailJunkFilterLogs\" (boolean)\n\n+  \"mailJunkFilters\" (boolean)\n\n+  \"maintenanceMode\" (boolean)\n\n+  \"malwareScan\" (boolean)\n\n+  \"malwareReport\" (boolean)\n\n+  \"manageWpDatabase\" (boolean)\n\n+  \"manageWpDatabase\" (boolean)\n\n+  \"manageWpPlugins\" (boolean)\n\n+  \"manageWpThemes\" (boolean)\n\n+  \"manageWpUsers\" (boolean)\n\n+  \"manageWpAdminUsers\" (boolean)\n\n+  \"manageWpSearchReplace\" (boolean)\n\n+  \"manageWpSiteSettings\" (boolean)\n\n+  \"manageWpStaging\" (boolean)\n\n+  \"manageWpChecksumReport\" (boolean)\n\n+  \"manageWpUpdates\" (boolean)\n\n+  \"maxMailboxSize\" (number)\n\n+  \"mssqlDatabases\" (number)\n\n+  \"mysqlDatabases\" (number)\n\n+  \"names\" (boolean)\n\n+  \"nameservers\" (boolean)\n\n+  \"nameserverCheck\" (boolean)\n\n+  \"passwordProtectedDirectories\" (boolean)\n\n+  \"platformReinstall\" (boolean)\n\n+  \"phpConfig\" (boolean)\n\n+  \"phpMyAdmin\" (boolean)\n\n+  \"primaryFtpUnlock\" (boolean)\n\n+  \"remoteMysql\" (boolean)\n\n+  \"scheduledTasks\" (boolean)\n\n+  \"sitemapGenerator\" (boolean)\n\n+  \"ssh\" (boolean)\n\n+  \"subdomains\" (number)\n\n+  \"switchPhpVersion\" (boolean)\n\n+  \"temporaryURL\" (boolean)\n\n+  \"timelineBackups\" (boolean)\n\n+  \"usageInformation\" (boolean)\n\n+  \"webalizer\" (boolean)\n\n+  \"webBuilder\" (boolean)\n\n+  \"webmail\" (boolean)\n\n+  \"webRedirect\" (boolean)\n\n+  \"webspace\" (number)\n\n+  \"whois\" (boolean)\n\n+  \"wpAdmin\": (boolean)"
                          }
                        }
                      }
                    }
                  },
                  "limit-set": {
                    "type": "object",
                    "required": [
                      "package_id"
                    ],
                    "properties": {
                      "package_id": {
                        "type": "object",
                        "required": [
                          "limit_code"
                        ],
                        "properties": {
                          "limit_code": {
                            "type": "boolean",
                            "description": "True if this limit is to be changedor removed, ie the counterpart \"limit\" entry\n\nwill be ignored unless this is true."
                          }
                        }
                      }
                    }
                  },
                  "packageBundleTypes": {
                    "type": "object",
                    "required": [
                      "package_id"
                    ],
                    "properties": {
                      "package_id": {
                        "type": "string",
                        "description": "The new bundle type for the package.The new packageBundleType must be on the same platform."
                      }
                    },
                    "description": "This requires corresponding entries in \"id\""
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/resetPassword": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Send a Password reset email",
        "operationId": "Send a Password reset email",
        "description": "The \"Send a Password Reset Email\" API endpoint allows you to send a password reset email to a user. This email is sent when a password reset token is provided.\nThe API endpoint is designed to work in conjunction with the password reset functionality of the authentication service.\nTo use this API, you need to provide the following parameters:\n$in: An array containing the following information:\ntoken: The password reset token.\nusername (optional): The username associated with the account. This parameter is not required but can be provided for additional identification purposes.\nurl: The URL of the password reset page where the user will be redirected to. This URL should be in the format of \"http://example.org/resetPassword\" or a similar format.\nThe API call will return a boolean value indicating the success or failure of the password reset email sending operation. A value of true indicates that the email was sent successfully, while false indicates a failure.\nThis API endpoint is useful when you want to trigger a password reset email to a user who has requested to reset their password.\nBy providing the token, username (optional), and the URL of the password reset page, the API will send an email to the user with instructions on how to proceed with the password reset process.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/resetPassword\", [\n            \"token\" => \"string\",\n            \"username\" => \"string\",\n            \"url\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "url"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Reset token"
                  },
                  "username": {
                    "type": "string",
                    "nullable": true
                  },
                  "url": {
                    "type": "string",
                    "description": "Password reset page URL, likehttp://example.org/resetPassword"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/premium_mailbox/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Premium Mailbox Information",
        "operationId": "Retrieve Premium Mailbox Information",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/premium_mailbox/{id}\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/renewDomain": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Renew a Domain Name",
        "operationId": "Renew a Domain Name",
        "description": "The \"Renew a Domain Name\" API endpoint allows you to renew a domain name. This operation charges the appropriate registration fee to your 20i Balance. If you do not have sufficient balance, the renewal will fail.\nTo use this API, you need to provide the following parameters:\n$in: An array containing the following information:\nname: The domain name that you want to renew.\nyears: The number of years for which you want to renew the domain.\nrenewPrivacy (optional): A boolean value indicating whether to renew the associated privacy for the domain. By default, this parameter is set to false.\nThe API call will return a boolean value indicating the success or failure of the domain renewal operation. A value of true indicates that the domain was renewed successfully, while false indicates a failure.\nIt's important to note that this API endpoint charges the registration fee for the domain renewal from your 20i Balance. Therefore, make sure you have sufficient balance before attempting to renew a domain.\nThis API endpoint is useful when you want to automate the domain renewal process and ensure that your domains are renewed for the desired number of years.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/renewDomain\", [\n            \"name\" => \"string\",\n            \"years\" => 1,\n            \"renewPrivacy\" => true\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "years"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The domain name"
                  },
                  "years": {
                    "type": "number"
                  },
                  "renewPrivacy": {
                    "type": "boolean",
                    "description": "Renew the associated privacy.  Defaults to false",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/renewTlsCertificatePre": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1.99
              }
            }
          }
        },
        "summary": "Renew an SSL Certificate",
        "operationId": "Renew an SSL Certificate",
        "description": "The \"Renew an SSL Certificate\" API endpoint allows you to renew an SSL certificate with the provided ID for a specified period in months. This operation extends the validity period of the SSL certificate.\nTo use this API, you need to provide the following parameters:\n$in: An array containing the following information:\nid: The ID of the SSL certificate that you want to renew.\nperiodMonths: The number of months for which you want to renew the SSL certificate.\nThe API call will return a float value or null. The float value represents the new expiration date of the SSL certificate in Unix timestamp format. If the renewal is unsuccessful or there is an error, the API will return null.\nIt's important to note that this API endpoint will charge the appropriate registration fee to your 20i balance.\nIf you don't have sufficient funds in your balance, the renewal will fail. Therefore, ensure that you have enough balance to cover the renewal fee before making the API call.\nThis API endpoint is useful when you want to automate the renewal process for SSL certificates and ensure that they remain valid and secure for an extended period.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/renewTlsCertificatePre\", [\n            \"id\" => \"string\",\n            \"periodMonths\" => 1\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id",
                  "periodMonths"
                ],
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "periodMonths": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set/Update reseller settings",
        "operationId": "Set/Update reseller settings",
        "description": "The \"Set/Update reseller settings\" API endpoint allows you to update the settings of a reseller account using the 20i API. This API call is used to modify various settings related to the reseller account.\nTo update the reseller settings, you need to provide the following parameters in the request payload:\nmalwareEmails: A boolean value indicating whether the reseller has opted into receiving malware-related emails.\nmalwareEmailsStackCpUsers: A boolean value indicating whether the associated StackCP users of the reseller have opted into receiving malware-related emails.\nmigrationCompleteEmails: A boolean value indicating whether the reseller has opted into receiving emails notifying them about completed migrations.\ndomainAutoRenewDefault: A boolean value indicating the default auto-renewal behavior for domains. If set to true, domains will be set to auto-renew; if set to false, domains will be set to cancel upon renewal.\nUpon successful execution of the API call, the response will return a boolean value indicating whether any of the settings were successfully saved. If at least one setting was modified and saved, the response will be true.\nIt's important to note that these settings are specific to the reseller account and will affect the behavior of the associated reseller features and services.\nPlease ensure that you review the API documentation for more detailed information on the parameters and their usage.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}\", [\n            \"malwareEmails\" => true,\n            \"malwareEmailsStackCpUsers\" => true,\n            \"migrationCompleteEmails\" => true,\n            \"domainAutoRenewDefault\" => true\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "malwareEmails",
                  "malwareEmailsStackCpUsers",
                  "migrationCompleteEmails",
                  "domainAutoRenewDefault"
                ],
                "properties": {
                  "malwareEmails": {
                    "type": "boolean",
                    "description": "whether opted into malware emails"
                  },
                  "malwareEmailsStackCpUsers": {
                    "type": "boolean",
                    "description": "whether opted into malware emails for associated StackCP users"
                  },
                  "migrationCompleteEmails": {
                    "type": "boolean",
                    "description": "Wether opted into migration complete emails"
                  },
                  "domainAutoRenewDefault": {
                    "type": "boolean",
                    "description": "True to auto renew, false to cancel on renewal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tls_certificate/{id}/retryApproval": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Resend SSL Approval Email",
        "operationId": "Resend SSL Approval Email",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/tls_certificate/{id}/retryApproval\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/serviceChangeData": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Known Service Change Requests",
        "operationId": "Retrieve Known Service Change Requests",
        "description": "The \"Retrieve Known Service Change Requests\" API endpoint allows you to retrieve the known service change requests and their current status.\nA service change request refers to the process of moving a package from one service level, such as \"linux\", to another service level, such as \"windows\".\nThis API call provides information about the existing service change requests and their relevant details.\nThe response from this API call will be an array of objects, where each object represents a service change request. Each object contains the following information:\nid: The unique identifier of the service change request.\nname: The name associated with the service change request.\njobId: The job ID associated with the service change request.\nstatus: The current status of the service change request.\noldServiceLevel: The previous service level of the package.\nnewServiceLevel: The new service level to which the package is being moved.\npackageId: The ID of the package undergoing the service level change.\nresellerId: (Optional) The ID of the reseller associated with the service change request.\nnewPackageBundleTypeId: (Optional) The ID of the new package bundle type.\ncreatedAt: (Optional) The timestamp indicating when the service change request was created.\nupdatedAt: (Optional) The timestamp indicating the last update time of the service change request.\nPlease note that this API endpoint is designed to provide access to the known service change requests and their corresponding details within the 20i platform.\nIt allows you to retrieve information about the service level changes that have been requested or are in progress.\nThis API endpoint falls under the \"Services\" section and serves as a means to retrieve the known service change requests and their current status.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/serviceChangeData\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/splitPackage": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Split out additional domains to their own packages",
        "operationId": "Split out additional domains to their own packages",
        "description": "The \"Split Package\" API endpoint allows you to split additional domains from a package into their own separate packages.\nThis can be useful when you want to manage domains individually or allocate separate resources to specific domains.\nTo split additional domains from a package, you need to provide the following parameters in the request payload:\npackageId: The ID of the package from which the domains will be split.\ndomains: An array containing the details of the domains to be split. Each domain should have the following information:\nfqdn: The fully qualified domain name (FQDN) of the domain.\ndatabases: An optional array that can be used to specify any additional databases related to the split domains. The structure and details of this parameter are not provided in the given documentation.\nUpon successful execution of the API call, the response will return an array or null value:\narray: An array containing any relevant information or data related to the split operation.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/splitPackage\", [\n            \"packageId\" => \"string\",\n            \"domains\" => [\n                \"fqdn\" => \"string\"\n            ],\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "packageId",
                  "domains",
                  "databases"
                ],
                "properties": {
                  "packageId": {
                    "type": "string"
                  },
                  "domains": {
                    "type": "object",
                    "required": [
                      "fqdn"
                    ],
                    "properties": {
                      "fqdn": {
                        "type": "string"
                      }
                    }
                  },
                  "databases": {
                    "type": "object",
                    "properties": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/stackUser/{stackUserId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get stack user.",
        "operationId": "Get stack user.",
        "description": "An array expression of the user.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/stackUser/{stackUserId}\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stackUserId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/stackUser/{stackUserId}/ftpLocks": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get stack user FTP locks.",
        "operationId": "Get stack user FTP locks.",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/stackUser/{stackUserId}/ftpLocks\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stackUserId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/stackUser/{stackUserId}/grants": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Get stack user grants.",
        "operationId": "Get stack user grants.",
        "description": "Returns the list of granted objects.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/stackUser/{stackUserId}/grants\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stackUserId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/stackUserPackageAllowance/{stackUserPackageAllowanceId}/addWeb": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 1
              }
            }
          }
        },
        "summary": "Add website to Stack User Package Allowance",
        "operationId": "Add website to Stack User Package Allowance",
        "description": "Add package on this allowance\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/stackUserPackageAllowance/{stackUserPackageAllowanceId}/addWeb\", [\n            \"domain_name\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stackUserPackageAllowanceId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "domain_name"
                ],
                "properties": {
                  "domain_name": {
                    "type": "string",
                    "description": "The domain name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/stackUserPackageAllowance/{stackUserPackageAllowanceId}/update": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Update the packages set on this allowance",
        "operationId": "Update the packages set on this allowance",
        "description": "This will update the allowance to match whats passed in. So if\na package is already on here but the ID is not passed in it will\nbe removed.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/stackUserPackageAllowance/{stackUserPackageAllowanceId}/update\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stackUserPackageAllowanceId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/stackUserPackageAllowance/{stackUserPackageAllowanceId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Information About a Stack User Package Allowance",
        "operationId": "Retrieve Information About a Stack User Package Allowance",
        "description": "Return an array of this object.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/stackUserPackageAllowance/{stackUserPackageAllowanceId}\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stackUserPackageAllowanceId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/explicitStackUserCheck": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Check if a stack user exists",
        "operationId": "Check if a stack user exists",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/explicitStackUserCheck\", [\n            \"email\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email address"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/susers": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Update StackCP Users",
        "operationId": "Update StackCP Users",
        "description": "The \"Update StackCP Users\" API endpoint allows you to update your StackCP users. You can modify various details of the users, such as their contact information, FTP access, grant permissions, and more.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/susers\", [\n            \"contact\" => [\n                \"(user_ref)\" => [\n                    \"person_name\" => \"string\",\n                    \"company_name\" => \"string\",\n                    \"address\" => \"string\",\n                    \"city\" => \"string\",\n                    \"sp\" => \"string\",\n                    \"pc\" => \"string\",\n                    \"cc\" => \"string\",\n                    \"voice\" => \"string\",\n                    \"notes\" => \"string\",\n                    \"billing_ref\" => \"string\",\n                    \"email\" => \"string\",\n                ]\n            ],\n            \"ftpLock\" => [\n                \"(user_ref)\" => [\n                    \"existing\" => [\n                        \"(lock_ref)\" => [\n                            \"Ip4Address\" => \"string\",\n                            \"Ip6Address\" => \"string\",\n                            \"delete\" => true\n                        ]\n                    ],\n                    \"new\" =>[ [\n                        \"Ip4Address\" => \"string\",\n                        \"Ip6Address\" => \"string\"\n                    ]]\n                ]\n            ],\n            \"grant_map\" => [\n                \"(user_ref)\" => [\n                    \"(service_ref)\" => true\n                ]\n            ],\n            \"masterFtpAcl\" => [\n                \"(user_ref)\" => [\n                    \"Ip4Address\" => [\"string\"]\n                ]\n            ],\n            \"newUser\" => [\n                \"person_name\" => \"string\",\n                \"company_name\" => \"string\",\n                \"address\" => \"string\",\n                \"city\" => \"string\",\n                \"sp\" => \"string\",\n                \"pc\" => \"string\",\n                \"cc\" => \"string\",\n                \"voice\" => \"string\",\n                \"notes\" => \"string\",\n                \"billing_ref\" => \"string\",\n                \"email\" => \"string\",\n                \"nominet_contact_type\" => \"string\",\n                \"sendNewStackUserEmail\" => true,\n                \"isAgencyClient\" => true,\n            ],\n            \"users\" => [\n                \"(user_ref)\" => [\n                    \"password\" => \"string\",\n                    \"delete\" => true\n                ]\n            ],\n            \"masterFtp\" => [\n            ]\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contact",
                  "ftpLock",
                  "grant_map",
                  "newUser",
                  "users",
                  "masterFtp"
                ],
                "properties": {
                  "contact": {
                    "type": "object",
                    "required": [
                      "user_ref"
                    ],
                    "properties": {
                      "user_ref": {
                        "type": "object",
                        "required": [
                          "person_name",
                          "address",
                          "city",
                          "sp",
                          "pc",
                          "cc",
                          "voice",
                          "notes",
                          "email"
                        ],
                        "properties": {
                          "person_name": {
                            "type": "string"
                          },
                          "company_name": {
                            "type": "string",
                            "nullable": true
                          },
                          "address": {
                            "type": "string",
                            "description": "Newline-separated lines withpossible trailling commas. At most 3 lines are\n\nallowed."
                          },
                          "city": {
                            "type": "string"
                          },
                          "sp": {
                            "type": "string"
                          },
                          "pc": {
                            "type": "string"
                          },
                          "cc": {
                            "type": "string"
                          },
                          "voice": {
                            "type": "string"
                          },
                          "notes": {
                            "type": "string"
                          },
                          "billing_ref": {
                            "type": "string",
                            "nullable": true
                          },
                          "email": {
                            "type": "string",
                            "description": "Please note that setting this willrename the user"
                          }
                        },
                        "description": "The Stack user's contact details (for your reference)"
                      }
                    }
                  },
                  "ftpLock": {
                    "type": "object",
                    "required": [
                      "user_ref"
                    ],
                    "properties": {
                      "user_ref": {
                        "type": "object",
                        "required": [
                          "existing",
                          "new"
                        ],
                        "properties": {
                          "existing": {
                            "type": "object",
                            "required": [
                              "lock_ref"
                            ],
                            "properties": {
                              "lock_ref": {
                                "type": "object",
                                "required": [
                                  "Ip4Address",
                                  "Ip6Address",
                                  "delete"
                                ],
                                "properties": {
                                  "Ip4Address": {
                                    "type": "string"
                                  },
                                  "Ip6Address": {
                                    "type": "string"
                                  },
                                  "delete": {
                                    "type": "boolean",
                                    "description": "If true, the entry will be deleted."
                                  }
                                }
                              }
                            }
                          },
                          "new": {
                            "type": "array",
                            "items": { }
                          }
                        },
                        "description": "The addresses that a Stack user can access FTP from"
                      }
                    }
                  },
                  "grant_map": {
                    "type": "object",
                    "required": [
                      "user_ref"
                    ],
                    "properties": {
                      "user_ref": {
                        "type": "object",
                        "required": [
                          "service_ref"
                        ],
                        "properties": {
                          "service_ref": {
                            "type": "boolean",
                            "description": "False to revoke, true to grant."
                          }
                        }
                      }
                    },
                    "description": "For example, [\"stack-user:1\" => [\"package:2\" => true]]"
                  },
                  "masterFtpAcl": {
                    "type": "object",
                    "required": [
                      "user_ref"
                    ],
                    "properties": {
                      "user_ref": {
                        "type": "object",
                        "required": [
                          "Ip4Address"
                        ],
                        "properties": {
                          "Ip4Address": {
                            "type": "array",
                            "items": { }
                          }
                        }
                      }
                    },
                    "nullable": true
                  },
                  "newUser": {
                    "type": "object",
                    "required": [
                      "address",
                      "city",
                      "sp",
                      "pc",
                      "cc",
                      "voice",
                      "email"
                    ],
                    "properties": {
                      "person_name": {
                        "type": "string",
                        "nullable": true
                      },
                      "company_name": {
                        "type": "string",
                        "nullable": true
                      },
                      "address": {
                        "type": "string",
                        "description": "Newline-separated lines withpossible trailling commas. At most 3 lines are\n\nallowed."
                      },
                      "city": {
                        "type": "string"
                      },
                      "sp": {
                        "type": "string"
                      },
                      "pc": {
                        "type": "string"
                      },
                      "cc": {
                        "type": "string",
                        "description": "Country in ISO3166-alpha3 format"
                      },
                      "voice": {
                        "type": "string"
                      },
                      "notes": {
                        "type": "string",
                        "nullable": true
                      },
                      "billing_ref": {
                        "type": "string",
                        "nullable": true
                      },
                      "email": {
                        "type": "string",
                        "description": "Required"
                      },
                      "nominet_contact_type": {
                        "type": "string",
                        "description": "Seehttp://registrars.nominet.uk/registration-and-domain-management/field-definitions-and-registrant-types#MainContent",
                        "nullable": true
                      },
                      "sendNewStackUserEmail": {
                        "type": "boolean",
                        "description": "If truethen a new stack user email will be sent to the\n\nuser",
                        "nullable": true
                      },
                      "isAgencyClient": {
                        "type": "boolean",
                        "description": "True if the client belongs to the agency hub",
                        "nullable": true
                      }
                    },
                    "description": "Details of a new Stack user to set up."
                  },
                  "users": {
                    "type": "object",
                    "required": [
                      "user_ref"
                    ],
                    "properties": {
                      "user_ref": {
                        "type": "object",
                        "required": [
                          "password",
                          "delete"
                        ],
                        "properties": {
                          "password": {
                            "type": "string",
                            "description": "New password to use"
                          },
                          "delete": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  },
                  "masterFtp": {
                    "type": "object",
                    "properties": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reseller/{resellerId}/virtualNameserver": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Get virtual nameserver.",
        "operationId": "Get virtual nameserver.",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/virtualNameserver\");\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Set virtual nameservers.",
        "operationId": "Set virtual nameservers.",
        "description": "Updates the service config. Please note that if you change the\nname, the domain name that you use must have DNS managed by\nus. DNS records will automatically be set on the name.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/reseller/{resellerId}/virtualNameserver\", [\n            \"name\" => \"string\"\n    ]);\n```",
        "tags": [
          "Reseller"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The domain name to use, eg.example.org if you want ns1.example.org"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/timelineBackup/database/{databaseId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List Database Timeline Storage items",
        "operationId": "List Database Timeline Storage items",
        "description": "Returns information about the database backup object\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/timelineBackup/database/{databaseId}\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "databaseId",
            "in": "path",
            "description": "The database ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/timelineBackup/database/{databaseId}/jobs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                },
                "example": [ ]
              }
            }
          }
        },
        "summary": "List Database Snapshot jobs",
        "operationId": "List Database Snapshot jobs",
        "description": "Returns any currently running jobs.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/timelineBackup/database/{databaseId}/jobs\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "databaseId",
            "in": "path",
            "description": "The database ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/timelineStorages": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List all Timeline Storage items",
        "operationId": "List all Timeline Storage items",
        "description": "Get all timeline storage items, for this web and matching name dead\nwebs.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/timelineStorages\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/timelineBackup/mailbox/{mailboxId}/jobs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                },
                "example": [ ]
              }
            }
          }
        },
        "summary": "List Mailbox Snapshot jobs",
        "operationId": "List Mailbox Snapshot jobs",
        "description": "Returns any currently running jobs.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/timelineBackup/mailbox/{mailboxId}/jobs\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "mailboxId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/timelineBackup": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List Timeline Storage items",
        "operationId": "List Timeline Storage items",
        "description": "Returns an object representation of this timeline storage item.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/timelineBackup\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/reseller/{resellerId}/timelineStorage": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List Timeline Storage items",
        "operationId": "List Timeline Storage items",
        "description": "Returns a full object representing the timeline storage service.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/reseller/{resellerId}/timelineStorage\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "resellerId",
            "in": "path",
            "description": "Your reseller ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/timeline_storage": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List Timeline Storage items",
        "operationId": "List Timeline Storage items",
        "description": "Returns a short object representing the timeline storage service.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/timeline_storage\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/timelineBackup/web/jobs": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                },
                "example": [ ]
              }
            }
          }
        },
        "summary": "List Web Snapshot jobs",
        "operationId": "List Web Snapshot jobs",
        "description": "Returns any currently running jobs.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/timelineBackup/web/jobs\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/timelineBackup/mailbox/{mailboxId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List Mailbox Timeline Storage items",
        "operationId": "List Mailbox Timeline Storage items",
        "description": "Returns information about the mailbox backup object\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/timelineBackup/mailbox/{mailboxId}\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "mailboxId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/package/{packageId}/web/timelineBackup/database/{databaseId}/restoreSnapshot": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Restore Database Snapshot Item",
        "operationId": "Restore Database Snapshot Item",
        "description": "Restores a snapshot.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/timelineBackup/database/{databaseId}/restoreSnapshot\", [\n            \"action\" => \"string\",\n            \"RestoreAsOf\" => 1,\n            \"RestorePath\" => \"string\",\n            \"target\" => \"string\"\n    ]);\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "databaseId",
            "in": "path",
            "description": "The database ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "RestoreAsOf",
                  "RestorePath"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "One of \"restore\" or \"mysqlrestore\""
                  },
                  "RestoreAsOf": {
                    "type": "number",
                    "description": "A UNIX timestamp"
                  },
                  "RestorePath": {
                    "type": "string"
                  },
                  "target": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/timelineBackup/mailbox/{mailboxId}/restoreSnapshot": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Restore Mailbox Snapshot Item",
        "operationId": "Restore Mailbox Snapshot Item",
        "description": "Restores a snapshot.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/timelineBackup/mailbox/{mailboxId}/restoreSnapshot\", [\n            \"timestamp\" => \"string\"\n    ]);\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "mailboxId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "timestamp"
                ],
                "properties": {
                  "timestamp": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/timelineBackup/web/restoreSnapshot": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Restore Web Snapshot Item",
        "operationId": "Restore Web Snapshot Item",
        "description": "Restores a snapshot.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/timelineBackup/web/restoreSnapshot\", [\n            \"action\" => \"string\",\n            \"RestoreAsOf\" => 1,\n            \"RestorePath\" => \"string\",\n            \"target\" => \"string\"\n    ]);\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "action",
                  "RestoreAsOf",
                  "RestorePath"
                ],
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "One of \"restore\" or \"mysqlrestore\""
                  },
                  "RestoreAsOf": {
                    "type": "number",
                    "description": "A UNIX timestamp"
                  },
                  "RestorePath": {
                    "type": "string"
                  },
                  "target": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/timelineBackup/database/{databaseId}/takeSnapshot": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Take Snapshot Item",
        "operationId": "Take Snapshot Item",
        "description": "Starts an immediate snapshot.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/timelineBackup/database/{databaseId}/takeSnapshot\", [\n    ]);\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "databaseId",
            "in": "path",
            "description": "The database ID.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/timelineBackup/mailbox/{mailboxId}/takeSnapshot": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Take Snapshot Item",
        "operationId": "Take Snapshot Item",
        "description": "Starts an immediate snapshot.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/timelineBackup/mailbox/{mailboxId}/takeSnapshot\", [\n    ]);\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "mailboxId",
            "in": "path",
            "description": "FIXME",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/timelineBackup/web/takeSnapshot": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Take Snapshot Item",
        "operationId": "Take Snapshot Item",
        "description": "Starts an immediate snapshot.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/package/{packageId}/web/timelineBackup/web/takeSnapshot\", [\n    ]);\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/package/{packageId}/web/timelineBackup/web": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List Web Timeline Storage items",
        "operationId": "List Web Timeline Storage items",
        "description": "Returns information about the web backup object\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/package/{packageId}/web/timelineBackup/web\");\n```",
        "tags": [
          "Timeline Backups"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Package ID retrieved from get packages.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}/userStatus": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Activate or deactivate",
        "operationId": "Activate or deactivate",
        "description": "Activates or deactivates the service.\nPossible subservice_name are 'default' for a typical set of services\nand 'main' for the core service only.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/userStatus\", [\n            \"includeRepeated\" => true,\n            \"subservices\" => [\n                \"(subservice_name)\" => true\n            ]\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "includeRepeated",
                  "subservices"
                ],
                "properties": {
                  "includeRepeated": {
                    "type": "boolean",
                    "description": "When reactivating, if true,this will revoke all your deactivations rather than\n\njust the current one."
                  },
                  "subservices": {
                    "type": "object",
                    "required": [
                      "subservice_name"
                    ],
                    "properties": {
                      "subservice_name": {
                        "type": "boolean",
                        "description": "True to enable, false to disable."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/backups": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { }
                  }
                },
                "example": [
                  { }
                ]
              }
            }
          }
        },
        "summary": "List all VPS backups",
        "operationId": "List all VPS backups",
        "description": "Returns a list of backup services for the VPS\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/backups\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { }
                  }
                },
                "example": [
                  { }
                ]
              }
            }
          }
        },
        "summary": "Update a VPS backup",
        "operationId": "Update a VPS backup",
        "description": "Updates timeline storage items for the server\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/backups\", [\n            \"(backup_id)\" => [\n            ]\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "backup_id"
                ],
                "properties": {
                  "backup_id": {
                    "type": "object",
                    "properties": { }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/changePassword": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Set the Root Password for a VPS",
        "operationId": "Set the Root Password for a VPS",
        "description": "Will reboot the server and reset the root password (Linux VPS only)\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/changePassword\", [\n            \"password\" => \"string\"\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password"
                ],
                "properties": {
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/cpanel": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                },
                "example": [ ]
              }
            }
          }
        },
        "summary": "Retrieve cPanel Information",
        "operationId": "Retrieve cPanel Information",
        "description": "Return cPanel information.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/cpanel\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}/disk": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List all VPS Disks",
        "operationId": "List all VPS Disks",
        "description": "Returns a list of disks for the VPS\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/disk\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve VPS Information",
        "operationId": "Retrieve VPS Information",
        "description": "Returns and object that represents the VPS\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}/addon/{addonId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retreive",
        "operationId": "Retreive",
        "description": "Returns a short, cheap set of info for this item. If this function takes\nmore than 1ms, that's too long.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/addon/{addonId}\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "addonId",
            "in": "path",
            "description": "The addon Id.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}/ipv6Address": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Add IPV6 Address",
        "operationId": "Add IPV6 Address",
        "description": "Add a free IPV6 address to the VPS\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/ipv6Address\", [\n            \"version\" => \"string\"\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "description": "must be 6",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/limits": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retreive limits",
        "operationId": "Retreive limits",
        "description": "Returns the limits for the current user, a key-value map.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/limits\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}/rebuildOperatingSystems": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "string"
                ]
              }
            }
          }
        },
        "summary": "Retrieve Available Operating Systems",
        "operationId": "Retrieve Available Operating Systems",
        "description": "Returns the available OS codes for rebuild.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/rebuildOperatingSystems\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}/reboot": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Reboot a VPS",
        "operationId": "Reboot a VPS",
        "description": "Reboots the VPS.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/reboot\", [\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/rebuild": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Rebuild a VPS",
        "operationId": "Rebuild a VPS",
        "description": "Rebuilds the VPS with the specified configuration.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/rebuild\", [\n            \"ApplicationId\" => \"string\",\n            \"cpanel\" => true,\n            \"cpanelCode\" => true,\n            \"VpsOsId\" => \"string\",\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "cpanel",
                  "cpanelCode"
                ],
                "properties": {
                  "ApplicationId": {
                    "type": "string",
                    "nullable": true
                  },
                  "cpanel": {
                    "type": "boolean",
                    "description": "If true and you have cpanel, rebuilds with cpanelenabled."
                  },
                  "cpanelCode": {
                    "type": "boolean",
                    "description": "If provided and the current product code for cPanel is different\n\n     +  it will be changed to the new code/spec"
                  },
                  "VpsOsId": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/reverseDNS": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Reverse DNS Configuration",
        "operationId": "Retrieve Reverse DNS Configuration",
        "description": "Returns the reverse DNS records for the attached addresses.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/reverseDNS\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": { }
                  }
                },
                "example": [
                  { }
                ]
              }
            }
          }
        },
        "summary": "Update Reverse DNS",
        "operationId": "Update Reverse DNS",
        "description": "Updates reverse DNS records for the supplied IP addresses.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/reverseDNS\", [\n            \"(ip_address)\" => [\n                \"new\" => [\n                    \"target\" => \"string\"\n                ],\n                \"delete\" => \"string\"\n            ]\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ip_address"
                ],
                "properties": {
                  "ip_address": {
                    "type": "object",
                    "properties": {
                      "new": {
                        "type": "object",
                        "required": [
                          "target"
                        ],
                        "properties": {
                          "target": {
                            "type": "string"
                          }
                        },
                        "nullable": true
                      },
                      "delete": {
                        "type": "string",
                        "description": "The existing entry ref(s) toremove",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/stop": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Shutdown a VPS",
        "operationId": "Shutdown a VPS",
        "description": "Stops the VPS.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/stop\", [\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/start": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Start a VPS",
        "operationId": "Start a VPS",
        "description": "Starts the VPS.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/start\", [\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/vnc": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve VNC Information",
        "operationId": "Retrieve VNC Information",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/vnc\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}/lockVnc": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Lock VNC",
        "operationId": "Lock VNC",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/lockVnc\", [\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    },
    "/vps/{vpsId}/unlockVnc": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { }
                },
                "example": { }
              }
            }
          }
        },
        "summary": "Unlock VNC",
        "operationId": "Unlock VNC",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/unlockVnc\", [\n            \"IpAddress\" => \"string\"\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "IpAddress": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vps": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "List all VPS",
        "operationId": "List all VPS",
        "description": "Returns an array of VPS objects.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/vps/{vpsId}/name": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve VPS Name",
        "operationId": "Retrieve VPS Name",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/vps/{vpsId}/name\");\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Set a Name for the VPS",
        "operationId": "Set a Name for the VPS",
        "description": "Set the VPS Name.  Max 255 characters, over this will be truncated.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/vps/{vpsId}/name\", [\n            \"name\" => \"string\"\n    ]);\n```",
        "tags": [
          "VPS"
        ],
        "parameters": [
          {
            "name": "vpsId",
            "in": "path",
            "description": "The VPS ID retrieved from get vps.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new VPS name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/website_turbo/{websiteTurboId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Information for Website Turbo service",
        "operationId": "Retrieve Information for Website Turbo service",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/website_turbo/{websiteTurboId}\");\n```",
        "tags": [
          "Website Turbo"
        ],
        "parameters": [
          {
            "name": "websiteTurboId",
            "in": "path",
            "description": "The Website Turbo ID retrieved from get website turbo.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/website_turbo": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": { }
          }
        },
        "summary": "Retrieve Information for Website Turbo service",
        "operationId": "Retrieve Information for Website Turbo service",
        "description": "```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->getWithFields(\"/website_turbo\");\n```",
        "tags": [
          "Website Turbo"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ]
      }
    },
    "/website_turbo/{websiteTurboId}/assignPackage": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Assign package",
        "operationId": "Assign package",
        "description": "Assign a package to this website turbo object.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/website_turbo/{websiteTurboId}/assignPackage\", [\n            \"packageId\" => \"string\"\n    ]);\n```",
        "tags": [
          "Website Turbo"
        ],
        "parameters": [
          {
            "name": "websiteTurboId",
            "in": "path",
            "description": "The Website Turbo ID retrieved from get website turbo.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "packageId"
                ],
                "properties": {
                  "packageId": {
                    "type": "string",
                    "description": "The package ID to assign to this website turbo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/website_turbo/{websiteTurboId}/unAssignPackage": {
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "headers": { },
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "example": true
              }
            }
          }
        },
        "summary": "Unassign Package",
        "operationId": "Unassign Package",
        "description": "Remove the package from this website turbo object.\n\n```\n    <?php\n    $general_api_key = \"API_KEY\";\n    $services_api = new \\TwentyI\\API\\Services($general_api_key);\n\n    $request = $services_api->postWithFields(\"/website_turbo/{websiteTurboId}/unAssignPackage\", [\n    ]);\n```",
        "tags": [
          "Website Turbo"
        ],
        "parameters": [
          {
            "name": "websiteTurboId",
            "in": "path",
            "description": "The Website Turbo ID retrieved from get website turbo.",
            "required": true,
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "e.g. Bearer token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": { },
              "schema": {
                "type": "object",
                "properties": { }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": { }
  },
  "tags": [
    {
      "name": "Domain Names"
    },
    {
      "name": "Managed VPS"
    },
    {
      "name": "MSSQL Databases"
    },
    {
      "name": "Packages"
    },
    {
      "name": "Reseller"
    },
    {
      "name": "Timeline Backups"
    },
    {
      "name": "VPS"
    },
    {
      "name": "Website Turbo"
    }
  ]
}
