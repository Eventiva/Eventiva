//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
    schemas = ["base", "api", "reports", "identities", "communities", "segment"]
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

enum Protocol {
    HTTP
    HTTPS
    TCP
    UDP
    WS
    WSS
    @@schema("base")
}

enum AccountType {
    USER
    ADMIN
    SYSTEM
    SERVICE
    @@schema("base")
}

enum ServerStatus {
    PENDING
    ONLINE
    OFFLINE
    UNKNOWN
    @@schema("api")
}

enum CheckType {
    PING
    HTTP
    HTTPS
    TCP
    UDP
    WS
    WSS
    @@schema("api")
}

enum CheckTarget {
    SERVER
    API
    @@schema("api")
}

enum LinkType {
    EMAIL
    PHONE
    USERNAME
    UUID
    VERBAL
    SOCIAL
    ASSOCIATION
    OTHER
    @@schema("identities")
}

enum Certainty {
    LOW
    MEDIUM
    HIGH
    VERY_HIGH
    CONFIRMED
    @@schema("identities")
}

enum ReportType {
    PROFESSIONALCONDUCT
    GENERALCONDUCT
    DISCRIMINATION
    CHEATING
    LEAKING
    SPAM
    TOXICITY
    SENTIMENT
    ABUSE
    HARASSMENT
    PERMISSIONABUSE
    GRIEFING
    HACKING
    SCAMMING
    FRAUD
    OTHER
    @@schema("reports")
}

/// @@auth
model User {
    address Address[]
    /// @gte(13)
    /// @lte(200)
    age Int?
    /// @url
    avatar String?
    birthday DateTime?
    company String?
    /// @length(max: 500)
    description String?
    /// @email('must be a valid email')
    email String @unique()
    firstName String?
    gender String?
    lastName String?
    /// @regex('^+?[0-9]{1,15}$', message: 'must be a valid phone number')
    phone String @unique()
    title String?
    username String @unique()
    /// @url
    website String?
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    accounts Identifier[]
    community Members[]
    role UserRoles[]
    sessions Session[]
    authenticators Authenticator[]
    verification VerificationToken[]
    /// @gte(0)
    /// @lte(4)
    /// @allow('update', auth().admin == 4, true)
    admin Int @default(0)
    /// @gte(0)
    /// @lte(4)
    /// @allow('update', auth().admin == 4, true)
    create Int @default(0)
    /// @gte(0)
    /// @lte(4)
    /// @allow('update', auth().admin == 4, true)
    read Int @default(1)
    /// @gte(0)
    /// @lte(4)
    /// @allow('update', auth().admin == 4, true)
    update Int @default(1)
    /// @gte(0)
    /// @lte(4)
    /// @allow('update', auth().admin == 4, true)
    delete Int @default(1)
    /// @password
    /// @length(min: 8, max: 32, message: 'must be between 8 and 32 characters long')
    /// @omit
    password String
    verified Boolean @default(false)
    claimed Boolean @default(false)
    type AccountType

    @@schema("base")
}

model Role {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    name String @unique()
    users UserRoles[]
    permissions PermissionRole[]

    @@schema("base")
}

model UserRoles {
    user User @relation(fields: [userId], references: [id])
    userId String
    role Role @relation(fields: [roleId], references: [id])
    roleId String
    updatedAt DateTime @updatedAt()
    createdAt DateTime @default(now())

    @@id([userId, roleId])
    @@schema("base")
}

model Permission {
    id Int @default(autoincrement()) @id()
    name String? @unique()
    target String
    role PermissionRole[]
    /// @gte(0)
    /// @lte(3)
    create Int @default(0)
    /// @gte(0)
    /// @lte(3)
    read Int @default(0)
    /// @gte(0)
    /// @lte(3)
    update Int @default(0)
    /// @gte(0)
    /// @lte(3)
    delete Int @default(0)
    updatedAt DateTime @updatedAt()
    createdAt DateTime @default(now())

    @@schema("base")
}

model PermissionRole {
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId Int
    role Role @relation(fields: [roleId], references: [id])
    roleId String
    updatedAt DateTime @updatedAt()
    createdAt DateTime @default(now())

    @@id([roleId, permissionId])
    @@schema("base")
}

model Server {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    community Community @relation(fields: [communityId], references: [id])
    communityId String
    resources Resource[]
    status Check[]
    reports Report[]
    api Access[]
    hostname String?
    /// @regex('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')
    ipAddress String?
    /// @gte(1)
    /// @lte(65535)
    port Int? @default(80)
    protocol Protocol? @default(HTTPS)
    /// @url
    FRDN String @unique()
    name String
    datashare Boolean @default(true)

    @@schema("base")
}

model Access {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    server Server @relation(fields: [serverId], references: [id])
    serverId String
    token String? @unique()
    FRDN String @unique()
    type String?
    status ServerStatus?

    @@schema("api")
}

model Check {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    server Server @relation(fields: [serverId], references: [id])
    serverId String
    status ServerStatus
    target CheckTarget
    type CheckType

    @@schema("api")
}

model Community {
    address Address[]
    /// @url
    avatar String?
    /// @length(max: 500)
    description String?
    /// @email('must be a valid email')
    email String @unique()
    employees Int?
    industry String?
    name String?
    /// @regex('^+?[0-9]{1,15}$', message: 'must be a valid phone number')
    phone String @unique()
    /// @url
    website String?
    plan String?
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    members Members[]
    servers Server[]
    resources Resource[]

    @@schema("communities")
}

model Members {
    user User @relation(fields: [userId], references: [id])
    userId String
    community Community @relation(fields: [communityId], references: [id])
    communityId String
    updatedAt DateTime @updatedAt()
    createdAt DateTime @default(now())

    @@id([userId, communityId])
    @@schema("communities")
}

model Resource {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    name String
    value String @unique()
    type ResourceType @relation(fields: [typeid], references: [id])
    typeid String
    server Server? @relation(fields: [serverid], references: [id])
    serverid String?
    community Community @relation(fields: [communityid], references: [id])
    communityid String
    description String
    data Json[]

    @@schema("communities")
}

model ResourceType {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    name String
    resources Resource[]

    @@schema("communities")
}

model Address {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    user User? @relation(fields: [userId], references: [id])
    userId String?
    community Community? @relation(fields: [communityId], references: [id])
    communityId String?
    city String?
    country String?
    postalCode String?
    state String?
    street String?

    @@schema("base")
}

model Identifier {
    anonymousId String @unique() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    user User? @relation(fields: [userId], references: [id])
    userId String?
    complaints Report[] @relation("user")
    reports Report[] @relation("reporter")
    identities LinkedIdentities[] @relation("user")
    associatedWith LinkedIdentities[] @relation("associates")
    platform Platform @relation(fields: [platformId], references: [id])
    platformId String
    fieldName String
    value String
    data Json[]
    type String?
    provider String?
    providerAccountId String?
    refresh_token String? @db.Text()
    access_token String? @db.Text()
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text()
    session_state String?

    @@unique([provider, providerAccountId])
    @@schema("identities")
}

model Platform {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    identifier Identifier[]
    name String

    @@schema("identities")
}

model LinkedIdentities {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    user Identifier @relation("user", fields: [userId], references: [anonymousId])
    userId String
    identities Identifier @relation("associates", fields: [identityId], references: [anonymousId])
    identityId String
    type LinkType
    certainty Certainty

    @@unique([userId, identityId])
    @@schema("identities")
}

model Report {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    target Identifier @relation(fields: [targetId], references: [anonymousId], name: "user")
    targetId String
    reportingUser Identifier @relation(fields: [reportingUserId], references: [anonymousId], name: "reporter")
    reportingUserId String
    server Server @relation(fields: [serverId], references: [id])
    serverId String
    data Json[]
    type ReportType
    grading Int
    files File[]
    actions Action[]

    @@map("reports")
    @@schema("reports")
}

model File {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    report Report @relation(fields: [reportId], references: [id])
    reportId String
    name String
    url String

    @@map("files")
    @@schema("reports")
}

model Action {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    report Report @relation(fields: [reportId], references: [id])
    reportId String
    actionType String
    /// @allow('read', report.server.datashare || auth() == report.reportingUser.user || auth().role?[role.permissions?[permission.target == 'report_actions' && permission.read > 1]])
    actionData Json[]
    /// @gt(0)
    /// @lte(100)
    actionValue Int @default(1)

    @@map("actions")
    @@schema("reports")
}

model Session {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    sessionToken String @unique()
    expires DateTime

    @@schema("api")
}

model Authenticator {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    credentialID String @unique()
    providerAccountId String
    credentialPublicKey String
    counter Int
    credentialDeviceType String
    credentialBackedUp Boolean
    transports String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@schema("api")
}

model VerificationToken {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime
    identifier String
    /// @password
    token String @unique()
    expires DateTime
    user User @relation(fields: [userId], references: [id])
    userId String

    @@unique([identifier, token])
    @@schema("api")
}